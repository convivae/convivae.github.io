<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello world</title>
    <url>/posts/hello-world/</url>
    <content><![CDATA[<blockquote>
<p>Today, Begining</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>再探编码</title>
    <url>/posts/zai-tan-bian-ma/</url>
    <content><![CDATA[<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p>本文转载自 <a target="_blank" rel="noopener" href="https://ihomura.cn/2018/06/26/%E5%86%8D%E6%8E%A2%E7%BC%96%E7%A0%81/#more">澪同学的博客</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>计算机发展本身就是多元化的，而且标准或者说字符集具有地域性，再加上计算机系统的历史遗留性（没错，那边的 Windows 说的就是你），我觉得编码一直是一个很难的问题。</p>
<a id="more"></a>

<p>在我的博客还是 WordPress 的时候我曾经写过一篇讲编码的文章，但是实际上那时候我也是一知半解，写出来的东西也是浅薄无趣的。</p>
<p>然而学CS，一知半解是最恐怖的，正好最近就在各种踩坑，所以不如一次弄明白算了，也算是解决长久以来的一块心病了。</p>
<p>所以本文会尝试去理清各种字符集以及编码之间的关系，如果有任何错误还请指出。</p>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>字符集简单来说就是一个映射，通常情况下是一个整数到某个特定的字符的双射，比如在 ASCII 字符集中，’A’ 对应的是 65， 反过来 65 也对应的是 ‘A’。</p>
<p>字符集概念很简单，但是有两个问题。</p>
<ul>
<li>我知道一个字符集中 65 对应 ‘A’，反之亦然，那我可以确定它是 ASCII 吗？</li>
<li>我在 C++ 中写了 <code>char a = &#39;A&#39;</code> 然后发现变量 a 的值真的是 65，那是不是所有字符集中字符都是由它相对应的整数表示？</li>
</ul>
<p>对于第一个问题，答案当然是否。因为字符集一般都是向前兼容的，比如 Unicode 中 ‘A’ 也是 65。</p>
<p>对于第二个问题，答案也是否。因为当字符集太大的时候，如果都这样表示，那么会浪费相当大的空间，我们在后面的 UTF 会看到如何解决这个问题。</p>
<p>简单概括下，字符集就是字符和整数的映射，它不代表计算机内部的实际编码表示。</p>
<h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>ASCII 全称 American Standard Code for Information Interchange，它只有 8bit 长，但是实际上编码只用了 7bit，还有一位一般是用来奇偶校验（因为很多电子通信也用 ASCII）。</p>
<p>具体的 ASCII 表这里不再给出，只强调一点就是绝大部分字符集和编码方式都是兼容 ASCII 的。</p>
<h3 id="Extend-ASCII-扩展-ASCII"><a href="#Extend-ASCII-扩展-ASCII" class="headerlink" title="Extend ASCII(扩展 ASCII)"></a>Extend ASCII(扩展 ASCII)</h3><p>当计算机走向世界的时候，人们首先发现的问题就是 ASCII 不够用了。</p>
<p>但是正如我之前说过的，编码具有很强的历史性，改变编码方式很难一次到位，所以扩展 ASCII 就出现了，它的做法很简单：把原来 ASCII 中不参与编码的最高位拿出来用于编码，这样原来 ASCII 范围 0～127 就变成了扩展 ASCII 的0～255。</p>
<p>但是这里有个问题是扩展 ASCII 不像 ASCII 那样只有一个标准，也就是说扩展 ASCII 实际上有很多种，不过最后被采用的是 ISO 8859，由于 Windows 中实现要比最终标准化早一些，所以 Windows 中对应的 Windows-1252 实际上是 ISO 8859 的超集。</p>
<p>到这里问题还不大，但是 Windows 为自己埋下了祸根。</p>
<h3 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h3><p>首先这里要纠正一个错误的认知：没有任何一种编码方式/字符集叫做 ANSI。</p>
<p>ANSI 已经很累了，不想再背锅了。</p>
<p>ANSI 全称是 American National Standards Institute，是一个标准化组织，比如上面的 ISO 8859 就是它跟 ISO 一起提出来的。</p>
<p>那么当我们在谈 ANSI 编码的时候，我们在谈什么？</p>
<h3 id="Windows-Code-Page-Windows-代码页"><a href="#Windows-Code-Page-Windows-代码页" class="headerlink" title="Windows Code Page(Windows 代码页)"></a>Windows Code Page(Windows 代码页)</h3><p>实际上，一般说 ANSI 编码实际上想提到的就是 Windows 代码页。</p>
<p>换句话说，我们在说 ANSI 编码的时候，很大可能想表达的是某个国家特定的字符集和它所代表的代码页。</p>
<p>比如中文系统使用的 GBK 在 Windows 中的代码页是 cp936，一般我们在中国说 ANSI 编码可能指的就是 GBK，而上面的 Windows-1252 就是代码页 cp1252，表示的就是相应的扩展 ASCII。</p>
<p>但是代码页可以说是 Windows 中最致命的残留之一，这个问题直到 Windows10 1803 才有了一定程度的解决，但是由于 Windows 高度的向前兼容性，这个问题恐怕在不久的将来还会一直存在，除非 NT 推倒重来。</p>
<p>这里引用 cppreference 的一段话来说明这个问题</p>
<blockquote>
<p><code>wchar_t</code> - type for wide character representation (see wide strings). Required to be large enough to represent any supported character code point (32 bits on systems that support<br>Unicode. A notable exception is Windows, where wchar_t is 16 bits and holds UTF-16 code units) It has the same size, signedness, and alignment as one of the integer types, but is a<br>distinct type.</p>
</blockquote>
<p>这里 <code>wchar_t</code> 在 Windows 上只有 16bit 的根源就在于代码页的设计。</p>
<p>在微软最初的设计里，代码页只有两种 Single-Byte Character Set(SBCS) 和 Double-Byte Character Set(DBCS)，比如上面的 cp1252 就是一个 SBCS，中文系统使用的 cp936 就是一个 DBCS。</p>
<p>当然现在微软也有 UTF-8 编码的代码页，不过那都是后话了。</p>
<h3 id="国标"><a href="#国标" class="headerlink" title="国标"></a>国标</h3><h4 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h4><p>扩展 ASCII 还是太少了，比如中文，255 个字怎么可能够用嘛，隔壁同源的日文也是同理。</p>
<p>所以国家这时候就开始着手设计自己的字符集了，第一个国标就是 GB2312。</p>
<p>GB2312 采用两个字节编码，收录了绝大多数常用的汉字。</p>
<h4 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h4><p>但是 GB2312 只收录了约 7000 个汉字，甚至连朱镕基的“镕”都没有，而且台湾港澳台使用的字体也没有收录，所以就有了 GBK，即 “GB2312扩”。</p>
<p>它仍然采用两个字节编码，兼容 GB2312 的同时收录了日本、台湾和韩国等通用字符集的汉字。</p>
<p>Windows 中的 936 号代码页实际上几乎就是 GBK。</p>
<p>但是随着计算机技术的发展，GBK 仍然无法满足需要，而且 GBK 实际上并不是国家标准，所以后来接盘的是 GB18030，这里我们先停下来，看一看隔壁的 Unicode。</p>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>随着 Internet 的发展，编码的问题愈发突出，如何让文本能正确的显示在显示器上成了一个难题，Unicode 就是在这种背景下出现的。</p>
<p>最新的 Unicode 标注一共收录了约 14 万个字符，基本涵盖了世界上绝大数语言。</p>
<p>从 Unicode 起，另外一个问题提了出来：有了字符集，如何编码让它更适合计算机使用或者网络传输呢？</p>
<p>之前的单字节和双字节编码因为占用空间少，所以直接不加任何编码就可以使用，但是 Unicode 可是有 14 万个，如果还采用<strong>定长编码</strong>的话至少需要 18bit 才能保证一一对应，这样的话对于之前 ASCII 中就有的字符来说有 11bit 就被浪费了，显然是不合理的。</p>
<p>所以这里字符集和编码方式就必须分开考虑了，这也是为什么会有 Unicode Transformation Format(UTF) 一说了。</p>
<p>简单来说，Unicode 还是那个 Unicode，但是编码方式会有很多种。</p>
<h3 id="UTF-7"><a href="#UTF-7" class="headerlink" title="UTF-7"></a>UTF-7</h3><p>UTF-7 已经不属于 Unicode 标准了，但是它还属于 RFC 标准。</p>
<p>简单来说，UTF-7 对于 ASCII 不做改变，但是对于非 ASCII 字符采用 base64 编码后在首位加上 + 和 - 用于区分，这样编码出的字符串中所有字符就是标准 ASCII 了。</p>
<p>如果做过 XSS 或者 SQL 注入的应该对 UTF-7 有印象。</p>
<h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8 是最常用的编码，也是 Web 中几乎统治性的编码方式。</p>
<p>UTF-8 是一种变长编码方式，它兼容 ASCII 最小可以用 1byte 表示，同时最多可以用 4byte 表示所有的 Unicode 字符。</p>
<p>UTF-8 编码方式其实很好理解，对于某个字符首先取出它的二进制表示：</p>
<ul>
<li>如果小于等于 7 位（ASCII），那么直接表示为 0xxxxxxx</li>
<li>如果小于等于 11 位但是大于 7 位，那么表示为 110 xxxxx 10 xxxxxx</li>
<li>如果小于等于 16 位但是大于 11 位，那么表示为 1110 xxxx 10 xxxxxx 10 xxxxxx</li>
<li>如果小于等于 21 位但是大于 16 位，那么表示为 11110 xxx 10 xxxxxx 10 xxxxxx 10 xxxxxx</li>
</ul>
<p>刚才提到过，最新的 Unicode 标准只要 18bit 就可以全部表示，所以 UTF-8 目前是可以表示 Unicode 全部字符的。</p>
<p>这里举个例子，中文的“中”字，它的 Unicode 为 \u4e2d，也就是 0b100 111000 101101，长度为 15 位，需要三个字节。</p>
<p>所以编码为 UTF-8 后为 0b1110<strong>0100</strong> 10<strong>111000</strong> 10<strong>101101</strong>，也就是 0xe4 0xb8 0xad 即 \xe4\xb8\xad。</p>
<p>下面我们可以用 Python 验证下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="string">&#x27;\u4e2d&#x27;</span> <span class="comment"># &#x27;中&#x27;</span></span><br><span class="line"><span class="string">&#x27;中&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;\u4e2d&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 编码为 UTF-8</span></span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad&#x27;</span></span><br></pre></td></tr></table></figure>

<p>那么为什么 UTF-8 能得到这么广泛的应用呢？</p>
<ul>
<li>体积小：相对定长编码来说节省了很多空间。</li>
<li>兼容性：完全兼容 ASCII 的编码方式。</li>
<li>易检测：我们可以看到 UTF-8 四个字节的开头各不相同，而且无论怎么编码都不会冲突，只要根据头部第一个字节就可以知道后面一共有多少字节。</li>
<li>计算快：从 UTF-8 到 Unicode 只用移位就可以完成，这对于计算机来说是相当高效的。</li>
</ul>
<h3 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h3><p>好了，到这里我们就要说回 GB 了。</p>
<p>之前提到过接替 GBK 并且真正成为国标的是 GB18030，但是不同的是 GB18030 也采用的变长编码，并且跟 Unicode 完全兼容，也就是说实际上 GB18030 也是一种 UTF。</p>
<p>GB18030 在 2byte 编码的时候跟 GBK 完全一致，但是在 4byte 编码的时候比较复杂，这里偷懒不展开了。<del>（翻译一下：都用 UTF-8 不就完了）</del></p>
<h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF_16"></a>UTF_16</h3><p>在说 UTF-16 之前，不得不提的是 UCS-2。</p>
<p>UCS-2 是一个定长编码，它用 2byte 直接表示 Unicode —— 这当然是不够的，所以 UTF-16 就是为了补充 UCS-2 出现的。</p>
<p>UTF-16 同样是变长编码，但是它以 2byte 为一个单位。</p>
<ul>
<li>对于小于 2byte 就可以表示的 Unicode 它与 UCS-2 相同。</li>
<li>对于大于 2byte 才能表示的 Unicode，它的编码稍微有些复杂。</li>
</ul>
<p>对于某个要编码的字符，假设它的 Unicode 编码为 U。</p>
<p>首先把 U 减去 0x10000 得到 U’，因为 Unicode 目前最长为 18bit，所以这时候 U’ 一定小于 20bit，分别对高 10bit 和低 10bit 做如下处理：</p>
<ul>
<li>对于高 10bit，把它加上 0xD800 得到 UTF-16 编码的高 2byte，同时注意到一个 Unicode 目前最长为 18bit，所以减去 0x10000 后高 10bit 中最多只有低 8bit 不为 0，这样高 2byte 一定以 0b110110 开头。</li>
<li>对于低 10bit，把它加上 0xDC00 得到 UTF-16 编码的低 2byte，由于 0xC 对应的二进制为 0b1100，所以低 2byte 一定以 0b110111 开头。</li>
</ul>
<p>因此一个 4byte 编码的 UTF-16 中 2byte 的最小值为 0xDC800 而最大值为 0xDFFF，为了避免一个 4byte 编码的 UTF-16 被误认为两个 2byte 的 UTF-16，Unicode 规定 0xD800 - 0xDFFF 不对应任何单个的 Unicode 字符，被称为“代理区”。</p>
<p>比如某个字符的 Unicode 为 U = 0x12345 （哎呀，反正打出来也是个’口’），然后我们可以得到 U’ = U - 0x10000 = 0x02345 = 0b1000 1101000101，低 10bit 为 0x345，高 10bit 为 0x8。</p>
<p>所以可以得到高 2byte 为 0xD800 + 0x8 = 0xD808，低 2byte 为 0xDC00 + 0x2345 = 0xff45，拼在一起就是 0xd808df45，下面就用 Python 验证下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;\U00012345&#x27;</span>.encode(<span class="string">&#x27;utf-16be&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line"><span class="string">&#x27;d808df45&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;\U00012345&#x27;</span>.encode(<span class="string">&#x27;utf-16&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line"><span class="string">&#x27;fffe08d845df&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当然这里还有另一个问题就是大小端问题，虽然 RFC 建议在没有 BOM 的时候默认为大端序，但实际上很多应用（包括系统）默认都是小端序。对于 UTF-16 来说，UTF-16BE 代表大端序，UTF-16LE 代表小端序。</p>
<p>很多操作系统比如 Windows 采用 UTF-16 作为内码，但是 UTF-16 实际上由于 corner case 过多，很多库并没有做很好的测试，因此很可能出现安全性问题。（实际上已经有相应的 CVE 了）</p>
<h3 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h3><p>最后出场的是 UTF-32，从它的名字上我觉得就可以明白它是怎么编码了——没错，4 字节定长编码，简单暴力。</p>
<p>不过正如之前所说，这样会浪费大量的空间，因此 UTF-32 的应用非常少。</p>
<p>做个小验证吧，仍然是之前的“中”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;\u4e2d&#x27;</span></span><br><span class="line"><span class="string">&#x27;中&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;\u4e2d&#x27;</span>.encode(<span class="string">&#x27;utf-32be&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line"><span class="string">&#x27;00004e2d&#x27;</span></span><br></pre></td></tr></table></figure>

<p>大小端序的问题也不再赘述。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>编码是真的很复杂，不过当你决定把它研究透的时候，一切都清晰明了了起来。</p>
<p>个人觉得最重要还是要理解字符集和编码方式的关系，也就是 Unicode 跟 UTF 的关系，因为这部分可能是最让人迷惑的。</p>
<p>编码问题作为一个困扰我很久的“恶龙”，如今能“斩掉”还是很爽的。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/ASCII">ASCII</a><br><a target="_blank" rel="noopener" href="https://stackoverflow.com/questions/701882/what-is-ansi-format">what is ansi format</a><br><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Windows_code_page">Windows Code Page</a><br><a target="_blank" rel="noopener" href="https://docs.microsoft.com/zh-cn/windows/desktop/Intl/code-pages">code pages</a><br><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/American_National_Standards_Institute">American National Standards Institute</a><br><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/International_Organization_for_Standardization">International Organization for Standardization</a><br><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Unicode">Unicode</a><br><a target="_blank" rel="noopener" href="https://en.cppreference.com/w/cpp/language/types">Fundamental types</a><br><a target="_blank" rel="noopener" href="https://zh.wikipedia.org/wiki/GB_2312">GB2312</a><br><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/GB_18030">GB18030</a><br><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/UTF-8">UTF8</a><br><a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/UTF-16">UTF16</a></p>
]]></content>
      <categories>
        <category>编码</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>自动初始化 Gitalk 和 Gitment 评论</title>
    <url>/posts/zi-dong-chu-shi-hua-gitalk-he-gitment-ping-lun/</url>
    <content><![CDATA[<p>本篇文章是<a target="_blank" rel="noopener" href="https://convivae.github.io/posts/hexo-bo-ke-cai-keng/#toc-heading-11">自动初始化 Gitalk 和 Gitment 评论</a>的解决办法，如果还没配置 Gitalk，建议先看上一篇文章的<a target="_blank" rel="noopener" href="https://convivae.github.io/posts/hexo-bo-ke-cai-keng/#toc-heading-7">添加 Gitalk 的评论插件</a>，再来看这篇文章。</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>Gitalk配置完成后，启动hexo，打开文章页面，需要登陆 github，一篇一篇文章地点过去，完成初始化后才能使用，操作比较麻烦，下面介绍用 Node.js 来自动初始化 Gitalk 的方法</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="生成-Sitemap-站点地图"><a href="#生成-Sitemap-站点地图" class="headerlink" title="生成 Sitemap 站点地图"></a>生成 Sitemap 站点地图</h3><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p>
<ul>
<li>安装插件</li>
</ul>
<p>在你的 hexo 根目录，执行下面两个命令来安装针对 google 和百度的插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<ul>
<li>在站点根目录下的_config.yml添加如下代码</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>现在再执行 <code>hexo generate</code>  或 <code>hexo g</code> 的时候，在博客根目录下的 <code>public</code> 文件夹下面就会生成<code>sitemap.xml</code> 和 <code>baidusitemap.xml</code>。</p>
<h3 id="获取github接口的调用权限"><a href="#获取github接口的调用权限" class="headerlink" title="获取github接口的调用权限"></a>获取github接口的调用权限</h3><ol>
<li>创建一个access token，<a target="_blank" rel="noopener" href="https://github.com/settings/tokens">点击链接进入</a></li>
<li>点击 <code>Generate new token</code> 按钮</li>
<li>输入一个描述，为 token 添加所有的 repo 权限，然后点击最下方的 <code>Generate token</code> 按钮，就可以生成一个新的 <code>Token</code> 备用</li>
</ol>
<p><img data-src="init_gitalk.png" alt="init_gitalk"></p>
<ol start="4">
<li>生成的 token，在后面使用</li>
</ol>
<p><img data-src="init_gitalk01.png" alt="init_gitalk01"></p>
<h3 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h3><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>在你的 hexo 根目录，执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install request --save</span><br><span class="line">npm install xml-parser --save</span><br><span class="line">npm install yamljs --save</span><br><span class="line">npm install cheerio --save</span><br><span class="line">npm install blueimp-md5 --save</span><br></pre></td></tr></table></figure>

<h4 id="创建脚本文件"><a href="#创建脚本文件" class="headerlink" title="创建脚本文件"></a>创建脚本文件</h4><p>在站点根目录下创建 <code>comment.js</code> 文件，将下面的代码粘贴进文件中，修改下面代码中的 <code>config</code> 配置项，其中 <code>token</code> 就是上一步中获取的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> xmlParser = <span class="built_in">require</span>(<span class="string">&quot;xml-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> YAML = <span class="built_in">require</span>(<span class="string">&quot;yamljs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//与参考文章不同，新引入了 md5</span></span><br><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">&quot;blueimp-md5&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据自己的情况进行配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    username: <span class="string">&quot;GitHub 用户名&quot;</span>, <span class="comment">// GitHub 用户名</span></span><br><span class="line">    token: <span class="string">&quot;GitHub Token&quot;</span>,  <span class="comment">// GitHub Token</span></span><br><span class="line">    repo: <span class="string">&quot;用户名.github.io&quot;</span>,  <span class="comment">// 存放 issues的git仓库</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sitemap.xml的路径，commit.js放置在根目录下，无需修改，其他情况自行处理</span></span><br><span class="line">    <span class="comment">// 与参考文章不同，这里的路径改为了 baidusitemap.xml</span></span><br><span class="line">    sitemapUrl: path.resolve(__dirname, <span class="string">&quot;./public/baidusitemap.xml&quot;</span>),</span><br><span class="line">    </span><br><span class="line">    kind: <span class="string">&quot;Gitalk&quot;</span>,  <span class="comment">// &quot;Gitalk&quot; or &quot;Gitment&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> issuesUrl = <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;config.username&#125;</span>/<span class="subst">$&#123;config.repo&#125;</span>/issues?access_token=<span class="subst">$&#123;config.token&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> requestGetOpt = &#123;</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;issuesUrl&#125;</span>&amp;page=1&amp;per_page=1000`</span>,</span><br><span class="line">    json: <span class="literal">true</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;github-user&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> requestPostOpt = &#123;</span><br><span class="line">    ...requestGetOpt,</span><br><span class="line">    url:issuesUrl,</span><br><span class="line">    method: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    form: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;开始初始化评论...&quot;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;开始检索链接，请稍等...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> websiteConfig = YAML.parse(fs.readFileSync(path.resolve(__dirname, <span class="string">&quot;./_config.yml&quot;</span>), <span class="string">&quot;utf8&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> urls = sitemapXmlReader(config.sitemapUrl);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`共检索到<span class="subst">$&#123;urls.length&#125;</span>个链接`</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;开始获取已经初始化的issues:&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> issues = <span class="keyword">await</span> send(requestGetOpt);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`已经存在<span class="subst">$&#123;issues.length&#125;</span>个issues`</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> notInitIssueLinks = urls.filter(<span class="function">(<span class="params">link</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !issues.find(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                link = removeProtocol(link);</span><br><span class="line">                <span class="keyword">return</span> item.body.includes(link);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (notInitIssueLinks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`本次有<span class="subst">$&#123;notInitIssueLinks.length&#125;</span>个链接需要初始化issue：`</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(notInitIssueLinks);</span><br><span class="line">            <span class="comment">//console.log(&quot;开始提交初始化请求, 大约需要40秒...&quot;);</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;开始提交初始化请求...&quot;</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 部署好网站后，直接执行start，新增文章可能并不会立即生成评论</span></span><br><span class="line"><span class="comment">             * 经参考文章测试，最少需要等待40秒才可以正确生成</span></span><br><span class="line"><span class="comment">             * 但是我本人测试后发现，新增文章是可以立即生成的，</span></span><br><span class="line"><span class="comment">             * 所以我将下面的40s等待时间改成了4ms</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">                <span class="keyword">let</span> initRet = <span class="keyword">await</span> notInitIssueLinks.map(<span class="keyword">async</span> (item) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">let</span> html = <span class="keyword">await</span> send(&#123; ...requestGetOpt, <span class="attr">url</span>: item &#125;);</span><br><span class="line">                    <span class="keyword">let</span> title = cheerio.load(html)(<span class="string">&quot;title&quot;</span>).text();</span><br><span class="line">                    <span class="keyword">let</span> pathLabel = url.parse(item).path;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//与参考文章不同，这里新增一行，将路径名更改为md5值</span></span><br><span class="line">                    pathLabel = md5(pathLabel);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">let</span> body = <span class="string">`<span class="subst">$&#123;item&#125;</span>&lt;br&gt;&lt;br&gt;<span class="subst">$&#123;websiteConfig.description&#125;</span>`</span>;</span><br><span class="line">                    <span class="keyword">let</span> form = <span class="built_in">JSON</span>.stringify(&#123; body, <span class="attr">labels</span>: [config.kind, pathLabel], title &#125;);</span><br><span class="line">                    <span class="keyword">return</span> send(&#123; ...requestPostOpt, form &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`已完成<span class="subst">$&#123;initRet.length&#125;</span>个！`</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;可以愉快的发表评论了！&quot;</span>);</span><br><span class="line">            &#125;,<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;本次发布无新增页面，无需初始化issue!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`初始化issue出错，错误如下：`</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sitemapXmlReader</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = fs.readFileSync(file, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> sitemap = xmlParser(data);</span><br><span class="line">    <span class="keyword">return</span> sitemap.root.children.map(<span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> loc = url.children.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.name === <span class="string">&quot;loc&quot;</span>;</span><br><span class="line">        &#125;)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> loc.content;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeProtocol</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> url.substr(url.indexOf(<span class="string">&quot;:&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        request(options, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                resolve(body);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的脚本在参考文章的基础上稍微做了下修改，与原来的参考文章不同之处已经另起一行单独显示，并在注释中明确标注出来了，下面是这几处不同的地方，需要读者注意一下</p>
<ol>
<li>引入 md5</li>
</ol>
<p>因为我们在<a target="_blank" rel="noopener" href="https://convivae.github.io/posts/hexo-bo-ke-cai-keng/#toc-heading-7">添加 Gittalk 评论插件</a> 时由于考虑到 label 的长度不能超过 50 个字符，对路径做了 md5 的哈希，而初始化评论就是根据你的 label 值来新开一个 issue</p>
<p>所以当你在添加 Gitalk 评论时对路径做了 md5 转换，那么这里也需要做一个相同的转换才能与对应的文章匹配，从而可以成功地创建文章对应的 issue，上面代码中引入的 md5 可以在<a target="_blank" rel="noopener" href="https://github.com/blueimp/JavaScript-MD5">这里</a>找到</p>
<ol>
<li>修改 <code>sitemap.xml</code> 为 <code>baidu-sitemap.xml</code></li>
</ol>
<p>可能是因为我生成的 <code>sitemap.xml</code> 与参考文章作者的并不相同，在 <code>path</code> 为 <code>sitemap.xml</code>，即下面所示的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sitemap.xml的路径，commit.js放置在根目录下，无需修改，其他情况自行处理</span></span><br><span class="line">sitemapUrl: path.resolve(__dirname, <span class="string">&quot;./public/sitemap.xml&quot;</span>),</span><br></pre></td></tr></table></figure>

<p>时执行后会报错，提示找不到根节点，后来在 debug 过程中发现在  <code>sitemap.xml</code>  中并没有文章的路径，而是主页、关于页、tag 页等页面的路径，后来发现在 <code>baidu-sitemap.xml</code> 中生成了全部文章的路径，并且很好的一点是没有其他页面的路径，这就保证了其他页面不会有对应的 issue，遂改为 <code>baidu-sitemap.xml</code> ，执行成功。</p>
<p>参考文章的作者其实也指出了这一点：</p>
<blockquote>
<p>需要注意的是第一步中的sitemap插件会生成的sitemap.xml会包含<strong>全部的界面</strong>，包括标签页、关于页等，执行上面的代码也会对这些页面生成评论框(也就是issue)</p>
</blockquote>
<ol start="3">
<li>等待时间 40 s</li>
</ol>
<p>由于我自己在测试时并没有发现初始化会特别慢，反倒是代码中强制等待 40 s才能结束进程的设计，让我很是心烦，所以把 40000ms 改为了 4ms，看着代码一行一行畅快地执行完成，心里爽多了。</p>
<ol start="4">
<li>执行脚本可能会遇到的错误</li>
</ol>
<p>我自己执行脚本的时候还发现了其他的错误，也浪费了不少时间，这里拿出来说下</p>
<ul>
<li><p>报错信息：</p>
<p><img data-src="gitalk_error.png" alt="gitalk_error"></p>
</li>
<li><p>分析：<br>这是 <code>_config.yml</code> 的部分代码格式出现了问题，报错的具体部分是下图中箭头指向的位置</p>
<p><img data-src="gitalk_error_fix.png" alt="gitalk_error_fix"></p>
</li>
<li><p>解决<br>只要把多余的空格删掉即可，如下图：</p>
<p><img data-src="gitalk_error_fix01.png" alt="gitalk_error_fix01"></p>
</li>
</ul>
<h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><p>完成上述操作后，执行下面的命令，就可以部署站点，并初始化所有的评论了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line">node ./comment.js</span><br></pre></td></tr></table></figure>

<p>也可以通过在站点根目录的package.json文件中，新建npm脚本，一个命令搞定清除缓存、生成静态文件、提交git并生成issue的所有操作。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class="line">  &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class="line">  &quot;server&quot;: &quot;hexo server&quot;,</span><br><span class="line">  &quot;test&quot;: &quot;hexo clean &amp;&amp; hexo s&quot;,</span><br><span class="line">  &quot;t&quot;: &quot;hexo clean &amp;&amp; hexo s&quot;,</span><br><span class="line">  &quot;deploy&quot;: &quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy &amp;&amp; node ./comment.js&quot;,</span><br><span class="line">  &quot;d&quot;: &quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy &amp;&amp; node ./comment.js&quot;,</span><br><span class="line">  &quot;comment&quot;: &quot;node ./comment.js&quot;,</span><br><span class="line">  &quot;c&quot;: &quot;node ./comment.js&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>完成文章编写，或者其他的更新操作后，直接执行 deploy 即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run d</span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a target="_blank" rel="noopener" href="https://blog.csdn.net/daihaoxin/article/details/84958369">nodejs版本的Gitalk/Gitment评论自动初始化</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>逆波兰表达式</title>
    <url>/posts/ni-bo-lan-biao-da-shi/</url>
    <content><![CDATA[<p>虽然数据结构比较简单，但是有些题遇到之后直接盲敲也并无十足的把握，往往还需要找些资料理清一下思路才敢去写；</p>
<p>有些内容本身就比较复杂，涉及到的知识点也比较多，只看的话不容易记住，只有自己练习一遍印象才会深刻。</p>
<p>所以本专题主要记录这些内容，毕竟好记性不如烂笔头。</p>
<h2 id="从一个简单题目谈起"><a href="#从一个简单题目谈起" class="headerlink" title="从一个简单题目谈起"></a>从一个简单题目谈起</h2><p>【问题描述】</p>
<blockquote>
<p>从标准输入中读入一个整数算术运算表达式，如 <code>24 / ( 1 + 5%3 + 36 / 6 / 2 - 2) * ( 12 / 2 / 2 )=</code>，计算表达式结果，并输出。</p>
</blockquote>
<p>【要求】</p>
<blockquote>
<ol>
<li><p>表达式运算符只有 <code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>，表达式末尾的 <code>=</code> 字符表示表达式输入结束，表达式中可能会出现空格</p>
</li>
<li><p>表达式中会出现圆括号，括号可能嵌套，不会出现错误的表达式</p>
</li>
<li><p>出现除号 <code>/</code> 时，以整数相除进行运算，结果仍为整数，例如：<code>5/3</code> 结果应为 <code>1</code></p>
</li>
<li><p>要求采用逆波兰表达式来实现表达式计算</p>
</li>
</ol>
</blockquote>
<p>【输入形式】</p>
<blockquote>
<p>从键盘输入一个以 <code>=</code> 结尾的整数算术运算表达式。操作符和操作数之间可以有空格分隔。</p>
</blockquote>
<p>【输出形式】</p>
<blockquote>
<p>在屏幕上输出计算结果（为整数，即在计算过程中除法为整除）。</p>
</blockquote>
<p>【样例输入】</p>
<blockquote>
<p>24 / ( 1 + 5%3 + 36 / 6 / 2 - 2) * ( 12 / 2 / 2 )     =</p>
</blockquote>
<p>【样例输出】</p>
<blockquote>
<p>18</p>
</blockquote>
<p>【样例说明】</p>
<blockquote>
<p>按照运算符及括号优先级依次计算表达式的值。</p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>表达式的三种形式：前缀型、中缀型与后缀型。其中为大家熟知的是中缀形式，如 <code>2 + 3 * (5 - 4)</code>。</p>
<p>前缀型表达式又叫波兰式(Polish Notation)，后缀性表达式又叫逆波兰式(Reverse Polish Notation)。他们最早于1920年波兰数学家Jan Lukasiewicz发明，这两种表示方式的最大特点是不需要括号来表明优先级，他们经常用于计算机科学，特别是编译器设计方面。</p>
<p>所以我们的基本思路是先把中缀表达式转化为后缀表达式，再对后缀表达式进行求值</p>
<h2 id="中缀-–-gt-后缀"><a href="#中缀-–-gt-后缀" class="headerlink" title="中缀 –&gt; 后缀"></a>中缀 –&gt; 后缀</h2><h3 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>中缀表达式 <code>a + b*c + (d * e + f) * g</code>，其转换成后缀表达式则为<code>a b c * + d e * f  + g * +</code></p>
<p>转换过程需要用到栈，具体过程如下：</p>
<ol>
<li><p>如果遇到操作数，我们就直接将其输出</p>
</li>
<li><p>如果遇到运算符，我们将其放入到栈中，遇到左括号时我们也将其放入栈中</p>
</li>
<li><p>如果遇到一个右括号，则将栈元素弹出并输出直到遇到左括号为止。注意，左括号只弹出并不输出</p>
</li>
<li><p>如果遇到任何其他的操作符，如 <code>&#39;+&#39;</code>,<code>&#39;*&#39;</code>,<code>&#39;(&#39;</code> 等，将栈中比该运算符优先级高的依次弹出并输出，直到遇到更低优先级的元素（或者栈为空）为止。弹出完这些元素后，才将遇到的操作符压入到栈中。有一点需要注意，只有在遇到右括号 <code>&#39;)&#39;</code> 的情况下我们才弹出左括号 <code>&#39;(&#39;</code> ，其他情况我们都不会弹出左括号 <code>&#39;(&#39;</code></p>
</li>
<li><p>如果我们读到了输入的末尾栈不为空，则将栈中所有元素依次弹出</p>
</li>
</ol>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>规则很多，还是用实例比较容易说清楚整个过程。以上面的转换为例，输入为 <code>a + b * c + (d * e + f)*g</code>，处理过程如下：</p>
<ol>
<li><p>首先读到 a，直接输出</p>
</li>
<li><p>读到 <code>&#39;+&#39;</code>，将其放入到栈中</p>
</li>
<li><p>读到 b，直接输出</p>
</li>
</ol>
<p>此时栈和输出的情况如下：</p>
<p><img data-src="1.png" alt="stack01"></p>
<ol start="4">
<li><p>读到 <code>&#39;*&#39;</code>，因为栈顶元素 <code>&#39;+&#39;</code> 优先级比 <code>&#39;*&#39;</code> 低，所以将 <code>&#39;*&#39;</code> 直接压入栈中</p>
</li>
<li><p>读到 c，直接输出</p>
</li>
</ol>
<p>此时栈和输出情况如下：</p>
<p><img data-src="2.png" alt="stack02"></p>
<ol start="6">
<li>读到 <code>&#39;+&#39;</code>，因为栈顶元素 <code>&#39;*&#39;</code> 的优先级比它高，所以弹出 <code>&#39;*&#39;</code> 并输出， 同理，栈中下一个元素 <code>&#39;+&#39;</code> 优先级与读到的操作符 <code>&#39;+&#39;</code> 一样，所以也要弹出并输出。然后再将读到的 <code>&#39;+&#39;</code> 压入栈中。</li>
</ol>
<p>此时栈和输出情况如下：</p>
<p><img data-src="3.png" alt="stack03"></p>
<ol start="7">
<li><p>下一个读到的为 <code>&#39;(&#39;</code>，它优先级最高，所以直接放入到栈中。</p>
</li>
<li><p>读到 d，将其直接输出。</p>
</li>
</ol>
<p>此时栈和输出情况如下：</p>
<p><img data-src="4.png" alt="stack04"></p>
<ol start="9">
<li><p>读到 <code>&#39;*&#39;</code>，由于只有遇到 <code>&#39;)&#39;</code> 的时候左括号 <code>&#39;(&#39;</code> 才会弹出，所以 <code>&#39;*&#39;</code> 直接压入栈中。</p>
</li>
<li><p>读到 e，直接输出。</p>
</li>
</ol>
<p>此时栈和输出情况如下：</p>
<p><img data-src="5.png" alt="stack05"></p>
<ol start="11">
<li><p>读到 <code>&#39;+&#39;</code>，弹出 <code>&#39;*&#39;</code> 并输出，然后将 <code>&#39;+&#39;</code> 压入栈中。</p>
</li>
<li><p>读到 f，直接输出。</p>
</li>
</ol>
<p>此时栈和输出情况：</p>
<p><img data-src="6.png" alt="stack06"></p>
<ol start="13">
<li>接下来读到 <code>&#39;)&#39;</code>，则直接将栈中元素弹出并输出直到遇到 <code>&#39;(&#39;</code> 为止。这里右括号前只有一个操作符 <code>&#39;+&#39;</code> 被弹出并输出。</li>
</ol>
<p><img data-src="7.png" alt="stack07"></p>
<ol start="14">
<li>读到 <code>&#39;*&#39;</code>，压入栈中。读到 g，直接输出。</li>
</ol>
<p><img data-src="8.png" alt="stack08"></p>
<ol start="15">
<li>此时输入数据已经读到末尾，栈中还有两个操作符 <code>&#39;*&#39;</code> 和 <code>&#39;+&#39;</code>，直接弹出并输出。</li>
</ol>
<p><img data-src="9.png" alt="stack09"></p>
<p>至此整个转换过程完成。</p>
<h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h4><p>代码仅供参考，如有错误，还请指出</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLEN 10007</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//优先级</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span> || c == <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isop</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// &#x27;)&#x27; 单独判断，不在此判断</span></span><br><span class="line">    <span class="keyword">return</span> c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span> || c == <span class="string">&#x27;%&#x27;</span> || c == <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> stack_op[MAXLEN];  <span class="comment">//记录运算符的栈</span></span><br><span class="line"><span class="keyword">int</span> top_op = <span class="number">-1</span>;        <span class="comment">//记录运算符栈的栈顶</span></span><br><span class="line"><span class="keyword">char</span> output[MAXLEN];    <span class="comment">//记录最终结果的数组</span></span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;            <span class="comment">//记录最终结果的下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c = fgetc(<span class="built_in">stdin</span>)) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">            output[pos++] = c;</span><br><span class="line">            <span class="keyword">while</span> ((c = fgetc(<span class="built_in">stdin</span>)) != EOF &amp;&amp; <span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">                output[pos++] = c;</span><br><span class="line">            &#125;</span><br><span class="line">            output[pos++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isop(c)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (top_op == <span class="number">-1</span> || priority(stack_op[top_op]) &lt; priority(c)) &#123;</span><br><span class="line">                stack_op[++top_op] = c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (top_op &gt; <span class="number">-1</span> &amp;&amp; priority(stack_op[top_op]) &gt;= priority(c) &amp;&amp; stack_op[top_op] != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    output[pos++] = stack_op[top_op--];</span><br><span class="line">                    output[pos++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//该运算符入栈</span></span><br><span class="line">                stack_op[++top_op] = c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack_op[top_op] != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// &#x27;(&#x27; 之前的全部出栈</span></span><br><span class="line">                output[pos++] = stack_op[top_op--];</span><br><span class="line">                output[pos++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &#x27;(&#x27; 也要出栈</span></span><br><span class="line">            top_op--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果运算符的栈中还有元素，全部出栈</span></span><br><span class="line">    <span class="keyword">while</span> (top_op &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        output[pos++] = stack_op[top_op--];</span><br><span class="line">        output[pos++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    output[--pos] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用表达式树"><a href="#使用表达式树" class="headerlink" title="使用表达式树"></a>使用表达式树</h3><p>本质上是二叉树，不过这棵树的树叶全为操作数(operand)，其他的节点均为运算符。对该树进行先序遍历、中序遍历和后序遍历正好对应前缀表达式、中缀表达和后缀表达式。</p>
<p>对于表达式树的求值操作非常简单，甚至只需要两条语句。因为这里大部分操作都是递归定义，而递归函数本身都是很简洁的。</p>
<h3 id="另一种转换方法"><a href="#另一种转换方法" class="headerlink" title="另一种转换方法"></a>另一种转换方法</h3><p>仅提供一种思路，具体操作起来可能比较麻烦，有兴趣可自行尝试</p>
<ol>
<li><p>先按照运算符的优先级对中缀表达式加括号，变成 <code>( ( a+(b*c) ) + ( ((d*e)+f) *g ) )</code></p>
</li>
<li><p>将运算符移到括号的后面，变成 <code>((a(bc)*)+(((de)*f)+g)*)+</code></p>
</li>
<li><p>去掉括号，得到 <code>abc*+de*f+g*+</code></p>
</li>
</ol>
<h2 id="对后缀表达式求值"><a href="#对后缀表达式求值" class="headerlink" title="对后缀表达式求值"></a>对后缀表达式求值</h2><p>常规的逆波兰表达式求值，比较简单，读取到数字直接入栈，读取到运算符就取出栈顶两个数字做运算，然后将运算结果入栈，最后栈中剩余的数即为计算结果。下面直接给出参考代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> stack_num[MAXLEN];  <span class="comment">//记录数字的栈</span></span><br><span class="line"><span class="keyword">int</span> top_num = <span class="number">-1</span>;       <span class="comment">//记录数字栈的栈顶</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> op, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (op)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:<span class="keyword">return</span> a + b;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:<span class="keyword">return</span> a - b;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:<span class="keyword">return</span> a * b;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:<span class="keyword">return</span> a / b;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:<span class="keyword">return</span> a % b;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">result</span><span class="params">(<span class="keyword">char</span> output[])</span>   <span class="comment">//output[] 中是后缀表达式</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, a, b, c, tmp_num;</span><br><span class="line">    <span class="keyword">char</span> tmp_op;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; output[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        c = output[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">            tmp_num = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((c = output[++i]) &amp;&amp; <span class="built_in">isdigit</span>(c))</span><br><span class="line">                tmp_num = tmp_num * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            stack_num[++top_num] = tmp_num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isop(c)) &#123;</span><br><span class="line">            <span class="comment">//出栈两个数字，计算后将结果入栈</span></span><br><span class="line">            a = stack_num[top_num--];</span><br><span class="line">            b = stack_num[top_num--];</span><br><span class="line">            <span class="comment">//注意 a,b 的顺序，不要反了</span></span><br><span class="line">            stack_num[++top_num] = cal(b, c, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack_num[top_num];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>由于题目中只要求给出最终结果，并不要求输出后缀表达式，所以我们将计算后缀表达式和计算最终结果的过程合并到一起来写，下面是参考代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLEN 10007</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span> || c == <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isop</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span> || c == <span class="string">&#x27;%&#x27;</span> || c == <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> op, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (op)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:<span class="keyword">return</span> a + b;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:<span class="keyword">return</span> a - b;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:<span class="keyword">return</span> a * b;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:<span class="keyword">return</span> a / b;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:<span class="keyword">return</span> a % b;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> stack_num[MAXLEN];  <span class="comment">//记录数字的栈</span></span><br><span class="line"><span class="keyword">char</span> stack_op[MAXLEN];  <span class="comment">//记录运算符的栈</span></span><br><span class="line"><span class="keyword">int</span> top_num = <span class="number">-1</span>;       <span class="comment">//记录数字栈的栈顶</span></span><br><span class="line"><span class="keyword">int</span> top_op = <span class="number">-1</span>;        <span class="comment">//记录运算符栈的栈顶</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c, a, b, tmp_num;</span><br><span class="line">    <span class="keyword">char</span> tmp_op;</span><br><span class="line">    <span class="keyword">while</span> ((c = fgetc(<span class="built_in">stdin</span>)) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">            tmp_num = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((c = fgetc(<span class="built_in">stdin</span>)) != EOF &amp;&amp; <span class="built_in">isdigit</span>(c))</span><br><span class="line">                tmp_num = tmp_num * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            stack_num[++top_num] = tmp_num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isop(c)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (top_op == <span class="number">-1</span> || priority(stack_op[top_op]) &lt; priority(c)) &#123;</span><br><span class="line">                stack_op[++top_op] = c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (top_op &gt; <span class="number">-1</span> &amp;&amp; priority(stack_op[top_op]) &gt;= priority(c) &amp;&amp; stack_op[top_op] != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    tmp_op = stack_op[top_op--];</span><br><span class="line">                    a = stack_num[top_num--];</span><br><span class="line">                    b = stack_num[top_num--];</span><br><span class="line">                    <span class="comment">//注意 a,b 的顺序，不要反了</span></span><br><span class="line">                    stack_num[++top_num] = cal(b, tmp_op, a);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//该运算符入栈</span></span><br><span class="line">                stack_op[++top_op] = c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack_op[top_op] != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                tmp_op = stack_op[top_op--];</span><br><span class="line">                a = stack_num[top_num--];</span><br><span class="line">                b = stack_num[top_num--];</span><br><span class="line">                stack_num[++top_num] = cal(b, tmp_op, a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &#x27;(&#x27; 也要出栈</span></span><br><span class="line">            top_op--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果运算符的栈中还有元素，全部出栈</span></span><br><span class="line">    <span class="keyword">while</span> (top_op &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        tmp_op = stack_op[top_op--];</span><br><span class="line">        a = stack_num[top_num--];</span><br><span class="line">        b = stack_num[top_num--];</span><br><span class="line">        stack_num[++top_num] = cal(b, tmp_op, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, stack_num[top_num]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>将此算法稍作修改，即可拓展到计算浮点数运算式的加减乘除、乘方、取对数、开根号、求阶乘等等复杂的数学运算（大家可以想想如何修改），但是基本的思想是不变的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a target="_blank" rel="noopener" href="https://blog.csdn.net/sgbfblog/article/details/8001651">中缀表达式转换为后缀表达式</a><br><a target="_blank" rel="noopener" href="https://blog.csdn.net/buaa_shang/article/details/9124075">表达式树</a><br><a target="_blank" rel="noopener" href="https://www.cnblogs.com/z-sm/p/6807308.html">根据表达式序列（前缀、中缀、后缀）构建表达式树</a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
        <tag>表达式求值</tag>
        <tag>逆波兰表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>991数据结构考研复习（七）——文件及查找</title>
    <url>/posts/991-shu-ju-jie-gou-kao-yan-fu-xi-qi-wen-jian-ji-cha-zhao/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="f65afc8a1e6627d4fbb9baef3e62c5c9a35b957a2a58fc7dc2a1a2362b29bbb5"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>考研</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>991数据结构考研复习（八）——内排序</title>
    <url>/posts/991-shu-ju-jie-gou-kao-yan-fu-xi-ba-nei-pai-xu/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="d63fa333d2d30ad11f8b5741fd4234e74dbbcedc4978b1cd82200a17096dfac4"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>考研</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>BUAA-北航-自动评教代码</title>
    <url>/posts/buaa-bei-hang-zi-dong-ping-jiao-dai-ma/</url>
    <content><![CDATA[<ul>
<li><p>修复了<a target="_blank" rel="noopener" href="https://mp.weixin.qq.com/s/IBSLGi9LfI75wQ3O7vHI4w">参考代码</a>中卡在<code>是否推荐</code>这一步无法继续运行的 Bug</p>
</li>
<li><p>适用于北航教务系统，校内网和VPN均可使用</p>
</li>
<li><p>截止本文发出前该代码仍可正常使用</p>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascript: <span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    doc = <span class="built_in">window</span>.top.document.getElementById(<span class="string">&quot;iframename&quot;</span>).contentWindow;</span><br><span class="line">    doc.alert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    doc.confirm = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (arr[<span class="number">0</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">2</span>] === arr[<span class="number">3</span>] &amp;&amp; arr[<span class="number">4</span>] === arr[<span class="number">5</span>] &amp;&amp; arr[<span class="number">1</span>] === arr[<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            arr[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a = doc.$(<span class="string">&quot;input[name^=tabmapzb]&quot;</span>);</span><br><span class="line">    b = doc.$(<span class="string">&quot;span.yellow&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (a.length !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            a[arr[i] + i * <span class="number">5</span>].click();</span><br><span class="line">        &#125;</span><br><span class="line">        doc.$(<span class="string">&quot;#sftj&quot;</span>).get(<span class="number">0</span>).selectedIndex = <span class="number">1</span>;</span><br><span class="line">        doc.tj();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b[<span class="number">1</span>].firstElementChild.click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">doc = <span class="built_in">window</span>.top.document.getElementById(<span class="string">&quot;iframename&quot;</span>).contentWindow;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;doc.$.onload = judge()&quot;</span>, <span class="number">1400</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol>
<li><p>使用 <strong>Chrome</strong> 浏览器打开评教页面</p>
<blockquote>
<p>打开教务管理系统 –&gt; 教学评价 –&gt; 学生评教 –&gt; 开始评教</p>
</blockquote>
</li>
<li><p>将此时浏览器地址栏的内容清空，并将上述代码复制到地址栏，并在代码的最开始加上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascript:</span><br></pre></td></tr></table></figure>

<p>回车即可。</p>
<p>注意：代码最开始虽然有<code>javascript:</code>，但是复制过去后就没了，所以需要我们手动加上</p>
</li>
</ol>
<h2 id="代码说明与自定义"><a href="#代码说明与自定义" class="headerlink" title="代码说明与自定义"></a>代码说明与自定义</h2><ol>
<li><p>评教的效果是从前三项 <code>优秀</code>、<code>良好</code>、<code>中等</code>三者中随机生成的，而且保证不会出现全选一个等级的情况（全选一个等级是提交不上的）</p>
<p>如果需要修改，可把代码第12行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>中的<code>3</code> 改成 <code>n(1 &lt; n &lt;= 5)</code>，意思是从前 <code>n</code>项中随机生成</p>
</li>
<li><p>是否推荐选的是 <code>是</code></p>
<p>需要修改的话在第21行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">doc.$(<span class="string">&quot;#sftj&quot;</span>).get(<span class="number">0</span>).selectedIndex = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><code>0</code> 改为 <code>1</code> 表示选择不推荐</p>
</li>
<li><p>用完记得关闭评教页面</p>
</li>
<li><p>别的浏览器大概支持吧（选的课太少了，没机会试了_(:з)∠)_）</p>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a target="_blank" rel="noopener" href="https://mp.weixin.qq.com/s/IBSLGi9LfI75wQ3O7vHI4w">分享一份自动评教代码</a></p>
]]></content>
      <categories>
        <category>评教</category>
      </categories>
      <tags>
        <tag>评教</tag>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记01</title>
    <url>/posts/mybatis-xue-xi-bi-ji-01/</url>
    <content><![CDATA[<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ul>
<li><p>表现层：用于展示数据</p>
</li>
<li><p>业务层：处理业务需求</p>
</li>
<li><p>持久层：和数据库交互</p>
</li>
</ul>
<p><img data-src="01.png" alt="三层架构"></p>
<h2 id="JDBC问题分析"><a href="#JDBC问题分析" class="headerlink" title="JDBC问题分析"></a>JDBC问题分析</h2><ol>
<li>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</li>
<li>Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java 代码。 </li>
<li>使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能 多也可能少，修改 sql 还要修改代码，系统不易维护。</li>
<li>对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，系统不易维护，如果能将数据库记 录封装成 pojo 对象解析比较方便</li>
</ol>
<h2 id="MyBatis-框架概述"><a href="#MyBatis-框架概述" class="headerlink" title="MyBatis 框架概述"></a>MyBatis 框架概述</h2><ul>
<li><p>mybatis是一个持久层框架，用 Java 写的</p>
</li>
<li><p>它封装了 jdbc 操作的很多细节，使开发者只需要关注 sql 语句本身， 而不需要关注加载驱动、创建连接、创建 statement 等繁杂的过程。 </p>
</li>
<li><p>通过xml 或注解的方式将要执行的各种statement配置起来</p>
</li>
<li><p>采用 ORM 思想实现了对结果集的封装</p>
<blockquote>
<p>ORM：Object Relational Mapping 对象关系映射，简单地说，就是把数据库表和实体类及实体类的属性对应起来，让我们可以操作实体类就实现操作数据库表</p>
</blockquote>
</li>
</ul>
<h2 id="Mybatis-入门"><a href="#Mybatis-入门" class="headerlink" title="Mybatis 入门"></a>Mybatis 入门</h2><h3 id="mybatis-的环境搭建"><a href="#mybatis-的环境搭建" class="headerlink" title="mybatis 的环境搭建"></a>mybatis 的环境搭建</h3><ol>
<li>创建maven工程并导入坐标</li>
<li>创建实体类<code>User.java</code>和 dao 的接口<code>IUserDao.java</code></li>
</ol>
<p><code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>IUserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建 mybatis 主配置文件<code>SqlMapConfig.xml</code>（文件名任意）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置myslq的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源（连接池）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置连接数据库的基本信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/learn?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4869&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定映射配置文件的位置，映射配置文件指的是每个DAO独立的配置文件</span></span><br><span class="line"><span class="comment">        如果是用注解来配置的话，此处应该使用class属性指定被注解的dao全限定类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--xml配置，路径是resource下的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/conv/dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--使用注解的配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class=&quot;com.conv.dao.IUserDao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建映射配置文件<code>IUserDao.xml</code>（文件名任意）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是dao的方法名称，不能随便写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>配置 <code>log4j.properties</code></li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span></span><br><span class="line"><span class="meta">log4j.rootCategory</span>=<span class="string">debug, CONSOLE, LOGFILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.axis.enterprise</span>=<span class="string">FATAL, CONSOLE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.File</span>=<span class="string">d:\axis.log</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br></pre></td></tr></table></figure>

<h3 id="环境搭建的注意事项"><a href="#环境搭建的注意事项" class="headerlink" title="环境搭建的注意事项"></a>环境搭建的注意事项</h3><ol>
<li>在 Mybatis 中把持久层的操作接口名称和映射文件也叫做：Mapper，所以命名中：IUserDao 和 IUserMapper 是一样的</li>
<li>在 idea 中创建目录的时候，它和包是不一样的：<ul>
<li>包（package）在创建时：<code>com.conv.dao</code>它是三级结构</li>
<li>目录（directory）在创建时：<code>com.conv.dao</code>是一级目录</li>
</ul>
</li>
<li>mybatis 的映射配置文件位置必须和 dao 接口的包结构相同</li>
<li>映射配置文件的 mapper 标签 namespace 属性的取值必须是 dao 接口的全限定类名</li>
<li>映射配置文件的操作配置（select等），id 属性的取值必须是 dao 接口的方法名</li>
</ol>
<blockquote>
<p>第3、4、5点保证了在开发中无需实现 dao 的实现类</p>
</blockquote>
<h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><ol>
<li>读取配置文件</li>
<li>创建 SqlSessionFactory 工厂</li>
<li>创建 SqlSession</li>
<li>创建 Dao 接口的代理对象</li>
<li>执行 dao 中的方法</li>
<li>释放资源</li>
</ol>
<blockquote>
<p>注意事项：</p>
<p>不要忘记在映射配置<code>IUserDao.xml</code>中告知 mybatis 要封装到哪个实体类中</p>
<p>配置的方式：指定实体类的全限定类名（<code>resultType=&quot;com.conv.domain.User&quot;</code>）</p>
</blockquote>
<p>代码示例：<code>MybatisTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3. 使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao.class);</span><br><span class="line">        <span class="comment">//5. 使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="基于注解的入门案例"><a href="#基于注解的入门案例" class="headerlink" title="基于注解的入门案例"></a>基于注解的入门案例</h3><ol>
<li>把 <code>IUserDao.xml</code>移除，在 dao 接口的方法上使用 <code>@Select</code> 注解，并且指定 SQL 语句</li>
</ol>
<p><code>IUserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 <code>SqlMapConfig.xml</code> 中的 mapper 配置时，使用 <code>class</code> 属性指定 dao 接口的全限定类名</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定映射配置文件的位置，映射配置文件指的是每个DAO独立的配置文件</span></span><br><span class="line"><span class="comment">    如果是用注解来配置的话，此处应该使用class属性指定被注解的dao全限定类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--xml配置，路径是resource下的路径--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource=&quot;com/conv/dao/IUserDao.xml&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用注解的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>明确：</li>
</ul>
<blockquote>
<p>Mybatis 是支持写 dao 实现类的</p>
<p>我们在实际开发中，都是越简练越好，所以不管使用 XML 还是注解配置，都是采用不写 dao 实现类的方式</p>
</blockquote>
<h3 id="DAO-实现类"><a href="#DAO-实现类" class="headerlink" title="* DAO 实现类"></a>* DAO 实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.conv.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 使用工厂创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//2. 使用session执行查询所有方法</span></span><br><span class="line">        <span class="comment">// namespace + id 配合 IUserDao.xml</span></span><br><span class="line">        List&lt;User&gt; users = session.selectList(<span class="string">&quot;com.conv.dao.IuserDao.findAll&quot;</span>);</span><br><span class="line">        session.close();</span><br><span class="line">        <span class="comment">//3. 返回查询结果</span></span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="自定义-Mybatis-的分析"><a href="#自定义-Mybatis-的分析" class="headerlink" title="自定义 Mybatis 的分析"></a>自定义 Mybatis 的分析</h2><p>mybatis 在使用代理 dao 的方式实现增删改查时做了：</p>
<ul>
<li>创建代理对象</li>
<li>在代理对象中调用 <code>selectList</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件</span></span><br><span class="line">        <span class="comment">//路径：(1) 使用类加载器，它只能读取类路径的配置文件</span></span><br><span class="line">        <span class="comment">//(2) 使用ServletContext对象的getRealPath()</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建SqlSessionFactory工厂</span></span><br><span class="line">        <span class="comment">//创建工厂使用了构建者模式(SqlSessionFactoryBuilder即构建者)</span></span><br><span class="line">        <span class="comment">//优势：把对象的构建细节隐藏，是使用者直接调用方法即可拿到对象</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3. 使用工厂生产SqlSession对象</span></span><br><span class="line">        <span class="comment">//生产SqlSession使用了工厂模式</span></span><br><span class="line">        <span class="comment">//优势：解耦，降低类之间的依赖关系</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        <span class="comment">//创建Dao接口实现类使用了代理模式</span></span><br><span class="line">        <span class="comment">//优势：不修改源码的基础上对已有方法增强</span></span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao.class);</span><br><span class="line">        <span class="comment">//5. 使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="selectList方法的流程："><a href="#selectList方法的流程：" class="headerlink" title="selectList方法的流程："></a><code>selectList</code>方法的流程：</h3><blockquote>
<p>需要的信息：</p>
<ul>
<li>连接信息</li>
<li>映射信息（包含执行的 sql 语句、封装结果的实体类全限定类名）</li>
</ul>
</blockquote>
<ol>
<li><p>读取配置文件：用到的技术就是解析XML的技术。</p>
<blockquote>
<p>此处用的是 dom4j 解析 xml 技术</p>
</blockquote>
</li>
<li><p>根据配置文件的信息创建 Connection 对象</p>
<blockquote>
<p>注册驱动，获取连接</p>
</blockquote>
</li>
<li><p>获取预处理对象 PreparedStatement</p>
<blockquote>
<p>此时需要 sql 语句（从 XML 解析得到）</p>
</blockquote>
</li>
<li><p>执行查询</p>
<p><code>ResultSet result = preparedStatement.executeQuery();</code></p>
</li>
<li><p>遍历结果集用于封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;E&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    <span class="comment">//通过全限定类名使用反射得到对象</span></span><br><span class="line">    <span class="comment">//通过 resultType 得到配置的全限定类名</span></span><br><span class="line">    E element = (E)Class.forName(配置的全限定类名).newInstance();</span><br><span class="line">    <span class="comment">//使用反射进行封装，把每个rs的内容都添加到element中</span></span><br><span class="line">    <span class="comment">//实体类属性和表中的列名是一致的，于是我们就可以把表的列名看成是实体类的属性名称</span></span><br><span class="line">    <span class="comment">//就可以使用反射的方式来根据名称获取每个属性，并把值赋进去</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把element加入到list中</span></span><br><span class="line">    list.add(element);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
</li>
<li><p>返回 list</p>
<p><code>return list;</code></p>
</li>
</ol>
<p><img data-src="02.png" alt="查询所有的分析"></p>
<h3 id="使用SqlSession创建Dao接口的代理对象"><a href="#使用SqlSession创建Dao接口的代理对象" class="headerlink" title="使用SqlSession创建Dao接口的代理对象"></a>使用SqlSession创建Dao接口的代理对象</h3><p><code>IUserDao userDao = session.getMapper(IUserDao.class);</code></p>
<p>根据 Dao 的字节码创建 dao 的代理对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; daoInterfaceClass)</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 类加载器：它使用的和被代理对象是相同的类加载器</span></span><br><span class="line"><span class="comment">    * 代理对象要实现的接口：和被代理对象实现相同的接口</span></span><br><span class="line"><span class="comment">    * 如何代理：它就是增强的方法，我们需要自己来提供</span></span><br><span class="line"><span class="comment">    *		 此处是一个InvocationHandler的接口，我们要写一个该接口的实现类</span></span><br><span class="line"><span class="comment">    *		 在实现类中调用 selectList 方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Proxy.newProxyInstance(类加载器, 代理对象要实现的接口字节码数组, 如何代理);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="03.png" alt="自定义Mybatis分析"></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记02</title>
    <url>/posts/spring-xue-xi-bi-ji-02/</url>
    <content><![CDATA[<h2 id="Spring-中-IOC-的常用注解"><a href="#Spring-中-IOC-的常用注解" class="headerlink" title="Spring 中 IOC 的常用注解"></a>Spring 中 IOC 的常用注解</h2><p>上一节介绍的 xml 配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> | <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="用于创建对象的"><a href="#用于创建对象的" class="headerlink" title="用于创建对象的"></a>用于创建对象的</h3><blockquote>
<p>与在 xml 配置文件中的 <bean> 标签实现的功能一致</p>
</blockquote>
<p><code>@Component:</code></p>
<blockquote>
<p>作用：用于把当前类对象存入 Spring 容器中</p>
<p>属性：<code>value</code>：用于指定 bean 的 id。如果不写，默认为当前类名，且首字母小写</p>
</blockquote>
<p>还有三个和 <code>@Component</code> 作用一摸一样的注解：</p>
<ul>
<li><p><code>@Controller</code>：一般用在表现层</p>
</li>
<li><p><code>@Service</code>：一般用在业务层</p>
</li>
<li><p><code>@Repository</code>：一般用在持久层</p>
</li>
</ul>
<p>是 spring 框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰（这四个注解可以互换使用，但不推荐）</p>
<p><code>com\conv\service\impl\AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.conv.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> * 当只有一个属性 value 时，value 可以省略不写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;accountService&quot;)</span></span><br><span class="line"><span class="comment">//@Component(value = &quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 告知spring在创建容器时要扫描的包，</span></span><br><span class="line"><span class="comment">    配置需要的标签不是在beans的约束中，而是一个名称为context名称空间和约束中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.conv&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="用于注入数据的"><a href="#用于注入数据的" class="headerlink" title="用于注入数据的"></a>用于注入数据的</h3><blockquote>
<p>与在 xml 配置文件中在 <bean> 标签中写一个 <property> 标签的作用一致</p>
</blockquote>
<p><code>@Autowired</code>:</p>
<blockquote>
<p>作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功。如果ioc容器中没有任何bean类型和要注入的变量类型匹配，则报错。如果有多个匹配时，先按照类型圈定数据类型，再按照名称去匹配，若都不匹配，则报错。</p>
<p>出现位置：可以是变量上，也可以是方法上。</p>
<p>细节：在使用注解注入时，set 方法就不是必须的了。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao;</span><br></pre></td></tr></table></figure>

<p><code>@Qualifier</code>:</p>
<blockquote>
<p>作用：在按照类中注入的基础上再按照名称注入，它给类成员注入时不能单独使用（需要和Autowired同时使用）。但是给方法参数注入时可以</p>
<p>属性：</p>
<p>​    value：用于指定注入bean的id</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="comment">//@Service(value = &quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;accountDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Resource</code>:</p>
<blockquote>
<p>作用：直接按照bean的id注入。它可以独立使用。</p>
<p>属性：</p>
<p>​    name：用于指定注入bean的id</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="comment">//@Service(value = &quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    @Qualifier(&quot;accountDao&quot;)</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，这里的 <code>pom.xml</code>要增加一项：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>以上三个注解都只能注入其他 bean 类型的数据，而基本类型和 String 类型无法使用上述注解实现</li>
<li>另外：集合类型的注入只能通过 XML 来实现</li>
</ul>
<p><code>@Value</code>:</p>
<blockquote>
<p>作用：用于注入基本类型和 String 类型的数据</p>
<p>属性：</p>
<p>​    value：用于指定数据的值。它可以使用 spring 中 SpEL（也就是 spring 的el表达式）</p>
<p>​    SpEL 的写法：<code>$&#123;表达式&#125;</code></p>
</blockquote>
<h3 id="用于改变作用范围的"><a href="#用于改变作用范围的" class="headerlink" title="用于改变作用范围的"></a>用于改变作用范围的</h3><blockquote>
<p>与在 <bean> 标签中使用 <code>scope</code> 属性实现的功能一致</p>
</blockquote>
<p><code>@Scope</code>:</p>
<blockquote>
<p>作用：用于指定 bean 的作用范围</p>
<p>属性：</p>
<p>​    value：指定范围的取值。常用取值：singleton prototype</p>
<p>​    默认是单例的</p>
</blockquote>
<h3 id="和生命周期相关（了解）"><a href="#和生命周期相关（了解）" class="headerlink" title="和生命周期相关（了解）"></a>和生命周期相关（了解）</h3><blockquote>
<p>与在 <bean> 标签中使用 <code>init-method</code>,<code>destroy-method</code> 属性实现的功能一致</p>
</blockquote>
<p><code>@PreDestroy</code>:</p>
<blockquote>
<p>作用：用于指定销毁方法</p>
</blockquote>
<p><code>@PostConstruct</code>:</p>
<blockquote>
<p>作用：用于指定初始化方法</p>
</blockquote>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote>
<p>使用xml方式和注解的方式实现单表的CRUD操作</p>
</blockquote>
<ul>
<li>持久层技术选型：dbutils</li>
</ul>
<h2 id="改造基于注解的IOC案例，使用纯注解的方式实现"><a href="#改造基于注解的IOC案例，使用纯注解的方式实现" class="headerlink" title="改造基于注解的IOC案例，使用纯注解的方式实现"></a>改造基于注解的IOC案例，使用纯注解的方式实现</h2><blockquote>
<p>Spring 的一些新注解使用</p>
</blockquote>
<h2 id="Spring-和-Junit-的整合"><a href="#Spring-和-Junit-的整合" class="headerlink" title="Spring 和 Junit 的整合"></a>Spring 和 Junit 的整合</h2>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu命令行安装zsh、oh-my-zsh、插件以及相关配置</title>
    <url>/posts/ubuntu-ming-ling-xing-an-zhuang-zsh-oh-my-zsh-cha-jian-yi-ji-xiang-guan-pei-zhi/</url>
    <content><![CDATA[<p>鉴于网上的教程参差不齐，方法也都不太一样，我每次都需要找半天才能找到一个相对来说满意的教程。</p>
<p>所以为了避免麻烦，我就自己写一个教程，以后再重置服务器系统就能快速安装了</p>
<h2 id="1-安装-zsh"><a href="#1-安装-zsh" class="headerlink" title="1. 安装 zsh"></a>1. 安装 zsh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></table></figure>

<p>其他系统的安装地址 <a target="_blank" rel="noopener" href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">zsh-on-github-传送门</a></p>
<p>把默认的 <code>shell</code> 改成 <code>zsh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<h2 id="2-安装-git"><a href="#2-安装-git" class="headerlink" title="2. 安装 git"></a>2. 安装 git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h2 id="3-安装-oh-my-zsh"><a href="#3-安装-oh-my-zsh" class="headerlink" title="3. 安装 oh-my-zsh"></a>3. 安装 oh-my-zsh</h2><p>可以使用 <code>curl</code> 或 <code>wget</code> 两种方式来安装</p>
<p><strong>via curl</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>via wget</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>其他系统的安装地址 <a target="_blank" rel="noopener" href="https://github.com/ohmyzsh/ohmyzsh">on-my-zsh-on-github-传送门</a></p>
<blockquote>
<p>注意：</p>
<p>这一步有可能会报错，GitHub 的 raw.githubusercontent.com 无法连接，可直接修改 hosts：</p>
<p>Ubuntu、CentOS 及 macOS 直接在终端输入：</p>
<p><code>sudo vim /etc/hosts</code></p>
<p>添加以下内容保存即可（IP地址可自行查询后修改为延时最低的，也可以直接复制下面的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GitHub Start</span></span><br><span class="line">52.74.223.119 github.com</span><br><span class="line">192.30.253.119 gist.github.com</span><br><span class="line">54.169.195.247 api.github.com</span><br><span class="line">185.199.111.153 assets-cdn.github.com</span><br><span class="line">151.101.76.133 raw.githubusercontent.com</span><br><span class="line">151.101.108.133 user-images.githubusercontent.com</span><br><span class="line">151.101.76.133 gist.githubusercontent.com</span><br><span class="line">151.101.76.133 cloud.githubusercontent.com</span><br><span class="line">151.101.76.133 camo.githubusercontent.com</span><br><span class="line">151.101.76.133 avatars0.githubusercontent.com</span><br><span class="line">151.101.76.133 avatars1.githubusercontent.com</span><br><span class="line">151.101.76.133 avatars2.githubusercontent.com</span><br><span class="line">151.101.76.133 avatars3.githubusercontent.com</span><br><span class="line">151.101.76.133 avatars4.githubusercontent.com</span><br><span class="line">151.101.76.133 avatars5.githubusercontent.com</span><br><span class="line">151.101.76.133 avatars6.githubusercontent.com</span><br><span class="line">151.101.76.133 avatars7.githubusercontent.com</span><br><span class="line">151.101.76.133 avatars8.githubusercontent.com</span><br><span class="line"><span class="comment"># GitHub End</span></span><br></pre></td></tr></table></figure>


<p>参考：<a target="_blank" rel="noopener" href="https://www.cnblogs.com/sinferwu/p/12726833.html">https://www.cnblogs.com/sinferwu/p/12726833.html</a></p>
</blockquote>
<h2 id="4-选择主题-agnoster"><a href="#4-选择主题-agnoster" class="headerlink" title="4. 选择主题 agnoster"></a>4. 选择主题 <code>agnoster</code></h2><p>编辑 <code>~/.zshrc</code> 文件，修改 <code>ZSH_THEME</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span> <span class="comment"># (this is one of the fancy ones)</span></span><br></pre></td></tr></table></figure>

<p>注意：许多主题需要安装字体 <a target="_blank" rel="noopener" href="https://github.com/powerline/fonts">Powerline Fonts</a> 才能正常显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fonts-powerline</span><br></pre></td></tr></table></figure>

<p>更多主题：<a target="_blank" rel="noopener" href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster">传送门</a></p>
<h2 id="5-安装-zsh-syntax-highlighting-语法高亮插件"><a href="#5-安装-zsh-syntax-highlighting-语法高亮插件" class="headerlink" title="5. 安装 zsh-syntax-highlighting 语法高亮插件"></a>5. 安装 <code>zsh-syntax-highlighting</code> 语法高亮插件</h2><ol>
<li>将此项目下载到 <code>$ZSH_CUSTOM/plugins</code> (默认为： <code>~/.oh-my-zsh/custom/plugins</code>)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改 <code>~/.zshrc</code>（添加该插件）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=( </span><br><span class="line">	[plugins...] </span><br><span class="line">	zsh-syntax-highlighting</span><br><span class="line">	)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启 zsh（比如重新打开命令窗口或执行 <code>source ~/.zshrc</code>）</li>
</ol>
<p>其他系统的安装地址 <a target="_blank" rel="noopener" href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">github-传送门</a></p>
<h2 id="6-安装-zsh-autosuggestions-自动提示插件"><a href="#6-安装-zsh-autosuggestions-自动提示插件" class="headerlink" title="6. 安装 zsh-autosuggestions 自动提示插件"></a>6. 安装 <code>zsh-autosuggestions</code> 自动提示插件</h2><ol>
<li>将此项目下载到 <code>$ZSH_CUSTOM/plugins</code> (默认为： <code>~/.oh-my-zsh/custom/plugins</code>)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改 <code>~/.zshrc</code>（添加该插件）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=( </span><br><span class="line">	[plugins...] </span><br><span class="line">	zsh-autosuggestions</span><br><span class="line">	)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启 zsh（比如重新打开命令窗口或执行 <code>source ~/.zshrc</code>）</li>
</ol>
<p>其他系统的安装地址 <a target="_blank" rel="noopener" href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">github-传送门</a></p>
<h2 id="7-安装-autojump-自动跳转插件"><a href="#7-安装-autojump-自动跳转插件" class="headerlink" title="7. 安装 autojump 自动跳转插件"></a>7. 安装 <code>autojump</code> 自动跳转插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autojump</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改 <code>~/.zshrc</code>（添加该插件）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在最后一行加入，注意点后面是一个空格</span></span><br><span class="line">. /usr/share/autojump/autojump.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启 zsh（比如重新打开命令窗口或执行 <code>source ~/.zshrc</code>）</li>
</ol>
<p>其他系统的安装地址 <a target="_blank" rel="noopener" href="https://github.com/wting/autojump">github-传送门</a></p>
<h2 id="8-安装-zsh-completions-补全工具"><a href="#8-安装-zsh-completions-补全工具" class="headerlink" title="8. 安装 zsh-completions 补全工具"></a>8. 安装 <code>zsh-completions</code> 补全工具</h2><ol>
<li>将此项目下载到 <code>$ZSH_CUSTOM/plugins</code> (默认为： <code>~/.oh-my-zsh/custom/plugins</code>)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions <span class="variable">$&#123;ZSH_CUSTOM:=~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-completions</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改 <code>~/.zshrc</code>（添加该插件）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">	[plugins...]</span><br><span class="line">	zsh-completions</span><br><span class="line">	)</span><br><span class="line"><span class="built_in">autoload</span> -U compinit &amp;&amp; compinit</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启 zsh（比如重新打开命令窗口或执行 <code>source ~/.zshrc</code>）</li>
</ol>
<p>其他系统的安装地址 <a target="_blank" rel="noopener" href="https://github.com/zsh-users/zsh-completions">github-传送门</a></p>
<h2 id="9-修改阿里云服务器的主机名"><a href="#9-修改阿里云服务器的主机名" class="headerlink" title="9. 修改阿里云服务器的主机名"></a>9. 修改阿里云服务器的主机名</h2><ol>
<li><p>查看当前主机名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主机名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname XXX</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务器（或断开重连）</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>jdbc学习笔记01</title>
    <url>/posts/jdbc-xue-xi-bi-ji-01/</url>
    <content><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><blockquote>
<p>Java DataBase Connectivity Java数据库连接（用Java操作数据库）</p>
</blockquote>
<p>定义了操作所有关系型数据库的规范（接口），实现类（数据库驱动jar包）由各数据库厂商实现用来操作数据库</p>
<h3 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h3><ul>
<li>步骤<ol>
<li>导入驱动jar包 <code>mysql-connector-java-8.0.19.jar</code></li>
<li>注册驱动</li>
<li>获取数据库连接对象 Connection</li>
<li>定义 sql</li>
<li>获取执行 sql 语句的对象 Statement</li>
<li>执行 sql，接收返回的结果</li>
<li>处理结果</li>
<li>释放资源</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 导入驱动jar包(复制jar包，右键 add as library)</span></span><br><span class="line">        <span class="comment">//2. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//或使用下面这种写法（耦合性较高）</span></span><br><span class="line">        <span class="comment">//DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 获取数据库连接对象 Connection</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/learn?serverTimezone=GMT%2B8&amp;amp;characterEncoding=utf-8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;4869&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 定义 sql</span></span><br><span class="line">        String sql = <span class="string">&quot;update user set sex = &#x27;女&#x27; where id = 42&quot;</span>;</span><br><span class="line">        <span class="comment">//5. 获取执行 sql 语句的对象 Statement</span></span><br><span class="line">        Statement stmt = connection.createStatement();</span><br><span class="line">        <span class="comment">//6. 执行 sql，接收返回的结果</span></span><br><span class="line">        <span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//7. 处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//8. 释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-详解各个对象"><a href="#3-详解各个对象" class="headerlink" title="3. 详解各个对象"></a>3. 详解各个对象</h3><ol>
<li><p>DriverManager：驱动管理对象</p>
<ul>
<li><p>功能：</p>
<ol>
<li><p>注册驱动</p>
<blockquote>
<p>static void registerDriver (Driver driver) 使用 <code>DriverManager</code>注册给定的驱动程序</p>
<p>写代码时使用 <code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code></p>
</blockquote>
<blockquote>
<p>另外，发现不注册驱动也能运行成功，这是因为在mysql5之后，在jar包中存在文件<code>mysql-connector-java-8.0.19.jar\META-INF\services\java.sql.Driver</code>，里面写的有默认驱动</p>
</blockquote>
</li>
<li><p>获取数据库连接</p>
<ul>
<li><p>方法：<code>static Connection getConnection(String url, String user, String password)</code></p>
</li>
<li><p>参数：</p>
<ul>
<li><p>url：指定连接的路径</p>
<ul>
<li><p>语法：jdbc:mysql://ip地址（域名）: 端口号/数据库名称?serverTimezone=所在时区</p>
<blockquote>
<p>mysql-jdbc 6.0以上版本需要在连接数据库url后面指定所在时区。<br>中国用的是GMT+8的时区，在jdbc连接的url后面加上东八区的<code>serverTimezone=Asia/Shanghai</code></p>
<p>或</p>
<p><code>serverTimezone=Hongkong</code></p>
<p>或</p>
<p><code>serverTimezone=GMT%2B8</code>（%2B是“+”号）</p>
<p>即可解决问题</p>
</blockquote>
</li>
<li><p>例子：<code>jdbc:mysql://localhost:3306/learn?serverTimezone=Hongkong</code></p>
</li>
<li><p>细节：如果连接的是本机mysql服务器，并且mysql服务的默认端口是3306，则url可以简写为：<code>jdbc:mysql:///数据库名称?serverTimezone=时区名称</code></p>
</li>
</ul>
</li>
<li><p>user：用户名</p>
</li>
<li><p>password：密码</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>Connection：数据库连接对象</p>
<ol>
<li>功能：<ol>
<li>获取执行 sql 的对象<ul>
<li><code>Statement createStatement()</code></li>
<li><code>PreparedStatement prepareStatement(String sql)</code></li>
</ul>
</li>
<li>管理事务<ul>
<li>开启事务：<code>setAutoCommit(boolean autoCommit)</code>：调用该方法设置参数为<code>false</code>即开启事务</li>
<li>提交事务：<code>commit()</code></li>
<li>回滚事务：<code>rollback()</code></li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li><p>Statement：执行sql对象</p>
<ol>
<li>执行 sql<ol>
<li><code>boolean execute(String sql)</code>：可以执行任意的 sql 了解</li>
<li><code>int executeUpdate(String sql)</code>：执行 DML（insert、update、delete）语句、DDL语句（create、alter、drop）语句<ul>
<li>返回值：影响的行数，可以通过这个影响的行数判断 DML 语句是否执行成功，返回值 &gt; 0执行成功</li>
</ul>
</li>
<li><code>ResultSet executeQuery(String sql)</code>：执行 DQL（select）语句<ul>
<li>（其返回值和 2. 不同）</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li><p>ResultSet：结果集对象，封装查询结果</p>
<ul>
<li><p><code>boolean next()</code>：光标向下移动一行</p>
</li>
<li><p><code>getXxx(参数)</code>：获取数据</p>
<ul>
<li><code>Xxx</code>代表数据类型，如<code>int getInt(）</code>,<code>getString()</code></li>
<li>参数：<ol>
<li>int：代表列的编号，<strong>从 1 开始</strong> ，如：<code>getString(1)</code></li>
<li>String：代表列名称，如：<code>getDouble(&quot;balance&quot;)</code></li>
</ol>
</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li><p>使用步骤：</p>
<ol>
<li>游标向下移动一行</li>
<li>判断是否有数据</li>
<li>获取数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line"><span class="comment">//5. 获取执行 sql 语句的对象 Statement</span></span><br><span class="line">Statement stmt = connection.createStatement();</span><br><span class="line"><span class="comment">//6. 执行 sql，接收返回的结果</span></span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"><span class="comment">//7. 处理结果</span></span><br><span class="line"><span class="comment">// 循环判断游标是否是最后一行末尾</span></span><br><span class="line"><span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">    <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    String name = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;id = &quot;</span> + id + <span class="string">&quot; username = &quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>PreparedStatement：执行sql对象</p>
<ol>
<li><p>SQL 注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全问题</p>
<ol>
<li>输入用户名随便，输入密码：<code>a&#39; or ‘a&#39; = ‘a</code></li>
<li>sql：<code>select * from user where username = ‘asdad‘ and password = ‘a&#39; or ‘a‘ = ‘a&#39;</code></li>
</ol>
</li>
<li><p>解决sql注入问题：使用PreparedStatement对象来解决</p>
</li>
<li><p>预编译的sql：参数使用<code>?</code>作为占位符，用户的输入只是给占位符赋值</p>
</li>
<li><p>步骤：</p>
<ol>
<li>导入驱动jar包 <code>mysql-connector-java-8.0.19.jar</code></li>
<li>注册驱动</li>
<li>获取数据库连接对象 Connection</li>
<li>定义 sql<ul>
<li>注意：sql的参数使用<code>?</code>作为占位符。如：<code>select * from user where username = ? and password = ?;</code></li>
</ul>
</li>
<li>获取执行 sql 语句的对象 PrepareStatement <code>Connection.prepareStatement(String sql)</code></li>
<li>给 <code>?</code> 赋值：<ul>
<li>方法：<code>setXxx(参数1, 参数2)</code><ul>
<li>参数1：<code>?</code>的位置编号，从 1 开始</li>
<li>参数2：<code>?</code>的值</li>
</ul>
</li>
</ul>
</li>
<li>执行 sql，接收返回的结果</li>
<li>处理结果</li>
<li>释放资源</li>
</ol>
</li>
<li><p><strong>后期都会使用PreparedStatement来完成增删改查的所有操作</strong></p>
<ol>
<li>可以防止SQL注入</li>
<li>效率更高</li>
</ol>
</li>
<li><p>代码示例：(可以防止 sql 注入)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//4. 定义 sql</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from user where username = ? and sex = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//5. 获取执行 sql 语句的对象 PreparedStatement</span></span><br><span class="line">        pstmt = connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//6. 给 ? 赋值</span></span><br><span class="line">        pstmt.setString(<span class="number">1</span>,<span class="string">&quot;ascasc&quot;</span>);</span><br><span class="line">        pstmt.setString(<span class="number">2</span>,<span class="string">&quot;a&#x27; or ‘a‘ = ‘a&quot;</span>);</span><br><span class="line">        <span class="comment">//7. 执行查询，不需要传参</span></span><br><span class="line">        rs = pstmt.executeQuery();</span><br><span class="line">        <span class="comment">//8. 判断,输出为 false</span></span><br><span class="line">        System.out.println(rs.next());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCUtils.close(rs,pstmt,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<h2 id="抽取JDBC工具类：JDBCUtils"><a href="#抽取JDBC工具类：JDBCUtils" class="headerlink" title="抽取JDBC工具类：JDBCUtils"></a>抽取JDBC工具类：JDBCUtils</h2><ul>
<li><p>目的：简化书写</p>
</li>
<li><p>分析：</p>
<ol>
<li><p>抽取注册驱动</p>
</li>
<li><p>抽取一个方法获取连接对象</p>
<ul>
<li><p>需求：不传递参数，同时保证工具类的通用性</p>
</li>
<li><p>解决：配置文件(<code>src/jdbc.properties</code>)</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///learn?serverTimezone=Hongkong</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">4869</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
</li>
</ul>
<ol start="3">
<li><p>抽取一个方法释放资源</p>
<p>代码示例：</p>
<p><code>JDBCUtils.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次即可拿到这些值，使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 读取资源文件，获取值</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 加载文件</span></span><br><span class="line">            <span class="comment">//方法 1（实测不可行）</span></span><br><span class="line">            <span class="comment">// 获取src路径下的文件的方式-----&gt;ClassLoader 类加载器</span></span><br><span class="line"><span class="comment">//            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span></span><br><span class="line"><span class="comment">//            // 根路径是 src 目录，所以只用写相对路径就行</span></span><br><span class="line"><span class="comment">//            URL res = classLoader.getResource(&quot;jdbc.properties&quot;);</span></span><br><span class="line"><span class="comment">//            String path = res != null ? res.getPath() : null;</span></span><br><span class="line"><span class="comment">//            System.out.println(path);</span></span><br><span class="line"><span class="comment">//            if (path != null) &#123;</span></span><br><span class="line"><span class="comment">//                pro.load(new FileReader(path));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方法 2</span></span><br><span class="line">            <span class="comment">// 该行代码实测是可行的（可能java8不行？）若不行的话可采用上面的方法</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(<span class="string">&quot;src/jdbc.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//3. 获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            <span class="comment">//4. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>main.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//4. 定义 sql</span></span><br><span class="line">            <span class="comment">//String sql = &quot;update user set sex = &#x27;男&#x27; where id = 42&quot;;</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">            <span class="comment">//5. 获取执行 sql 语句的对象 Statement</span></span><br><span class="line">            stmt = connection.createStatement();</span><br><span class="line">            <span class="comment">//6. 执行 sql，接收返回的结果</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//7. 处理结果</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;id = &quot;</span> + id + <span class="string">&quot; username = &quot;</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,stmt,connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><p>sql 语句拼接Java中的变量</p>
<blockquote>
<p>java中的字符串只能双引号（js可以单引号也可以双引号）引上，如果字符串中需要拼接变量，该变量用单引号括起来，然后加两个双引号再加两个加号，中间就是变量</p>
</blockquote>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String username, password;	<span class="comment">//username 和 password 已经定义</span></span><br><span class="line">String sql = “select * from user where username = <span class="string">&#x27;&quot;+username+&quot;&#x27;</span> and password = <span class="string">&#x27;&quot;+password+&quot;&#x27;</span>”</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="JDBC-控制事务"><a href="#JDBC-控制事务" class="headerlink" title="JDBC 控制事务"></a>JDBC 控制事务</h2><ol>
<li><p>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败</p>
</li>
<li><p>操作：</p>
<ol>
<li>开启事务：</li>
<li>提交事务</li>
<li>回滚事务</li>
</ol>
</li>
<li><p>使用Connection对象来管理事务</p>
<ul>
<li>开启事务：<code>setAutoCommit(boolean autoCommit)</code>：调用该方法设置参数为<code>false</code>即开启事务<ul>
<li>在执行sql之前开启事务</li>
</ul>
</li>
<li>提交事务：<code>commit()</code><ul>
<li>当所有sql都执行完提交事务</li>
</ul>
</li>
<li>回滚事务：<code>rollback()</code><ul>
<li>在catch中回滚事务</li>
</ul>
</li>
</ul>
</li>
<li><p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement pstmt1 = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement pstmt2 = <span class="keyword">null</span>;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1. 获取连接</span></span><br><span class="line">        connection = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//2.定义 sql</span></span><br><span class="line">        <span class="comment">//2.1 张三 - 300</span></span><br><span class="line">        String sql1 = <span class="string">&quot;update account set money = money - ? where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//2.2 李四 + 300</span></span><br><span class="line">        String sql2 = <span class="string">&quot;update account set money = money + ? where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//3. 获取执行sql对象</span></span><br><span class="line">        pstmt1 = connection.prepareStatement(sql1);</span><br><span class="line">        pstmt2 = connection.prepareStatement(sql2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 设置参数</span></span><br><span class="line">        pstmt1.setInt(<span class="number">1</span>, <span class="number">300</span>);</span><br><span class="line">        pstmt1.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        pstmt2.setInt(<span class="number">1</span>, <span class="number">300</span>);</span><br><span class="line">        pstmt2.setInt(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 执行sql</span></span><br><span class="line">        pstmt1.executeUpdate();</span><br><span class="line">        <span class="comment">//手动制造异常</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        pstmt2.executeUpdate();</span><br><span class="line"></span><br><span class="line">        connection.commit();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//事务回滚(回滚到事务开启之前的状态)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCUtils.close(pstmt1, connection);</span><br><span class="line">        JDBCUtils.close(pstmt2, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>jdbc学习笔记02</title>
    <url>/posts/jdbc-xue-xi-bi-ji-02/</url>
    <content><![CDATA[<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><blockquote>
<p> 其实就是一个容器（集合），存放数据库连接的容器</p>
</blockquote>
<ul>
<li>当系统初始化好后，容器被创建，容器会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</li>
</ul>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol>
<li>节约资源</li>
<li>用户访问高效</li>
</ol>
<h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><ol>
<li>标准接口：<code>DataSource</code>     <code>javax.sql</code>包下的<ol>
<li>方法;<ul>
<li>获取连接：<code>getConnection()</code></li>
<li>归还连接：<code>Connection.close()</code>。如果连接对象Connection是从连接池中获取的，那么调用<code>Connection.close()</code>方法，则不会关闭连接了，而是归还连接</li>
</ul>
</li>
</ol>
</li>
<li>一般我们不去实现它，由数据库厂商来实现<ol>
<li>C3P0：数据库连接池技术</li>
<li>Druid：数据库连接池技术，由阿里巴巴提供的</li>
</ol>
</li>
</ol>
<h3 id="C3P0：数据库连接池技术"><a href="#C3P0：数据库连接池技术" class="headerlink" title="C3P0：数据库连接池技术"></a>C3P0：数据库连接池技术</h3><ul>
<li><p>步骤：</p>
<ol>
<li><p>导入jar包（三个） <code>c3p0-0.9.5.5.jar</code>, <code>mchange-commons-java-0.2.19.jar</code></p>
<ul>
<li>不要忘记导入数据库jar包：<code>mysql-connector-java-8.0.19.jar</code></li>
</ul>
</li>
<li><p>定义配置文件：</p>
<ul>
<li>名称：<code>c3p0.properties</code> 或者 <code>c3p0-config.xml</code></li>
<li>路径：直接将文件放在<code>src</code>目录下即可</li>
</ul>
<p>示例：<code>c3p0-config.xml</code>：</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认配置，无参数时使用该配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql:///learn?serverTimezone=Hongkong<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>4869<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--连接池参数--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--初始化连接池中申请的连接数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接池中最大的的连接数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--超时时间：3s--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自定义配置，传递参数为 otherc3p0 时使用该配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;otherc3p0&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/learn?serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>4869<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--连接池参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="3">
<li><p>创建核心对象 数据库连接池对象 <code>ComboPooledDataSource()</code></p>
</li>
<li><p>获取连接：<code>getConnection()</code></p>
</li>
<li><p>代码示例：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建数据库连接池对象</span></span><br><span class="line">    <span class="comment">//DataSource ds = new ComboPooledDataSource();</span></span><br><span class="line">    DataSource ds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;otherc3p0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取连接对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">        Connection conn = ds.getConnection();</span><br><span class="line">        <span class="comment">//3. 输出</span></span><br><span class="line">        System.out.println(i + <span class="string">&quot;:&quot;</span> + conn);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">5</span>)  <span class="comment">//归还连接</span></span><br><span class="line">            conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Druid：数据库连接池技术，由阿里巴巴提供"><a href="#Druid：数据库连接池技术，由阿里巴巴提供" class="headerlink" title="Druid：数据库连接池技术，由阿里巴巴提供"></a>Druid：数据库连接池技术，由阿里巴巴提供</h3><ol>
<li><p>步骤：</p>
<ol>
<li><p>导入jar包 <code>lib/druid-1.1.21.jar</code>, <code>lib/mysql-connector-java-8.0.19.jar</code></p>
</li>
<li><p>定义配置文件：</p>
<ul>
<li>是<code>.properties</code>形式的</li>
<li>可以叫任意名称，可以放在任意目录下</li>
</ul>
</li>
<li><p>加载配置文件：<code>Properties</code></p>
</li>
<li><p>获取数据库连接池对象：通过工厂来获取 <code>DruidDataSourceFactory()</code></p>
</li>
<li><p>获取连接：<code>getConnection()</code> </p>
</li>
<li><p>代码示例：</p>
</li>
</ol>
</li>
</ol>
<p><code>Druid.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/learn?serverTimezone=Hongkong</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">4869</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 超时时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>

<p><code>.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 导入 jar 包</span></span><br><span class="line">    <span class="comment">//2.导入配置文件</span></span><br><span class="line">    <span class="comment">//3. 加载配置文件</span></span><br><span class="line">    Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="comment">//法1</span></span><br><span class="line">    <span class="comment">//pro.load(new FileReader(&quot;src/druid.properties&quot;));</span></span><br><span class="line">    <span class="comment">//法2</span></span><br><span class="line">    InputStream inputStream = DruidTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">    pro.load(inputStream);</span><br><span class="line">    <span class="comment">//4. 获取连接池对象</span></span><br><span class="line">    DataSource dataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 获取连接</span></span><br><span class="line">    Connection connection = dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>定义工具类：</p>
<ol>
<li><p>定义一个类 <code>JDBCUtils</code></p>
</li>
<li><p>提供静态代码块加载配置文件，初始化连接池对象</p>
<ol>
<li>获取连接方法：通过数据库连接池获取连接</li>
<li>释放资源</li>
<li>获取连接池的方法</li>
</ol>
</li>
<li><p>代码示例：</p>
</li>
</ol>
</li>
</ol>
<p><code>JDBCUtils.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(Objects.requireNonNull(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>)));</span><br><span class="line">            <span class="comment">//2. 获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归还连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        close(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归还连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Connection conn = <span class="keyword">null</span>;</span><br><span class="line">     PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">         conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">//2. 定义sql</span></span><br><span class="line">         String sql = <span class="string">&quot;insert into user (id, username, sex) values(?, ?, ?)&quot;</span>;</span><br><span class="line"><span class="comment">//3. 获取pstmt对象</span></span><br><span class="line">         pstmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//4. 给 ? 赋值</span></span><br><span class="line">         pstmt.setInt(<span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line">         pstmt.setString(<span class="number">2</span>,<span class="string">&quot;老黄&quot;</span>);</span><br><span class="line">         pstmt.setString(<span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="comment">//5. 执行sql</span></span><br><span class="line">         <span class="keyword">int</span> count = pstmt.executeUpdate();</span><br><span class="line">         System.out.println(count);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         JDBCUtils.close(pstmt, conn);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-JDBC-JDBC-Template"><a href="#Spring-JDBC-JDBC-Template" class="headerlink" title="Spring JDBC : JDBC Template"></a>Spring JDBC : JDBC Template</h2><ul>
<li><p>Spring 框架对 JDBC 的简单封装。提供了一个<code>JDBCTemplate</code>对象简化JDBC的开发</p>
</li>
<li><p>步骤：</p>
<ol>
<li><p>导入jar包</p>
</li>
<li><p>创建<code>JdbcTemplate</code>对象。依赖于数据源<code>DataSource</code></p>
<ul>
<li><code>JdbcTemplate template = new JdbcTemplate(ds);</code></li>
</ul>
</li>
<li><p>调用<code>JdbcTemplate</code>的方法来完成CRUD的操作</p>
<ul>
<li><code>update()</code>：执行DML语句。增、删、改语句</li>
<li><code>queryForMap()</code>：查询结果将结果封装为map集合：将列名作为key，将值作为value，将这条记录封装为一个map集合<ul>
<li>注意：这个方法查询的结果集长度只能是1，即只能有一条记录</li>
</ul>
</li>
<li><code>queryForList()</code>：查询结果将结果封装为list集合<ul>
<li>注意：这个方法是将每一条记录封装为Map集合，再将Map集合装载到List集合中</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><code>query()</code>：查询结果将结果封装为JavaBean对象<ul>
<li><code>query</code>的参数：<code>RowMapper</code></li>
<li>一般我们使用<code>BeanPropertyRowMapper</code>实现类，可以完成数据到JavaBean的自动封装<ul>
<li><code>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</code></li>
</ul>
</li>
<li><code>queryForObject()</code>：查询结果将结果封装为基本数据类型的集合<ul>
<li>一般用于聚合函数的查询</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li>代码示例：</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 导入jar包</span></span><br><span class="line">    <span class="comment">//2. 创建JDBCTemplate对象</span></span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">//3. 调用方法</span></span><br><span class="line">    String sql = <span class="string">&quot;update account set money = 1000 where id &lt; ?&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> count = template.update(sql,<span class="number">3</span>);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="comment">//无需关心归还连接池的问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>代码示例 2（maven项目）：</li>
</ol>
<p><code>pom.xml</code>（部分）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Emp.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 最好写引用数据类型而不是基本数据类型，这样便于接收 null</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AppTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> com.conv.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unit test for simple App.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 修改数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update user set sex = &#x27;女&#x27; where id = 41&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 添加一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into user values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="keyword">null</span>, <span class="string">&quot;梁非凡&quot;</span>, <span class="string">&quot;2019-12-30 23:59:59&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;湖北武汉&quot;</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3. 删除记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from user where username = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="string">&quot;梁非凡&quot;</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4. 查询id为41的记录，并将其封装为Map集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user where id = ?&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">41</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;id=41, username=老王, birthday=2018-02-28 01:47:08.0, sex=女, address=北京&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5. 查询所有记录，并将其封装为List集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法是将每一条记录封装为Map集合，再将Map集合装载到List集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，并将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法是将每一条记录封装为Map集合，再将Map集合装载到List集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7. 查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select count(id) from user&quot;</span>;</span><br><span class="line">        Long total = template.queryForObject(sql, Long.class);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​     </p>
]]></content>
      <categories>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>电路基础01</title>
    <url>/posts/dian-lu-ji-chu-01/</url>
    <content><![CDATA[<h2 id="电路与电路模型"><a href="#电路与电路模型" class="headerlink" title="电路与电路模型"></a>电路与电路模型</h2><h3 id="物理公式回顾"><a href="#物理公式回顾" class="headerlink" title="物理公式回顾"></a>物理公式回顾</h3><table>
<thead>
<tr>
<th>物理量</th>
<th>符号表示</th>
<th>计算公式</th>
<th>单位</th>
</tr>
</thead>
<tbody><tr>
<td>电流</td>
<td>$I$</td>
<td>$\cfrac{dq}{dt}$</td>
<td>安培（$A$）</td>
</tr>
<tr>
<td>电压</td>
<td>$U$</td>
<td>$\cfrac{dw}{dq}$</td>
<td>伏特（$V$）</td>
</tr>
<tr>
<td>功率</td>
<td>$P(t)$</td>
<td>$\cfrac{dw(t)}{dt}=\cfrac{dw(t)}{dq}·\cfrac{dq}{dt}=u(t)i(t)$</td>
<td>瓦特（$W$）</td>
</tr>
<tr>
<td>能量</td>
<td>$W(t)$</td>
<td>$\int_{0}^{t}p(t)dt$</td>
<td>焦耳（$J$）</td>
</tr>
<tr>
<td>电导</td>
<td>$G$</td>
<td>$\cfrac{1}{R}$</td>
<td>西门子（$S$）</td>
</tr>
<tr>
<td>电容</td>
<td>$C$</td>
<td>$C=\cfrac Q U$</td>
<td>法拉（$F$）</td>
</tr>
</tbody></table>
<h3 id="电路的作用"><a href="#电路的作用" class="headerlink" title="电路的作用"></a>电路的作用</h3><ul>
<li>进行能量的转换和传输</li>
<li>进行信号的处理和传递</li>
<li>进行信息的存储</li>
</ul>
<p>电路理论研究的对象不是实际电路，而是理想化的电路模型。</p>
<h3 id="电路模型"><a href="#电路模型" class="headerlink" title="电路模型"></a>电路模型</h3><ol>
<li>一个器件的电路模型及参数与该器件的工作条件有关</li>
<li>电路模型是一种数学模型</li>
<li>电路模型只是对实际物理过程的一种近似描述，模型的繁简与实际工程计算的要求有关</li>
</ol>
<h3 id="集总假设及集总电路"><a href="#集总假设及集总电路" class="headerlink" title="集总假设及集总电路"></a>集总假设及集总电路</h3><ul>
<li><p>集总假设元件及电路各方向的尺寸远远小于电路周围的电磁波波长</p>
<p>$$\lambda=\frac{C}{f}, f=50Hz, C=3*10^8m/s$$</p>
<p>$$\Rightarrow \lambda=6*10^6m$$</p>
</li>
<li><p>不同工作条件下，实际器件可以用不同电路模型组合表示</p>
<blockquote>
<p>例如：</p>
<p>电感线圈在直流情况下可视为一个电阻；</p>
<p>在低频交流的情况下可视为一个电阻和一个理想电感的串联；</p>
<p>在高频交流的情况下可视为一个电阻和一个理想电感的串联之后再与一个理想电容并联；</p>
</blockquote>
</li>
<li><p>由理想元件连接而成的电路称为集总电路</p>
</li>
</ul>
<h3 id="参考方向"><a href="#参考方向" class="headerlink" title="参考方向"></a>参考方向</h3><ol>
<li>电流<ul>
<li>电流的实际流动方向是指单位正电荷的移动方向</li>
<li>电流的<strong>参考方向</strong>是一种任意选定的方向<ul>
<li>当 $i&gt;0$ 时参考方向与实际方向一致</li>
<li>当 $i&lt;0$ 时参考方向与实际方向相反</li>
<li>注意：$i$ 是代数量</li>
</ul>
</li>
<li>通常将正电荷运动的方向规定为电流的参考方向 </li>
</ul>
</li>
<li>电压（类似）<ul>
<li>当 $u&gt;0$ 时参考方向与实际方向一致</li>
<li>当 $u&lt;0$ 时参考方向与实际方向相反</li>
<li>注意：$u$ 是代数量</li>
</ul>
</li>
<li>电压与电流的关联参考方向<ul>
<li>电流与电压的参考方向一致则称为关联参考方向，反之则为非关联参考方向</li>
<li>关联参考方向一定是针对一段电路讨论</li>
</ul>
</li>
</ol>
<h3 id="功率"><a href="#功率" class="headerlink" title="功率"></a>功率</h3><ul>
<li><p>当 $p&gt;0$ 时，吸收功率</p>
</li>
<li><p>当 $p&lt;0$ 时，发出功率</p>
</li>
<li><p>注意：在多电源电路中，有的电源会发出功率，有的电源会吸收功率</p>
</li>
</ul>
<h3 id="独立电源的分类及电压源"><a href="#独立电源的分类及电压源" class="headerlink" title="独立电源的分类及电压源"></a>独立电源的分类及电压源</h3><p>独立电源</p>
<blockquote>
<p>指二端元件输出的电压（电流）仅由其本身性质确定，与电路中其余部分的电压（电流）无关</p>
</blockquote>
<p>电压源</p>
<ul>
<li><p>理想电压源</p>
<blockquote>
<p>一个二端元件输出的电压<strong>恒定</strong></p>
<p>（恒定并不是不变，而是不随着外电路的电流发生改变，本身可以随时间变化）</p>
</blockquote>
</li>
<li><p>实际电压源</p>
<blockquote>
<p>一个二端元件输出的电压，随流过它的电流变化而变化</p>
<p>电路模型：</p>
<p>可视为一个理想电压源与一个电阻串联</p>
</blockquote>
</li>
</ul>
<p>电流源</p>
<ul>
<li><p>理想电流源</p>
<blockquote>
<p>一个二端元件输出的电流<strong>恒定</strong></p>
</blockquote>
</li>
<li><p>实际电流源</p>
<blockquote>
<p>一个二端元件输出的电流，随其端电压变化而变化</p>
<p>电路模型：</p>
<p>可视为一个理想电流源与一个电阻并联</p>
</blockquote>
<p>注意：由于实际电流源中的内阻越大越好，所以开路状态下外电压将会很高，故实际电流源不允许开路使用</p>
</li>
</ul>
<h3 id="受控源"><a href="#受控源" class="headerlink" title="受控源"></a>受控源</h3><p>若一个电源的输出电压（电流）受到电路中其他支路的电压（电流）控制时，称为受控源</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li><p>电压控制电压源（VCVS）</p>
<p><img data-src="01.png" alt="VCVS"></p>
<p>$$i_1=0,u_2=\mu u_1$$</p>
<p>$\mu$ ：电压放大倍数（无量纲）</p>
</li>
<li><p>电流控制电压源（CCVS）</p>
<p><img data-src="02.png" alt="CCVS"></p>
<p>$$u_1=0,u_2=ri_1$$</p>
<p>r：转移电阻（电阻量纲）</p>
</li>
<li><p>电压控制电流源（VCCS）</p>
<p><img data-src="03.png" alt="VCCS"></p>
<p>$$i_1=0,i_2=gu_1$$</p>
<p>g：转移电导（电导量纲）</p>
</li>
<li><p>电流控制电流源（CCCS）</p>
<p><img data-src="04.png" alt="CCCS"></p>
<p>$$u_1=0,i_2=\beta i_1$$</p>
<p>$\beta$：电流放大倍数（无量纲）</p>
</li>
</ul>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol>
<li><p>理想的含义</p>
<ul>
<li>控制支路<ul>
<li>控制量是 $u_1$ 时，$i_1=0$</li>
<li>控制量是 $i_1$ 时，$u_1=0$</li>
</ul>
</li>
<li>输出支路<ul>
<li>输出是电压时，内阻为 0</li>
<li>输出是电流时，内导为 0</li>
</ul>
</li>
</ul>
</li>
<li><p>受控源具有电源与电阻的二重性</p>
</li>
<li><p>对理想受控电源 </p>
<ul>
<li>当控制变量为电压时，控制回路是开路的，如：VCVS，VCCS</li>
<li>当控制变量为电流时，控制回路是短路的，如：CCVS，CCCS</li>
<li>对于控制回路（输入回路），因为 $p_2=u_2i_2=0$, 故输入端的功率为零； </li>
<li>对于被控制回路（输出回路），因为 $p_2=u_2i_2\not=0$, 表明输出功率不为零，故受控源为一种<strong>有源元件</strong>。</li>
</ul>
</li>
<li><p>受控源与独立源在电路中的作用： </p>
<p>独立电源是<strong>激励</strong>，表示其对其它电路的一种作用； 受控电源表示控制回路与被控制回路之间的一种<strong>耦合关系</strong>。</p>
</li>
<li><p>只要电路中有一条支路的电压（或电流）受到另外任意一条支路电压（或电流）控制时，它们就构成了一个受控电源。</p>
</li>
</ol>
<h3 id="二端网络"><a href="#二端网络" class="headerlink" title="二端网络"></a>二端网络</h3><ul>
<li>当网络与外部通过两个端点连接时，称其为二端网络</li>
<li>通常二端网络中含独立源时称为含源二端网络，用 $N_S$ 表示</li>
<li>二端网络中不含独立源时，称为无源二端网络，用 $N_O$ 表示</li>
</ul>
<h3 id="基尔霍夫定律"><a href="#基尔霍夫定律" class="headerlink" title="基尔霍夫定律"></a>基尔霍夫定律</h3><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><ul>
<li><p>支路：一个具有两个端钮，由一个或多个元件串联而成， 且在电路中一段无分支的电路</p>
</li>
<li><p>节点：两条及两条以上支路的连接点</p>
</li>
<li><p>回路： 在电路中从某一节点出发又回到该节点的任一闭合路径</p>
</li>
<li><p>网孔：当回路中不包含其他支路时称为网孔</p>
</li>
<li><p>网络：复杂电路</p>
</li>
</ul>
<h4 id="基尔霍夫电流定律（Kirchhoff’s-current-law-KCL）"><a href="#基尔霍夫电流定律（Kirchhoff’s-current-law-KCL）" class="headerlink" title="基尔霍夫电流定律（Kirchhoff’s current law  KCL）"></a>基尔霍夫电流定律（Kirchhoff’s current law  KCL）</h4><ul>
<li><p>定律：任一时刻，流入电路中任一节点的电流代数和恒为零</p>
<p> $$\sum_{}^{}i_k=0$$</p>
<p> 即</p>
<p> $$\sum i_{in} = \sum i_{out}$$</p>
</li>
<li><p>约定：电流流入取负，流出取正</p>
</li>
<li><p>物理实质：电荷的连续性原理</p>
<blockquote>
<p>电荷是流动的，不会在一个点堆积</p>
</blockquote>
</li>
<li><p>KCL适用于任何集总参数的电路，与电路元件的性质无关</p>
</li>
<li><p>例题：</p>
<p><img data-src="05.png" alt="example"></p>
<p>分析：</p>
<p>两幅图唯一的区别在于 B 点是否接地。</p>
<ol>
<li>第一幅图：<ul>
<li>C点：从上方流入 $i_1$ ，向左边流出 $i_1$ ，故：$$i_1=-\cfrac{10V}{5\Omega}=-2A$$</li>
<li>B点：向右方流出 $i_2$ ，所以上方流入 $i_2$ </li>
<li>A点：右方流入 $$i_2$$ ，向下流出 $$i_2$$ ，故 $$i_{AC}=0$$，故 $$i_2=\cfrac{12V}{12\Omega}=1A$$</li>
</ul>
</li>
<li>第二幅图：<ul>
<li>C点：从上方流入 $$i_1^*$$  ，向左边流出 $$i_1^*$$ ，故：$$i_1^*=-\cfrac{10V}{5\Omega}=-2A$$ </li>
<li>B、C 两点等电势，故可以将其用导线连起来分析</li>
<li>AB、AC 是并联的，等效电阻为 $4\Omega$ ，故 $$i_2^*=\cfrac{12V}{4\Omega+4\Omega}=1.5A$$ </li>
<li>B点：向右方流出 $$i_2^*$$ ，上方流入 $$\cfrac{i_2^*}{2}$$，下方流入 $$\cfrac{i_2^*}{2}$$ </li>
<li>C点：AC 流入 $$\cfrac{i_2^*}{2}$$ ，向下流出 $$\cfrac{i_2^*}{2}$$</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="基尔霍夫电压定律（Kirchhoff’s-voltage-law-KVL）"><a href="#基尔霍夫电压定律（Kirchhoff’s-voltage-law-KVL）" class="headerlink" title="基尔霍夫电压定律（Kirchhoff’s voltage law  KVL）"></a>基尔霍夫电压定律（Kirchhoff’s voltage law  KVL）</h4><ul>
<li><p>定律：任一时刻，沿任一闭合回路电压降代数和恒为零</p>
<p>$\sum u_k=0$</p>
</li>
<li><p>约定：电压降与回路绕行方向一致取正，反之取负</p>
</li>
<li><p>物理实质：电位的单值性原理</p>
<blockquote>
<p>一个点的电位只有一个</p>
</blockquote>
</li>
<li><p>KVL 是能量守恒在集总参数电路中的具体反映</p>
</li>
<li><p>KVL适用于任何集总参数电路，与电路元件的性质无关</p>
</li>
<li><p>KVL 回路中的各支路电压之间加上了线性约束</p>
</li>
<li><p>KVL 既可以用于由导线连接的任何回路，也可以用于其他任何非闭合路径（即广义回路）。 </p>
</li>
</ul>
<h3 id="电位"><a href="#电位" class="headerlink" title="电位"></a>电位</h3><p>将单位正电荷自电场中某一点 a 移动到参考点（物理学中习惯选无穷远处作为参考点，在电路中习惯设定某点为参考点而不是无穷远处）电场力做功的大小称作 a 的电位。</p>
<p>计算电路中某一点的电位，实际上是计算该点与参考点之间的电压。同电压一样，电位也是代数量</p>
]]></content>
      <categories>
        <category>电路</category>
      </categories>
      <tags>
        <tag>电路</tag>
      </tags>
  </entry>
  <entry>
    <title>电路基础02</title>
    <url>/posts/dian-lu-ji-chu-02/</url>
    <content><![CDATA[<h2 id="等效变换的概念"><a href="#等效变换的概念" class="headerlink" title="等效变换的概念"></a>等效变换的概念</h2><p>如果有两个电路N1、N2，其内部结构不同，但从端口看，它们的电压、电流关系相同（方向、大小均相同），则称它们是相互等效的电路，即N1与N2对外电路的影响是相同的。</p>
<h2 id="电阻的串联、并联和混联"><a href="#电阻的串联、并联和混联" class="headerlink" title="电阻的串联、并联和混联"></a>电阻的串联、并联和混联</h2><ul>
<li>分压公式：</li>
</ul>
<p>$$<br>u_k=\cfrac{R_k}{\sum{R_k}}u<br>$$</p>
<ul>
<li>分流公式：</li>
</ul>
<p>$$<br>i_k=\cfrac{G_k}{\sum{G_k}}i<br>$$</p>
<ul>
<li><p>混联</p>
<ol>
<li><p>电路在几何对称的情况下，应首先找出相应的等电位点，然后再进行化简</p>
</li>
<li><p>电桥：</p>
</li>
</ol>
<p><img data-src="01.png" alt="电桥"></p>
<p>平衡条件（平衡时中间桥臂电流电压均为零）：<br>$$<br>\frac{R_1}{R3}=\frac{R_2}{R_4}<br>$$</p>
</li>
</ul>
<p>  一些翻转和变形：</p>
<p>  <img data-src="02.png" alt="翻转和变形"></p>
<ul>
<li><p>分析法：</p>
<blockquote>
<p>先判断电桥是否平衡。</p>
<p>平衡时中间桥臂电压为零可以将其短路（虚短）；平衡时中间桥臂电流为零可以将其断路（虚断）</p>
<p>而最后的计算结果相同</p>
<p>如果电桥不平衡，可采用 $Y-\triangle$ 变换的方法分析</p>
</blockquote>
</li>
<li><p>注：平衡电桥只对无源支路成立</p>
</li>
</ul>
<h2 id="电阻的-Y-triangle-（星形-三角形）变换"><a href="#电阻的-Y-triangle-（星形-三角形）变换" class="headerlink" title="电阻的 $Y-\triangle$ （星形-三角形）变换"></a>电阻的 $Y-\triangle$ （星形-三角形）变换</h2><h3 id="三端网络的等效概念"><a href="#三端网络的等效概念" class="headerlink" title="三端网络的等效概念"></a>三端网络的等效概念</h3><p>若两个三端网络与同一个外部电路相接时，电压 $$u_{12}, u_{23}$$ 与电流 $${i_1, i_2}$$ 之间的关系完全相同，则称这两个三端网络对外互为等效</p>
<p><img data-src="03.png" alt="三端网络"></p>
<ul>
<li><p>对 $Y$ 电路<br>$$<br>\left{<br>\begin{aligned}<br>i_1=\frac{R_3}{R_1R_2+R_2R_3+R_3R_1}u_{12}-\frac{R_2}{R_1R_2+R_2R_3+R_3R_1}u_{31} \<br>i_2=\frac{R_1}{R_1R_2+R_2R_3+R_3R_1}u_{23}-\frac{R_3}{R_1R_2+R_2R_3+R_3R_1}u_{12} \<br>i_3=\frac{R_2}{R_1R_2+R_2R_3+R_3R_1}u_{31}-\frac{R_1}{R_1R_2+R_2R_3+R_3R_1}u_{23} \<br>\end{aligned}<br>\right.<br>$$</p>
</li>
<li><p>对 $\triangle$ 电路<br>$$<br>\left{<br>\begin{aligned}<br>i^{‘}<em>1=i</em>{12}-i_{31}=\frac1{R_{12}}u_{12}-\frac1{R_{31}}u_{31} \<br>i^{‘}<em>2=i</em>{23}-i_{12}=\frac1{R_{23}}u_{23}-\frac1{R_{12}}u_{12} \<br>i^{‘}<em>3=i</em>{31}-i_{23}=\frac1{R_{31}}u_{31}-\frac1{R_{23}}u_{23} \<br>\end{aligned}<br>\right.<br>$$</p>
</li>
</ul>
<h3 id="等效变换公式：-triangle-rightarrow-Y"><a href="#等效变换公式：-triangle-rightarrow-Y" class="headerlink" title="等效变换公式：$\triangle \rightarrow Y$"></a>等效变换公式：$\triangle \rightarrow Y$</h3><p><img data-src="04.png" alt="三角形-星形"><br>$$<br>\left{<br>\begin{aligned}<br>R_1=\frac{R_{12}R_{31}}{\sum R_{ij}} \<br>R_2=\frac{R_{12}R_{23}}{\sum R_{ij}} \<br>R_3=\frac{R_{23}R_{31}}{\sum R_{ij}} \<br>\end{aligned}<br>\right.<br>$$</p>
<p>若 $$R_{12}=R_{23}=R_{31}=R$$，则 $$R_1=R_2=R_3=\cfrac R 3$$</p>
<blockquote>
<p>分母为 $\triangle$ 形中三个电阻之和</p>
<p>分子为 $\triangle$ 形中与之对应节点相连的电阻之积</p>
</blockquote>
<h3 id="等效变换公式：-Y-rightarrow-triangle"><a href="#等效变换公式：-Y-rightarrow-triangle" class="headerlink" title="等效变换公式：$Y \rightarrow \triangle$"></a>等效变换公式：$Y \rightarrow \triangle$</h3><p><img data-src="05.png" alt="星形-三角形"><br>$$<br>\left{<br>\begin{aligned}<br>R_{12}=\frac{R_1R_2+R_2R_3+R_3R_1}{R_{3}} \<br>R_{23}=\frac{R_1R_2+R_2R_3+R_3R_1}{R_{1}} \<br>R_{31}=\frac{R_1R_2+R_2R_3+R_3R_1}{R_{2}} \<br>\end{aligned}<br>\right.<br>$$</p>
<p>若 $$R_1=R_2=R_3=R$$，则 $$R_{12}=R_{23}=R_{31}=3R$$</p>
<blockquote>
<p>分子为 $Y$ 形中三个电阻两两乘积之和</p>
<p>分母为 $Y$ 形中与之对应两节点的无关电阻</p>
</blockquote>
<h3 id="建议画出该图"><a href="#建议画出该图" class="headerlink" title="建议画出该图"></a>建议画出该图</h3><p><img data-src="06.png" alt="全图"></p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>求 $R_{ab}$ :</p>
<p>首先选择比较容易变换的电阻进行变换：（$Y \rightarrow \triangle $）</p>
<p><img data-src="07.png" alt="例题"><br>$$<br>R_{ab}=\cfrac{1}{\cfrac19+\cfrac13+\cfrac14}\Omega=\cfrac{36}{25}\Omega<br>$$</p>
<h2 id="理想电压源的串联和并联"><a href="#理想电压源的串联和并联" class="headerlink" title="理想电压源的串联和并联"></a>理想电压源的串联和并联</h2><ul>
<li><p>理想电压源的<strong>并联</strong>必须是同极性、同数值</p>
</li>
<li><p>对外电路进行讨论时，与理想电压源<strong>并联</strong>的元件（支路）对外电路不起作用，对外电路讨论时可<strong>断开</strong></p>
</li>
<li><p>计算流过理想电压源支路的电流时，并联支路的作用必须予以保留</p>
</li>
</ul>
<h2 id="理想电流源的串联和并联"><a href="#理想电流源的串联和并联" class="headerlink" title="理想电流源的串联和并联"></a>理想电流源的串联和并联</h2><ul>
<li>理想电流源的<strong>并联</strong>，同方向（同向上或同向下）相加</li>
<li>理想电流源的<strong>串联</strong>必须是同方向、同数值</li>
<li>与理想电流源<strong>串联</strong>的元件（支路）对外电路不起作用，对外电路讨论时可短接</li>
<li>若求理想电流源的端电压时，串联支路的作用必须予以保留</li>
</ul>
<h2 id="实际电源的等效变换"><a href="#实际电源的等效变换" class="headerlink" title="实际电源的等效变换"></a>实际电源的等效变换</h2><p><img data-src="08.png" alt="等效变换"></p>
<p>等效互换条件：<br>$$<br>\begin{aligned}<br>R_{su}=R_{si}&amp;\overset{\triangle}{=}R_{}s \<br>u_s&amp;=R_si_s \<br>(i_s&amp;=\frac{u_s}{R_s})<br>\end{aligned}<br>$$<br>注意：</p>
<ul>
<li>两个条件必须同时满足</li>
<li>等效变换前后要保持电源方向的一致，即电流源的方向由电压源方向的 $“-“$ 指向 $“+”$</li>
<li>等效是对外部而言，对内不等效</li>
</ul>
<h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>运用电源等效变换方法求 $u$</p>
<p><img data-src="09.png" alt="例题"></p>
<p>解：</p>
<p><img data-src="10.png" alt="例题"></p>
<p>理想电流源的并联可以等效为一个理想电流源（两个理想电流源的数值和）</p>
<p><img data-src="11.png" alt="例题"></p>
<p>再转化为电压源与 $6V$ 的电压源组合：</p>
<p><img data-src="12.png" alt="例题"></p>
<p>最终等效电路图：</p>
<p><img data-src="13.png" alt="例题"><br>$$<br>u=4\times\cfrac{\cfrac{5}{4}+2}{2}=6.5V<br>$$</p>
<h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p>已知：$$U_{s1}=12V,U_{s2}=24V,R_1=R_2=20\Omega,R_3=50\Omega$$</p>
<p><img data-src="14.png" alt="例题"></p>
<p><img data-src="15.png" alt="例题"></p>
<p><img data-src="16.png" alt="例题"></p>
<h2 id="含受控源电路等效电阻的求取"><a href="#含受控源电路等效电阻的求取" class="headerlink" title="含受控源电路等效电阻的求取"></a>含受控源电路等效电阻的求取</h2><p>名词解释：</p>
<ul>
<li><p>输入电阻</p>
<blockquote>
<p>一个二端无源网络$N_0$，其端口处的电压与电流之比称之为该无源网络的输入电阻，即：</p>
<p>$$R_{in}=\dfrac{u}{i}$$</p>
</blockquote>
</li>
</ul>
<p>一个含受控源的简单二端网络，可以通过与独立源相似的等效变换来化简电路。</p>
<p><img data-src="17.png" alt="例题"></p>
<p>注意：</p>
<p><strong>在化简过程中，必须保留受控源的控制变量支路</strong></p>
<h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><p>求电路的输入电阻：</p>
<p><img data-src="18.png" alt="例题"></p>
<p><img data-src="20.png" alt="例题"></p>
<ul>
<li>可见：含受控源电路的输入电阻为 “+” 为 “-” 均属正常，一定要注意物理量的方向</li>
</ul>
<h2 id="运用等效变换分析含受控源的电阻电路"><a href="#运用等效变换分析含受控源的电阻电路" class="headerlink" title="运用等效变换分析含受控源的电阻电路"></a>运用等效变换分析含受控源的电阻电路</h2><blockquote>
<p>注意：</p>
<p>等效变换中控制支路不参与等效变换，予以保留</p>
</blockquote>
<h3 id="例1-1"><a href="#例1-1" class="headerlink" title="例1"></a>例1</h3><p><img data-src="21.png" alt="例题"></p>
<blockquote>
<p>分析：</p>
<ul>
<li>控制支路 $3\Omega$ 不参与等效变换</li>
<li>其余支路：$6A$ 和 $4A$ 可以等效变换，$9\Omega$ 和右侧的混联电阻可以做等效变换</li>
</ul>
</blockquote>
<p>可得到：</p>
<p><img data-src="22.png" alt="例题"></p>
<h3 id="例2-1"><a href="#例2-1" class="headerlink" title="例2"></a>例2</h3><p><img data-src="23.png" alt="例题"></p>
<h2 id="另外一些例题"><a href="#另外一些例题" class="headerlink" title="另外一些例题"></a>另外一些例题</h2><p><img data-src="24.png" alt="例题"></p>
<p><img data-src="25.png" alt="例题"></p>
<p><img data-src="26.png" alt="例题"></p>
<p><img data-src="27.png" alt="例题"></p>
]]></content>
      <categories>
        <category>电路</category>
      </categories>
      <tags>
        <tag>电路</tag>
      </tags>
  </entry>
  <entry>
    <title>电路基础04</title>
    <url>/posts/dian-lu-ji-chu-04/</url>
    <content><![CDATA[<h2 id="叠加定理"><a href="#叠加定理" class="headerlink" title="叠加定理"></a>叠加定理</h2><ul>
<li>线性函数的叠加性：</li>
</ul>
<p>$$<br>f(ax_1+bx_2)=af(x_1)+bf(x_2)<br>$$</p>
<ul>
<li>对于任一线性网络，若同时受到多个独立电源的作用，则这些共同作用的电源在某条支路上所产生的电压或电流，应该等于每个独立电源各自单独作用时，在该支路上所产生的电压或电流分量的代数和。</li>
</ul>
<h3 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h3><p><img data-src="01.png" alt="例题"></p>
<ul>
<li>注意<ol>
<li>只适用于线性电路中求电压、电流，不适用于直接求功率（因为求功率的函数不是线性的）；也不适用于非线性电路</li>
<li>某个独立电源单独作用时，其余独立电源全为<strong>零</strong>值，电压源用“短路”替代，电流源用“断路”替代</li>
<li>受控源不可单独作用，当每个独立源作用时均予以保留，将控制量改称为对应的控制分量</li>
<li>代数和指分量参考方向与总量方向一致取正，不一致取负。</li>
</ol>
</li>
</ul>
<h3 id="例-2"><a href="#例-2" class="headerlink" title="例 2"></a>例 2</h3><p><img data-src="02.png" alt="例题"></p>
<p><img data-src="03.png" alt="例题"></p>
<p><img data-src="04.png" alt="例题"></p>
<h3 id="例-3"><a href="#例-3" class="headerlink" title="例 3"></a>例 3</h3><p><img data-src="05.png" alt="例题"></p>
<ul>
<li>当 $U_{s5}$ 单独作用时，$R_1R_4=R_2R_3$，电桥平衡（$R_6$ 是桥）</li>
<li>当 $U_{s6}$ 单独作用时，$R_1R_4=R_2R_3$，电桥平衡（$R_5$ 是桥）</li>
</ul>
<h3 id="例-4"><a href="#例-4" class="headerlink" title="例 4"></a>例 4</h3><p><img data-src="06.png" alt="例题"></p>
<p>解：</p>
<ol>
<li>设 $u_0=k_1i_s+k_2u_s$，带入求解得：$u_0=15V$</li>
<li>设 $u_0=k^{‘}_1i_s+k^{‘}_2u_s-12$，带入求解得：$u_0=3V$</li>
</ol>
<h3 id="例-5-含受控源电路求解"><a href="#例-5-含受控源电路求解" class="headerlink" title="例 5 含受控源电路求解"></a>例 5 含受控源电路求解</h3><p><img data-src="07.png" alt="例题"></p>
<p><img data-src="08.png" alt="例题"></p>
<blockquote>
<p>注：</p>
<p>由于 $$U^{‘}<em>{R2}=i</em>{m1}R_2$$，</p>
<p>故： $$\alpha u^{‘}_{R2}=\alpha R_2i_{m1}$$</p>
</blockquote>
<p><img data-src="09.png" alt="例题"></p>
<h2 id="替代定理"><a href="#替代定理" class="headerlink" title="替代定理"></a>替代定理</h2><p>在任意的<strong>线性或非线性</strong>网络中，若已知第 n 条支路的电压和电流为 $U_n$ 和 $I_n$，则不论该支路是何元件组成，总可以用下列的任何一个元件去替代：</p>
<ul>
<li>电压值为 $U_n$ 的理想电压源</li>
<li>电流值为 $I_n$ 的理想电流源</li>
<li>电阻值为 $\cfrac{U_n}{I_n}$ 的理想线性电阻元件 $R_n$</li>
</ul>
<p>替代后的电路中全部电压和电流都将保持原值不变。</p>
<h2 id="戴维南定理和诺顿定理"><a href="#戴维南定理和诺顿定理" class="headerlink" title="戴维南定理和诺顿定理"></a>戴维南定理和诺顿定理</h2><p>对于任一<strong>含源线性二端网络</strong>，就其两个端钮而言，都可以用一条最简单支路对外部等效：</p>
<ol>
<li><p>戴维南定理：以一个电压源和一个电阻串联的等效电路替代</p>
<p><img data-src="10.png" alt="戴维南定理"></p>
<blockquote>
<p>电压源的电压值等于线性网络的开路电压 $U_{oc}$</p>
<p>其串联电阻等于该含源线性二端网络中所有独立源为零时，由端钮看进去的等效电阻 $R{eq}$</p>
</blockquote>
</li>
<li><p>诺顿定理：以一个电流源和一个电阻并联的等效电路替代</p>
<p><img data-src="11.png" alt="诺顿定理"></p>
<blockquote>
<p>电流源的电流值等于该含源线性二端网络的短路电流 $I_{sc}$</p>
<p>其并联电阻的确定同上</p>
</blockquote>
</li>
</ol>
<h3 id="例-1-1"><a href="#例-1-1" class="headerlink" title="例 1"></a>例 1</h3><p><img data-src="12.png" alt="例题"></p>
<p>分析：并在 $\cfrac15V$ 电压源的电阻对外电路不起作用，可将其断开；可将原电路分成左右两部分，分别使用戴维南定理求取。</p>
<ul>
<li><p>左边电压：</p>
<p><img data-src="13.png" alt="例题"></p>
</li>
<li><p>左边电阻</p>
<p><img data-src="14.png" alt="例题"></p>
</li>
<li><p>左右合并</p>
<p><img data-src="15.png" alt="例题"></p>
</li>
</ul>
<h3 id="例-2-1"><a href="#例-2-1" class="headerlink" title="例 2"></a>例 2</h3><p><img data-src="16.png" alt="例题"></p>
<p><img data-src="17.png" alt="例题"></p>
<h3 id="例-3-1"><a href="#例-3-1" class="headerlink" title="例 3"></a>例 3</h3><p><img data-src="18.png" alt="例题"></p>
<p>解：根据戴维南定理，将 $R$ 支路以外的其余部分所构成的二端网络，用一个电压源 $U_{oc}$ 和电阻 $R_0$ 相串联去等效代替。 </p>
<ol>
<li><p>求 $U_{oc}$：将 $R$ 支路断开，如图 (b) 所示。用节点电位法（取 b 点点位为 0）可求得：<br>$$<br>U_{oc}=\cfrac{\frac{2}{2+2+2}+1}{\frac1{2+2+2}+\frac12}=2V<br>$$</p>
</li>
<li><p>求 $R_0$：将两个独立源变为零值，即将 2V 电压源短路，而将 1A 电流源开路，如图 (c)所示。可求得：<br>$$<br>R_0=\cfrac{2\times(2+2+2)}{2+2+2+2}=\cfrac32\Omega=1.5\Omega<br>$$</p>
</li>
<li><p>根据所求得的 $U_{oc}$ 和 $R_0$，可作出戴维南等效电路，接上 $R$ 支路如图 (d) 所示，即可求得：<br>$$<br>I=\cfrac23A,U=1V<br>$$</p>
</li>
</ol>
<h3 id="例-4-1"><a href="#例-4-1" class="headerlink" title="例 4"></a>例 4</h3><p><img data-src="19.png" alt="例题"></p>
<p>解：该题如果只用一次戴维南定理，直接求出 4Ω 电阻支路以左的等效电压源，则计算开路电压将会很麻烦。为此，可以逐次应用戴维南定理。</p>
<ol>
<li>先求图 (a) 中 ab 以左的戴维南等效电路。将最左侧电压源等效为电流源，再与 1A 电流源合并，最后再等效为电压源（也可以和例 3 一样，令 $u_b=0$，用节点电位法求取），得：</li>
</ol>
<p>$$<br>U_{ab}=4V,R_{ab}=2\Omega<br>$$</p>
<ol start="2">
<li><p>这样可得到图 (b)。同理，在图 (b) 中，先求左边两列的等效，得：<br>$$<br>U^{‘}=8V,R^{‘}=6\Omega<br>$$<br>再同理求 cd 以左的戴维南等效电路。于是有：<br>$$<br>U_{cd}=4V,R_{cd}=2\Omega<br>$$</p>
</li>
<li><p>得图 (d)。由此可求得：$I=\cfrac4{2+4}=\cfrac23A$</p>
</li>
</ol>
<h2 id="一般方法求等效电阻"><a href="#一般方法求等效电阻" class="headerlink" title="一般方法求等效电阻"></a>一般方法求等效电阻</h2><ol>
<li>求等效电阻 $R_{eq}$ 时，若电路为纯电阻网络，可以用串、并联化简时，直接用串、并联化简的方法求</li>
<li>无法用串并联化简时，则用一般方法求</li>
<li>当电路中含受控源时，则一定要用一般方法求戴维南等效电阻</li>
</ol>
<h2 id="利用戴维南定理分析受控源的电路"><a href="#利用戴维南定理分析受控源的电路" class="headerlink" title="利用戴维南定理分析受控源的电路"></a>利用戴维南定理分析受控源的电路</h2><blockquote>
<p>原则：</p>
<ul>
<li>被等效电路内部与负载内部不应有任何联系（控制量为端口 $U$ 或 $I$ 除外）</li>
<li>求 $R_{eq}$ 要用一般方法</li>
</ul>
</blockquote>
<h3 id="例-1-2"><a href="#例-1-2" class="headerlink" title="例 1"></a>例 1</h3><p><img data-src="20.png" alt="例题"></p>
<ul>
<li><p>求 $U_{oc}$</p>
<p>控制量是被断开断口处的电压，断开断口处的电压即可以看作是负载部分的，也可以看作是被等效部分的</p>
<p><img data-src="21.png" alt="例题"></p>
</li>
</ul>
<ul>
<li><p>求 $R_{eq}$</p>
<ul>
<li>法一：外加激励法</li>
</ul>
<p><img data-src="22.png" alt="例题"></p>
<ul>
<li><p>法二：开路短路法</p>
<p>短路后 $U=0$，即控制量为零，所以受控源的输出量也等于零，受控源是一个受控电流源，输出量为零可视作断路</p>
</li>
</ul>
<p><img data-src="23.png" alt="例题"></p>
</li>
<li><p>作戴维南等效电路求电压 $U$</p>
<p><img data-src="24.png" alt="例题"></p>
</li>
</ul>
<h3 id="例-2-2"><a href="#例-2-2" class="headerlink" title="例 2"></a>例 2</h3><p><img data-src="25.png" alt="例题"></p>
<blockquote>
<p>分析：</p>
<p>断开待求支路，求戴维南等效电路时，会使控制量 $I_1$、被控制量 $2I_1 $ 分属被等效电路与负载两部分</p>
<p>故需要做控制量转移，图中可以看出 $U=1\Omega\times I$，故 $2I_1$ 可用 $2U$ 代替，这样控制量与被控质量同时属于负载部分。</p>
</blockquote>
<ol>
<li><p>求等效电压</p>
<ul>
<li>当 $4V$ 电压源单独作用时：</li>
</ul>
<p><img data-src="26.png" alt="例题"></p>
<ul>
<li>当 $1A$ 电流源单独作用时：</li>
</ul>
<p><img data-src="27.png" alt="例题"></p>
</li>
<li><p>求等效电阻</p>
<p>电桥平衡，$R_{eq}=\cfrac{1+\cfrac{2+2}2}{1+\cfrac{2+2}2+1}=\cfrac34\Omega$</p>
</li>
<li><p>求 $U,I$</p>
<p><img data-src="28.png" alt="例题"></p>
</li>
</ol>
<h2 id="最大功率传输定理（不要求）"><a href="#最大功率传输定理（不要求）" class="headerlink" title="*最大功率传输定理（不要求）"></a>*最大功率传输定理（不要求）</h2><p><img data-src="29.png" alt="大功率传输定理"></p>
<p><img data-src="30.png" alt="大功率传输定理"></p>
]]></content>
      <categories>
        <category>电路</category>
      </categories>
      <tags>
        <tag>电路</tag>
      </tags>
  </entry>
  <entry>
    <title>电路基础03</title>
    <url>/posts/dian-lu-ji-chu-03/</url>
    <content><![CDATA[<h2 id="一般电路的网孔电流法"><a href="#一般电路的网孔电流法" class="headerlink" title="一般电路的网孔电流法"></a>一般电路的网孔电流法</h2><h3 id="支路电流法"><a href="#支路电流法" class="headerlink" title="支路电流法"></a>支路电流法</h3><p><strong>以支路电流为未知量</strong>，根据 KCL、KVL 列关于支路电流的方程，进行求解的过程</p>
<ul>
<li>支路：任意一段无分支的电路</li>
<li>节点：三条及三条以上支路的连接点</li>
</ul>
<h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol>
<li><p>选定<strong>各支路</strong>电流参考方向，列出各节点的 KCL 方程</p>
</li>
<li><p>对独立回路列关于支路电流的 KVL 方程</p>
<blockquote>
<p>独立回路的选取</p>
<ul>
<li><p>充分条件：当每个回路中均具有一条其他回路不具有的新支路时，这一组回路互相独立</p>
</li>
<li><p>平面电路（画在平面中不出现交叉导线的电路）：内网孔是一组独立回路</p>
</li>
</ul>
</blockquote>
</li>
<li><p>求解</p>
</li>
</ol>
<p>缺点：未知量过多</p>
<h3 id="网孔电流法"><a href="#网孔电流法" class="headerlink" title="网孔电流法"></a>网孔电流法</h3><p><strong>以网孔电流作为独立变量</strong>，根据 KVL 列出关于网孔电流的电路方程，进行求解的过程</p>
<blockquote>
<p>网孔电流：假想沿着电路中网孔边界流动的电流</p>
<ul>
<li>对于一个节点数为 n，支路数为 b 的平面电路，其网孔数为 $b-n+1$ 个，网孔电流数也为 $b-n+1$ 个</li>
<li>网孔电流的特点<ul>
<li>独立性：网孔电流自动满足 KCL，而且相互独立</li>
<li>完备性：电路中所有支路电流都可以用网孔电流来表示</li>
</ul>
</li>
</ul>
</blockquote>
<p>例：</p>
<p><img data-src="01.png" alt="例题"></p>
<h4 id="基本步骤-1"><a href="#基本步骤-1" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol>
<li>指定网孔电流的参考方向，并以此作为列写 KVL 方程的回路绕行方向</li>
<li>根据 KVL 列写关于网孔电流的电路方程</li>
</ol>
<p>如上图：<br>$$<br>\begin{cases}<br>R_1I_{m1}+R_5(I_{m1}-I_{m2})+U_{s4}+R_4(I_{m1}-I_{m3})-U_{s1}=0 \<br>R_2I_{m2}+U_{s2}+R_6(I_{m2}-I_{m3})+R_5(I_{m2}-I_{m1})=0 \<br>R_4(I_{m3}-I_{m1})-U_{s4}+R_6(I_{m3}-I_{m2})-U_{s3}+R_3I_{m3}=0 \<br>\end{cases}<br>$$</p>
<p>$$<br>\begin{matrix}<br>\Downarrow<br>\end{matrix}<br>$$</p>
<p>$$<br>\begin{cases}<br>(R_1+R_5+R_4)I_{m1}-R_5I_{m2}-R_4I_{m3}=U_{s1}-U_{s4} \<br>-R_5I_{m1}+(R_2+R_5+R_6)I_{m2}-R_6I_{m3}=-U_{s2} \<br>-R_4I_{m1}-R_6I_{m2}+(R_3+R_4+R_6)I_{m3}=U_{s3}+U_{s4} \<br>\end{cases}<br>$$</p>
<p>$$<br>\begin{matrix}<br>\Downarrow<br>\end{matrix}<br>$$</p>
<p>$$<br>\begin{bmatrix}<br>R_1+R_4+R_5 &amp; -R_5 &amp; -R_4 \<br>-R_5 &amp; R_2+R_5+R_6 &amp; -R_6 \<br>-R_4 &amp; -R_6 &amp; R_3+R_4+R_6<br>\end{bmatrix}<br>\begin{bmatrix}<br>I_{m1} \<br>I_{m2} \<br>I_{m3}<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>U_{s1}-U_{s4} \<br>-U_{s2} \<br>U_{s3}+U_{s4} \<br>\end{bmatrix}<br>$$</p>
<h4 id="网孔电流方程的一般形式"><a href="#网孔电流方程的一般形式" class="headerlink" title="网孔电流方程的一般形式"></a>网孔电流方程的一般形式</h4><p>$$<br>\begin{bmatrix}<br>R_{11} &amp; R_{12} &amp; R_{13} \<br>R_{21} &amp; R_{22} &amp; R_{23} \<br>R_{31} &amp; R_{32} &amp; R_{33} \<br>\end{bmatrix}<br>\begin{bmatrix}<br>I_{m1} \<br>I_{m2} \<br>I_{m3}<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>U_{s11} \<br>U_{s22} \<br>U_{s33} \<br>\end{bmatrix}<br>$$</p>
<p>解释：</p>
<ul>
<li><p>系数矩阵主对角线上的元素：$R_{ij}(i=j)$ 称为<strong>自电阻</strong>，为第 $i$ 个网孔中各支路的电阻之和，<strong>值恒为正</strong></p>
<blockquote>
<p>如上图中的：</p>
<p>$R_{11}=R_1+R_4+R_5$</p>
<p>$R_{22}=R_2+R_5+R_6$</p>
<p>$R_{33}=R_3+R_4+R_6$</p>
</blockquote>
</li>
<li><p>系数矩阵非主对角线上的元素：$R_{ij}(i\not=j)$ 称为<strong>互电阻</strong>，为第 $i$ 个与第 $j$ 个网孔之间公共支路的电阻之和，值可正可负，<strong>当相邻网孔电流在公共支路上流向一致为正，不一致时为负</strong>。</p>
</li>
<li><p>不含受控源的电路系数矩阵为对称阵。</p>
</li>
<li><p>$U_{sii}$ 为第 $i$ 个网孔中的<strong>等效电压源</strong>，其值为该网孔中各支路电压源电压值的代数和。<strong>当电压源方向与绕行方向一致时取负，不一致时取正</strong> （这是由于把电压源由方程左端搬到方程右端所导致的）。</p>
</li>
</ul>
<h4 id="网孔电流法的分析步骤"><a href="#网孔电流法的分析步骤" class="headerlink" title="网孔电流法的分析步骤"></a>网孔电流法的分析步骤</h4><p>一般电路<strong>（电路中仅含电压源）</strong>的网孔法：</p>
<ol>
<li><p>选取各网孔电流绕行方向</p>
</li>
<li><p>利用直接观察法（自电阻、互电阻、等效电源）形成方程</p>
<blockquote>
<p>$$<br>\begin{aligned}<br>\sum(\text{自电阻}\times\text{本网孔电流})\pm\sum{(\text{互电阻}\times\text{相邻网孔电流})} \<br>=\sum{\text{本网孔电压源代数和}}<br>\end{aligned}<br>$$</p>
</blockquote>
</li>
<li><p>方程求解</p>
</li>
</ol>
<h2 id="含理想电流源支路的网孔电流法"><a href="#含理想电流源支路的网孔电流法" class="headerlink" title="含理想电流源支路的网孔电流法"></a>含理想电流源支路的网孔电流法</h2><p>第一类：含实际电流源：电源等效变换，按一般电路网孔电流分析方法进行电路分析</p>
<p>第二类：含理想电流源，分以下两种情况</p>
<ol>
<li><p>理想电流源支路位于网孔边沿支路（网孔电流等于电流源电流）</p>
<p><img data-src="02.png" alt="case1"></p>
<blockquote>
<ul>
<li>选取网孔电流绕行方向，其中含理想电流源支路的网孔为已知量 $$I_{m2}=-I_s$$</li>
<li>对不含电流源支路的网孔根据直接观察法列方程：$$(R_1+R_3)I_{m1}-R_3I_{m2}=U_s$$</li>
<li>注意：若对含理想电流源支路的网孔列网孔电流方程时必须考虑理想电流源的端电压</li>
</ul>
</blockquote>
</li>
<li><p>理想电流源支路位于网孔公共支路</p>
<p><img data-src="03.png" alt="case2"></p>
<blockquote>
<ul>
<li><p>选取网孔电流绕行方向，虚设电流源电压 $U$</p>
</li>
<li><p>根据直接观察法列方程：<br>$$<br>\begin{cases}<br>(R_1+R_2)I_{m1}-R_2I_{m2}+U=U_s \<br>-R_2+(R_2+R_3)I_{m2}-U=0 \<br>\end{cases}<br>$$</p>
</li>
<li><p>添加约束方程：$$I_{m2}-I_{m1}=I_s$$</p>
</li>
<li><p>求解</p>
</li>
</ul>
</blockquote>
<p><del>为啥我觉得直接列 KCL 和 KVL 方程更简单直接呢？</del></p>
</li>
</ol>
<h2 id="含受控源电路的网孔电流法"><a href="#含受控源电路的网孔电流法" class="headerlink" title="含受控源电路的网孔电流法"></a>含受控源电路的网孔电流法</h2><p>注意：系数矩阵不再是对称矩阵</p>
<h2 id="含理想电流源支路的回路电流法"><a href="#含理想电流源支路的回路电流法" class="headerlink" title="含理想电流源支路的回路电流法"></a>含理想电流源支路的回路电流法</h2><p>以回路电流作为电路独立变量进行电路分析的方法称为<strong>回路电流法</strong></p>
<blockquote>
<ul>
<li>适用于多个理想电流源支路的电路</li>
<li>回路电流是在一个回路中连续流动的假想电流</li>
<li>电路中的独立回路数即为网孔数</li>
<li>一个具有 b 条支路和 n 个节点的电路，其独立回路数为 $$(b-n+1)$$</li>
</ul>
</blockquote>
<p><img data-src="04.png" alt="例题"></p>
<p>解：</p>
<ul>
<li><p>适当选取回路，使独立电源支路只有一个回路电流流过：</p>
<p>$$I_{l1}=2A;,I_{l2}=3A;,I_{l3}=1A$$</p>
</li>
<li><p>对回路 4 列写回路电流方程：</p>
<p>$$<br>\begin{matrix}<br>-2I_{l1}-2I_{l2}+3I_{l3}+5I_{l4}&amp;=5+1+3 \<br>&amp;\Rightarrow I_{l4}=3.2A \<br>\therefore I=I_{l4}=3.2A<br>\end{matrix}<br>$$</p>
</li>
</ul>
<h2 id="一般电路的节点电压法"><a href="#一般电路的节点电压法" class="headerlink" title="一般电路的节点电压法"></a>一般电路的节点电压法</h2><ul>
<li>以独立节点的电压作为独立变量，根据 KCL 列出关于节点电压的电路方程，进行求解的过程</li>
<li>节点电压法适用于结构复杂、非平面电路、独立回路选择麻烦、以及节点少、回路多的电路的分析求解。</li>
</ul>
<blockquote>
<p>节点电压：</p>
<p>在电路中任意选择一个节点为参考节点（也称非独立节点）. 其它节点即为独立节点。独立节点与参考点之间的电压,称为该节点的节点电压. </p>
<p>节点电压的两个特点：</p>
<ul>
<li><p>独立性：节点电压自动满足 KVL，且相互独立</p>
</li>
<li><p>完备性：电路中所有支路电压都可以用节点电压表示</p>
</li>
</ul>
</blockquote>
<h3 id="节点电压方程的一般形式"><a href="#节点电压方程的一般形式" class="headerlink" title="节点电压方程的一般形式"></a>节点电压方程的一般形式</h3><p>$$<br>\begin{bmatrix}<br>G_{11} &amp; G_{12} &amp; G_{13} \<br>G_{21} &amp; G_{22} &amp; G_{23} \<br>G_{31} &amp; G_{32} &amp; G_{33} \<br>\end{bmatrix}<br>\begin{bmatrix}<br>U_{n1} \<br>U_{n2} \<br>U_{n3}<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>I_{s11} \<br>I_{s22} \<br>I_{s33} \<br>\end{bmatrix}<br>$$</p>
<p>解释：</p>
<ul>
<li><p>系数矩阵主对角线上的元素：$G_{ij}(i=j)$ 称为<strong>自电导</strong>，为连接到第 $i$ 个节点中各支路的电导之和，<strong>值恒为正</strong></p>
</li>
<li><p>系数矩阵非主对角线上的元素：$G_{ij}(i\not=j)$ 称为<strong>互电导</strong>，为连接于节点 $i$ 个与节点 $j$ 之间支路上的电导之和，<strong>值恒为负</strong>。</p>
</li>
<li><p>不含受控源的电路系数矩阵为对称阵。</p>
</li>
<li><p>$I_{sii}$ 为流入第 $i$ 个节点的各支路电流源电流值代数和。<strong>流入取正，流出取负</strong> （这是由于把电流源由方程左端搬到方程右端所导致的）。</p>
</li>
</ul>
<h3 id="节点电压法的分析步骤"><a href="#节点电压法的分析步骤" class="headerlink" title="节点电压法的分析步骤"></a>节点电压法的分析步骤</h3><ol>
<li><p>指定电路中某一节点为参考点，标出各独立节点电位（符号）</p>
</li>
<li><p>利用直接观察法形成方程</p>
<blockquote>
<p>$$<br>\begin{aligned}<br>\sum(自电导\times本节点电压)-\sum{(互电导\times相邻节点电压)} \<br>=\sum{流入本节点的电流源代数和（流入节点取正，流出取负）} \<br>\end{aligned}<br>$$</p>
<p>列写第 n 个节点电压方程时</p>
<ul>
<li><p>与 n 节点相连接的支路上的电阻元件的电导之和（自电导）一律取 “+” 号</p>
</li>
<li><p>与 n 节点相关联支路的电阻元件的电导（互电导）一律取 “-” 号。流入 n 节点的理想电流源的电流取 “+” 号，流出的取 “-” 号。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>方程求解</p>
</li>
</ol>
<h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p><img data-src="05.png" alt="例题"></p>
<p><img data-src="06.png" alt="例题"></p>
]]></content>
      <categories>
        <category>电路</category>
      </categories>
      <tags>
        <tag>电路</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客踩坑</title>
    <url>/posts/hexo-bo-ke-cai-keng/</url>
    <content><![CDATA[<h2 id="TOC-锚点-undefined"><a href="#TOC-锚点-undefined" class="headerlink" title="TOC 锚点 undefined"></a>TOC 锚点 undefined</h2><p>最近使用 hexo 搭了一个博客，然而在写文章测试后发现，文章的导航栏不能正常使用：导航栏的生成是正常的，但是在点击导航栏后并不能跳转到文章的对应位置，而是在网址后面多了一个 <code>/#undefined</code>，如图：</p>
<p><img data-src="undefined.png" alt="undefined"></p>
<p>TOC 跳转链接应该是与文章标题对应的，但是 <code>.md</code> 渲染后文章标题并没有对应相应的 id，如果渲染正确，我们期望得到的是：</p>
<p><code>.../#[标题]</code></p>
<p>现在基本上可以确认是 TOC 锚点失败造成的。</p>
<h3 id="markdown-it-插件的-bug"><a href="#markdown-it-插件的-bug" class="headerlink" title="markdown-it 插件的 bug"></a>markdown-it 插件的 bug</h3><p>我的博客是由 markdown-it 渲染的，由于 Markdown-it 的插件并未渲染 heading 的 id 所以导致锚点失效，这个是 <a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a> 的 bug，但是 markdown-it 的作者拒绝修复，认为是其他库的坑。</p>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h3><p>安装 markdown-it-named-headings 插件</p>
<p>这个插件是另外一个大佬针对这个 bug 做的一个修复</p>
<p>首先安装它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install markdown-it-named-headings --save</span><br></pre></td></tr></table></figure>

<p>然后进入你项目的根目录，修改根目录下 <code>node_modules\hexo-renderer-markdown-it\lib\renderer.js</code> 文件，在 <code>renderer.js</code> 中添加一行以使用此插件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parser.use(<span class="built_in">require</span>(<span class="string">&#x27;markdown-it-named-headings&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>就像下面这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">data, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> MdIt = <span class="built_in">require</span>(<span class="string">&#x27;markdown-it&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> cfg = <span class="built_in">this</span>.config.markdown;</span><br><span class="line">  <span class="keyword">var</span> opt = (cfg) ? cfg : <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> parser = (opt === <span class="string">&#x27;default&#x27;</span> || opt === <span class="string">&#x27;commonmark&#x27;</span> || opt === <span class="string">&#x27;zero&#x27;</span>) ?</span><br><span class="line">    <span class="keyword">new</span> MdIt(opt) :</span><br><span class="line">    <span class="keyword">new</span> MdIt(opt.render);</span><br><span class="line"></span><br><span class="line">  parser.use(<span class="built_in">require</span>(<span class="string">&#x27;markdown-it-named-headings&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (opt.plugins) &#123;</span><br><span class="line">    parser = opt.plugins.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">parser, pugs</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> parser.use(<span class="built_in">require</span>(pugs));</span><br><span class="line">    &#125;, parser);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (opt.anchors) &#123;</span><br><span class="line">    parser = parser.use(<span class="built_in">require</span>(<span class="string">&#x27;./anchors&#x27;</span>), opt.anchors);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parser.render(data.text);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有很多人用这种方法解决了问题，然而事实证明这种方法并不适合我○|￣|_，我用了之后并没有什么改善，最后是用下面的方法 2 解决的</p>
<p>不过大家有兴趣的可以尝试一下，说不定就成功了呢？</p>
<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h3><p>经过简单的排查，发现现在编译出的HTML内容中，如下的 markdown 标题：</p>
<p><code>## title</code></p>
<p>原来会被编译成 <code>&lt;h2 id=&quot;title&quot;&gt;title&lt;/h2&gt;</code></p>
<p>而现在会被编译成 <code>&lt;h2&gt;&lt;span id=&quot;title&quot;&gt;title&lt;/span&gt;&lt;/h2&gt;</code></p>
<p>推测因此导致了生成 TOC 时，H2 元素的 id 属性为未定义，进而导致 TOC 中的锚点也为未定义的问题。</p>
<p>以上的变更，是包 hexo-toc 的变更导致的，具体应该是这次<a target="_blank" rel="noopener" href="https://github.com/bubkoo/hexo-toc/blob/7c9624c2d3fb7d13ce973cb8de4dc10ff865c089/lib/filter.js#L28">提交</a>。</p>
<p>但是目前仅仅是初步排查，暂时没有确定问题就是出在hexo-toc上，仅仅是认为这个修改可能会导致后续某些生成toc的代码的不兼容。</p>
<p>因此目前阶段，进入你项目根目录的 <code>node_modules\hexo-toc\lib\filter.js</code> 中，把28行~31行修改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$title.attr(<span class="string">&#x27;id&#x27;</span>, id);</span><br><span class="line"><span class="comment">// $title.children(&#x27;a&#x27;).remove();</span></span><br><span class="line"><span class="comment">// $title.html( &#x27;&lt;span id=&quot;&#x27; + id + &#x27;&quot;&gt;&#x27; + $title.html() + &#x27;&lt;/span&gt;&#x27; );</span></span><br><span class="line"><span class="comment">// $title.removeAttr(&#x27;id&#x27;);</span></span><br></pre></td></tr></table></figure>

<p>也就是恢复这次提交，保留旧版本，仅保留28行，其他的内容注释掉。</p>
<p>这样的话，生成的TOC应该就是正常的了。</p>
<p>ps：另外需要注意的是，编译的 markdown 貌似有缓存，因此修改后，你可以再新建一篇文章后再生成，用新文章测试以上手段是否有效修复。旧文章由于缓存问题，可能不会生成新的 HTML（这部分也只是看到现象，暂时没有进行详细了解）。如果新文章确实能够修复此问题，再处理旧文章即可。</p>
<h3 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h3><p>实际上这是由包 <code>hexo-toc</code> 引起的问题。这个包更新之后产生了不兼容的情况。有些童鞋没有这个问题可能是因为你使用的是旧版本。</p>
<p>在上面提到的 hexo-toc 的提交中，在 HTML 生成前， <code>hexo-toc</code> 去掉了 <code>&lt;h2&gt;</code> 等标签的 id 属性，将其放入内部新生成的 <code>&lt;span&gt;...&lt;/span&gt;</code> 中。而 hexo 本身生成 toc 的时候，取得仍是 <code>&lt;h2&gt;</code> 标签的 id，因此得到的是 <code>undefined</code>。具体代码在<a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo/blob/master/lib/plugins/helper/toc.js#L27">这里</a></p>
<p>在这里做兼容的修复应该也是可以的，不过我并没有尝试，有兴趣的可以尝试一下。</p>
<h2 id="添加置顶"><a href="#添加置顶" class="headerlink" title="添加置顶"></a>添加置顶</h2><p>运行如下两条命令安装置顶插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>然后打开 <code>blog\themes\beantech\layout\index.ejs</code> ，在如下位置添加：</p>
<p><img data-src="posttop.png" alt="posttop"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (post.top) &#123;%&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;font color&#x3D;7D26CD&gt;置顶&lt;&#x2F;font&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>

<p>然后在你想置顶的文章md文件里，添加如下配置选项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="添加-Gittalk-评论插件"><a href="#添加-Gittalk-评论插件" class="headerlink" title="添加 Gittalk 评论插件"></a>添加 Gittalk 评论插件</h2><p>之前试过 Disqus，并不好用，而且界面也并不好看，这次换成了 <a target="_blank" rel="noopener" href="https://github.com/gitalk/gitalk">Gitalk</a> 插件感觉好多了，最大的亮点应该是支持 markdown 语法了。它的评论界面大概长这样：</p>
<p><img data-src="gitalk.png" alt="gitalk"></p>
<p>评论时需要登陆 github 账号，每一次评论都相当于用你的 github 账号在每篇文章对应的 issue 上提问题：</p>
<p><img data-src="issue.png" alt="issue"></p>
<h3 id="配置-Gitalk"><a href="#配置-Gitalk" class="headerlink" title="配置 Gitalk"></a>配置 Gitalk</h3><p>好，现在我们根据 Gitalk 的<a target="_blank" rel="noopener" href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">官方文档</a>，来对网站进行配置，首先找到你自己网站的配置文章的部分，我这里是 <code>\themes\beantech\layout\post.ejs</code>，在和文章同一个 <code>&lt;div&gt;</code> 下（当然，要在文章的下方）添加 gitalk 的代码，这点很重要，否则最后配置好以后你的评论框的位置和大小会变得很奇怪。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Gitalk start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitalk-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="javascript">      clientID: <span class="string">&#x27;GitHub Application Client ID&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      clientSecret: <span class="string">&#x27;GitHub Application Client Secret&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      repo: <span class="string">&#x27;GitHub 仓库的名字&#x27;</span>,  <span class="comment">//如 &#x27;convivae.github.io&#x27;</span></span></span><br><span class="line"><span class="javascript">      owner: <span class="string">&#x27;GitHub repository 所有者&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      admin: [<span class="string">&#x27;对这个 repository 有写权限的用户&#x27;</span>], <span class="comment">//这是个字符串数组，可填写多个</span></span></span><br><span class="line"><span class="javascript">      id: location.pathname,      <span class="comment">// 页面的唯一标识。长度必须小于50，默认是文章路径</span></span></span><br><span class="line"><span class="javascript">      distractionFreeMode: <span class="literal">true</span>  <span class="comment">// 类似Facebook评论框的全屏遮罩效果.</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    gitalk.render(<span class="string">&#x27;gitalk-container&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Gitalk end --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="申请-GitHub-Application"><a href="#申请-GitHub-Application" class="headerlink" title="申请 GitHub Application"></a>申请 GitHub Application</h3><p>上述的代码中需要使用 GitHub Application，如果没有 <a target="_blank" rel="noopener" href="https://github.com/settings/applications/new">点击这里申请</a>，填写方式与下面类似</p>
<p><img data-src="oauth.png" alt="oauth"></p>
<p>注册之后就得到了 Client ID 和 Client Secret，填入上面的代码中即可。</p>
<h3 id="label-长度不能超过-50-个字符"><a href="#label-长度不能超过-50-个字符" class="headerlink" title="label 长度不能超过 50 个字符"></a>label 长度不能超过 50 个字符</h3><p>这是 Github 的限制，我们的 id 使用的是文章的相对路径，路径中含有标题。所以一种解决方案是文章标题短一点；另一种解决方案是对路径算 hash，通过 MD5 加密 id 来缩短label长度，这样，不论标题多长都没有问题。具体操作如下：<br>从 github 上 <a target="_blank" rel="noopener" href="https://github.com/blueimp/JavaScript-MD5/tree/master/js">下载</a> <code>md5.min.js</code> 文件，或直接在 <code>themes\beantech\source\js</code> 中创建 <code>md5.min.js</code> 文件并复制下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">n, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = (<span class="number">65535</span> &amp; n) + (<span class="number">65535</span> &amp; t);</span><br><span class="line">        <span class="keyword">return</span> (n &gt;&gt; <span class="number">16</span>) + (t &gt;&gt; <span class="number">16</span>) + (r &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">16</span> | <span class="number">65535</span> &amp; r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">n, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &lt;&lt; t | n &gt;&gt;&gt; <span class="number">32</span> - t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n, e, o, u, c, f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t(r(t(t(e, n), t(u, f)), c), o)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">n, t, r, o, u, c, f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e(t &amp; r | ~t &amp; o, n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">n, t, r, o, u, c, f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e(t &amp; o | r &amp; ~o, n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">n, t, r, o, u, c, f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e(t ^ r ^ o, n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n, t, r, o, u, c, f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e(r ^ (t | ~o), n, t, u, c, f)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">        n[r &gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; r % <span class="number">32</span>, n[<span class="number">14</span> + (r + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>)] = r;</span><br><span class="line">        <span class="keyword">var</span> e, i, a, d, h, l = <span class="number">1732584193</span>,</span><br><span class="line">            g = -<span class="number">271733879</span>,</span><br><span class="line">            v = -<span class="number">1732584194</span>,</span><br><span class="line">            m = <span class="number">271733878</span>;</span><br><span class="line">        <span class="keyword">for</span> (e = <span class="number">0</span>; e &lt; n.length; e += <span class="number">16</span>) i = l, a = g, d = v, h = m, g = f(g = f(g = f(g = f(g = c(g = c(g = c(g = c(g = u(g = u(g = u(g = u(g = o(g = o(g = o(g = o(g, v = o(v, m = o(m, l = o(l, g, v, m, n[e], <span class="number">7</span>, -<span class="number">680876936</span>), g, v, n[e + <span class="number">1</span>], <span class="number">12</span>, -<span class="number">389564586</span>), l, g, n[e + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>), m, l, n[e + <span class="number">3</span>], <span class="number">22</span>, -<span class="number">1044525330</span>), v = o(v, m = o(m, l = o(l, g, v, m, n[e + <span class="number">4</span>], <span class="number">7</span>, -<span class="number">176418897</span>), g, v, n[e + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>), l, g, n[e + <span class="number">6</span>], <span class="number">17</span>, -<span class="number">1473231341</span>), m, l, n[e + <span class="number">7</span>], <span class="number">22</span>, -<span class="number">45705983</span>), v = o(v, m = o(m, l = o(l, g, v, m, n[e + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>), g, v, n[e + <span class="number">9</span>], <span class="number">12</span>, -<span class="number">1958414417</span>), l, g, n[e + <span class="number">10</span>], <span class="number">17</span>, -<span class="number">42063</span>), m, l, n[e + <span class="number">11</span>], <span class="number">22</span>, -<span class="number">1990404162</span>), v = o(v, m = o(m, l = o(l, g, v, m, n[e + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>), g, v, n[e + <span class="number">13</span>], <span class="number">12</span>, -<span class="number">40341101</span>), l, g, n[e + <span class="number">14</span>], <span class="number">17</span>, -<span class="number">1502002290</span>), m, l, n[e + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>), v = u(v, m = u(m, l = u(l, g, v, m, n[e + <span class="number">1</span>], <span class="number">5</span>, -<span class="number">165796510</span>), g, v, n[e + <span class="number">6</span>], <span class="number">9</span>, -<span class="number">1069501632</span>), l, g, n[e + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>), m, l, n[e], <span class="number">20</span>, -<span class="number">373897302</span>), v = u(v, m = u(m, l = u(l, g, v, m, n[e + <span class="number">5</span>], <span class="number">5</span>, -<span class="number">701558691</span>), g, v, n[e + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>), l, g, n[e + <span class="number">15</span>], <span class="number">14</span>, -<span class="number">660478335</span>), m, l, n[e + <span class="number">4</span>], <span class="number">20</span>, -<span class="number">405537848</span>), v = u(v, m = u(m, l = u(l, g, v, m, n[e + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>), g, v, n[e + <span class="number">14</span>], <span class="number">9</span>, -<span class="number">1019803690</span>), l, g, n[e + <span class="number">3</span>], <span class="number">14</span>, -<span class="number">187363961</span>), m, l, n[e + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>), v = u(v, m = u(m, l = u(l, g, v, m, n[e + <span class="number">13</span>], <span class="number">5</span>, -<span class="number">1444681467</span>), g, v, n[e + <span class="number">2</span>], <span class="number">9</span>, -<span class="number">51403784</span>), l, g, n[e + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>), m, l, n[e + <span class="number">12</span>], <span class="number">20</span>, -<span class="number">1926607734</span>), v = c(v, m = c(m, l = c(l, g, v, m, n[e + <span class="number">5</span>], <span class="number">4</span>, -<span class="number">378558</span>), g, v, n[e + <span class="number">8</span>], <span class="number">11</span>, -<span class="number">2022574463</span>), l, g, n[e + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>), m, l, n[e + <span class="number">14</span>], <span class="number">23</span>, -<span class="number">35309556</span>), v = c(v, m = c(m, l = c(l, g, v, m, n[e + <span class="number">1</span>], <span class="number">4</span>, -<span class="number">1530992060</span>), g, v, n[e + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>), l, g, n[e + <span class="number">7</span>], <span class="number">16</span>, -<span class="number">155497632</span>), m, l, n[e + <span class="number">10</span>], <span class="number">23</span>, -<span class="number">1094730640</span>), v = c(v, m = c(m, l = c(l, g, v, m, n[e + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>), g, v, n[e], <span class="number">11</span>, -<span class="number">358537222</span>), l, g, n[e + <span class="number">3</span>], <span class="number">16</span>, -<span class="number">722521979</span>), m, l, n[e + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>), v = c(v, m = c(m, l = c(l, g, v, m, n[e + <span class="number">9</span>], <span class="number">4</span>, -<span class="number">640364487</span>), g, v, n[e + <span class="number">12</span>], <span class="number">11</span>, -<span class="number">421815835</span>), l, g, n[e + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>), m, l, n[e + <span class="number">2</span>], <span class="number">23</span>, -<span class="number">995338651</span>), v = f(v, m = f(m, l = f(l, g, v, m, n[e], <span class="number">6</span>, -<span class="number">198630844</span>), g, v, n[e + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>), l, g, n[e + <span class="number">14</span>], <span class="number">15</span>, -<span class="number">1416354905</span>), m, l, n[e + <span class="number">5</span>], <span class="number">21</span>, -<span class="number">57434055</span>), v = f(v, m = f(m, l = f(l, g, v, m, n[e + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>), g, v, n[e + <span class="number">3</span>], <span class="number">10</span>, -<span class="number">1894986606</span>), l, g, n[e + <span class="number">10</span>], <span class="number">15</span>, -<span class="number">1051523</span>), m, l, n[e + <span class="number">1</span>], <span class="number">21</span>, -<span class="number">2054922799</span>), v = f(v, m = f(m, l = f(l, g, v, m, n[e + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>), g, v, n[e + <span class="number">15</span>], <span class="number">10</span>, -<span class="number">30611744</span>), l, g, n[e + <span class="number">6</span>], <span class="number">15</span>, -<span class="number">1560198380</span>), m, l, n[e + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>), v = f(v, m = f(m, l = f(l, g, v, m, n[e + <span class="number">4</span>], <span class="number">6</span>, -<span class="number">145523070</span>), g, v, n[e + <span class="number">11</span>], <span class="number">10</span>, -<span class="number">1120210379</span>), l, g, n[e + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>), m, l, n[e + <span class="number">9</span>], <span class="number">21</span>, -<span class="number">343485551</span>), l = t(l, i), g = t(g, a), v = t(v, d), m = t(m, h);</span><br><span class="line">        <span class="keyword">return</span> [l, g, v, m]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t, r = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            e = <span class="number">32</span> * n.length;</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; e; t += <span class="number">8</span>) r += <span class="built_in">String</span>.fromCharCode(n[t &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; t % <span class="number">32</span> &amp; <span class="number">255</span>);</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t, r = [];</span><br><span class="line">        <span class="keyword">for</span> (r[(n.length &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>] = <span class="keyword">void</span> <span class="number">0</span>, t = <span class="number">0</span>; t &lt; r.length; t += <span class="number">1</span>) r[t] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">8</span> * n.length;</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; e; t += <span class="number">8</span>) r[t &gt;&gt; <span class="number">5</span>] |= (<span class="number">255</span> &amp; n.charCodeAt(t / <span class="number">8</span>)) &lt;&lt; t % <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a(i(d(n), <span class="number">8</span> * n.length))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">n, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r, e, o = d(n),</span><br><span class="line">            u = [],</span><br><span class="line">            c = [];</span><br><span class="line">        <span class="keyword">for</span> (u[<span class="number">15</span>] = c[<span class="number">15</span>] = <span class="keyword">void</span> <span class="number">0</span>, o.length &gt; <span class="number">16</span> &amp;&amp; (o = i(o, <span class="number">8</span> * n.length)), r = <span class="number">0</span>; r &lt; <span class="number">16</span>; r += <span class="number">1</span>) u[r] = <span class="number">909522486</span> ^ o[r], c[r] = <span class="number">1549556828</span> ^ o[r];</span><br><span class="line">        <span class="keyword">return</span> e = i(u.concat(d(t)), <span class="number">512</span> + <span class="number">8</span> * t.length), a(i(c.concat(e), <span class="number">640</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t, r, e = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; n.length; r += <span class="number">1</span>) t = n.charCodeAt(r), e += <span class="string">&quot;0123456789abcdef&quot;</span>.charAt(t &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>) + <span class="string">&quot;0123456789abcdef&quot;</span>.charAt(<span class="number">15</span> &amp; t);</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">v</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(n))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h(v(n))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> g(m(n))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">n, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l(v(n), v(t))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">n, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> g(s(n, t))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">n, t, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t ? r ? s(t, n) : C(t, n) : r ? m(n) : p(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> define &amp;&amp; define.amd ? define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line">    &#125;) : <span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.exports ? <span class="built_in">module</span>.exports = A : n.md5 = A</span><br><span class="line">&#125;(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//# sourceMappingURL=md5.min.js.map</span></span><br></pre></td></tr></table></figure>

<p>保存文件，进入 <code>\themes\beantech\layout\post.ejs</code> ，将上面 Gitalk 的代码略做修改：</p>
<p>添加一行：</p>
<p><code>&lt;script src=&quot;/js/md5.min.js&quot;&gt;&lt;/script&gt;</code></p>
<p>并将：</p>
<p> <code>id: location.pathname,</code></p>
<p>修改为：</p>
<p><code>id: md5(location.pathname),</code></p>
<p>类似下面这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Gitalk start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitalk-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/md5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="javascript">      clientID: <span class="string">&#x27;GitHub Application Client ID&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      clientSecret: <span class="string">&#x27;GitHub Application Client Secret&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      repo: <span class="string">&#x27;GitHub 仓库的名字&#x27;</span>,  <span class="comment">//如 &#x27;convivae.github.io&#x27;</span></span></span><br><span class="line"><span class="javascript">      owner: <span class="string">&#x27;GitHub repository 所有者&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      admin: [<span class="string">&#x27;对这个 repository 有写权限的用户&#x27;</span>], <span class="comment">//这是个字符串数组，可填写多个</span></span></span><br><span class="line"><span class="javascript">      id: md5(location.pathname),      <span class="comment">// 页面的唯一标识。长度必须小于50，默认是文章路径</span></span></span><br><span class="line"><span class="javascript">      distractionFreeMode: <span class="literal">true</span>  <span class="comment">// 类似Facebook评论框的全屏遮罩效果.</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    gitalk.render(<span class="string">&#x27;gitalk-container&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Gitalk end --&gt;</span></span><br></pre></td></tr></table></figure>

<p>到此，当你将代码推送到 Github 仓库后，进入你的博客就能看到出现评论框了。</p>
<h3 id="自动初始化-Gitalk-和-Gitment-评论"><a href="#自动初始化-Gitalk-和-Gitment-评论" class="headerlink" title="自动初始化 Gitalk 和 Gitment 评论"></a>自动初始化 Gitalk 和 Gitment 评论</h3><p>需要说明的是，Gitalk 需要你点开每篇文章的页面才会创建对应的 issue，对于文章比较多又比较懒的人来说并不友好，你可以参照这篇 <a target="_blank" rel="noopener" href="https://convivae.github.io/posts/zi-dong-chu-shi-hua-gitalk-he-gitment-ping-lun/">自动初始化 Gitalk 和 Gitment 评论</a> 进行设置。</p>
<h2 id="添加图片放大功能"><a href="#添加图片放大功能" class="headerlink" title="添加图片放大功能"></a>添加图片放大功能</h2><p>两种方案，<a target="_blank" rel="noopener" href="https://desmonding.me/zooming/docs/#/">zooming</a> 或 <a target="_blank" rel="noopener" href="https://github.com/fancyapps/fancyBox">fancybox</a></p>
<h3 id="zooming"><a href="#zooming" class="headerlink" title="zooming"></a>zooming</h3><p>首先下载 <code>zooming.js</code> 的文件 <a target="_blank" rel="noopener" href="https://github.com/kingdido999/zooming/tree/master/build/zooming.js">地址</a>，保存在 <code>themes\beantech\source\js</code> 目录下，打开 <code>themes\beantech\layout\post.ejs</code>，在最下方粘贴：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/zooming.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>或者，直接用 <code>npm</code> 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install zooming --save</span><br></pre></td></tr></table></figure>

<p>然后打开 <code>themes\beantech\layout\post.ejs</code>，在最下方粘贴：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;node_modules/zooming/build/zooming.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.md</code> 文件中引入图片时，在需要进行缩放的图片上内敛 <code>html</code> 语法，加上 <code>data-action=&quot;zoom&quot;</code> ，经典的 markdown 语法 <code>![img caption](img url)</code> 不能实现该功能（至少我目前不能，如果你知道怎么实现，请告诉我）</p>
<p>类似下面这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/some_img.png&quot;</span> <span class="attr">alt</span> = <span class="string">&quot;some_text&quot;</span> <span class="attr">data-action</span>=<span class="string">&quot;zoom&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后文章里的图片即可单击全屏。</p>
<p>你还可以使用 <code>data-original</code> 属性来使放大的图片指向高清大图，类似下面这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/thumbnail.jpg&quot;</span> <span class="attr">data-action</span>=<span class="string">&quot;zoom&quot;</span> <span class="attr">data-original</span>=<span class="string">&quot;img/original.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="添加访客人数统计和字数统计"><a href="#添加访客人数统计和字数统计" class="headerlink" title="添加访客人数统计和字数统计"></a>添加访客人数统计和字数统计</h2><h3 id="访客人数统计"><a href="#访客人数统计" class="headerlink" title="访客人数统计"></a>访客人数统计</h3><p>在 <a target="_blank" rel="noopener" href="http://amazingcounters.com/">amazingcounters</a> 中创建账号并选择合适的样式，将其中的 <code>Standard Code</code> 复制到 <code>themes\beantech\layout\_partial\footer.ejs</code> 下面的位置：</p>
<p><img data-src="footer.png" alt="footer"></p>
<p>注意去掉默认代码中的 <code>&lt;div align=&quot;center&quot;&gt;&lt;/div&gt;</code> 以及 <code>&lt;href = &quot;...&quot;&gt;</code>，这样就能保持博客格式的不变而且不会点击就跳转到他的网站。</p>
<h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>首先安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>

<p>然后在 <code>themes\beantech\layout\_partial\footer.ejs</code> 中添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&lt;%= totalcount(site) %&gt; words altogether<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>具体位置如上图所示。</p>
<h2 id="将博客同时托管到-coding-上"><a href="#将博客同时托管到-coding-上" class="headerlink" title="将博客同时托管到 coding 上"></a>将博客同时托管到 coding 上</h2><p>github 由于服务器位于国外，国内的访问速度很慢，造成了非常不好的体验，我们可以同时部署到国内的托管平台 coding.net 上来加快国内的访问速度。</p>
<h3 id="coding-的准备工作"><a href="#coding-的准备工作" class="headerlink" title="coding 的准备工作"></a>coding 的准备工作</h3><p>进入 <a target="_blank" rel="noopener" href="https://coding.net/">coding</a>，点击个人版登录，注册并登陆账户，如果你之前注册过腾讯云的服务，会自动跳转到腾讯云开发者平台，进入控制台，新建一个项目，填写项目名称（最好与用户名一致）、项目地址进行创建，进入项目，点击 <code>Pages 服务</code>：</p>
<p><img data-src="pages.png" alt="pages"></p>
<p>开启 Pages 功能，分支选 master</p>
<h3 id="自定义域名-amp-域名解析"><a href="#自定义域名-amp-域名解析" class="headerlink" title="自定义域名 &amp; 域名解析"></a>自定义域名 &amp; 域名解析</h3><p>Pages 的设置页面可以设置自定义域名，购买域名之后在域名注册商（比如我的是在阿里云）按照下面图片所示设置 DNS 解析：</p>
<p><img data-src="dns.png" alt="dns"></p>
<p>添加 CNAME 值指向 <code>your-name.coding.net</code> 即可，不必再设置 A 记录，因为 ip 地址可能会变，下面的几个指向境外的是 github 的设置，那几个 ip 地址主要是为了开启 github 的 https 功能，根据 <a target="_blank" rel="noopener" href="https://help.github.com/en/articles/setting-up-an-apex-domain">github 官方</a> 的描述，设置一个（即<code>your-name.github.io</code> 实际指向的那个）即可。注意，不建议开启 coding 的 https 功能，某些浏览器会认为他的证书不安全</p>
<p>之后在本地的 <code>source/CNAME</code> 中填写自己的域名，注意不要加 <code>http://</code> 或 <code>https://</code>，也不要加 <code>www.</code>，因为域名的定义中本身就不包含这些前缀，填写 <code>your-name.xxx</code> 即可</p>
<h3 id="SSH-登陆-coding"><a href="#SSH-登陆-coding" class="headerlink" title="SSH 登陆 coding"></a>SSH 登陆 coding</h3><p>其实上一步完成之后就可以修改 <code>_config.yml</code> 的 <code>deploy</code> 属性进行代码同步了，但是 <code>deploy</code> 时每次都要输入密码很麻烦，所以我们开启一下 <code>SSH公钥</code> 的功能</p>
<p>在 coding 的个人设置中找到 <code>SSH公钥</code>，按照 <a target="_blank" rel="noopener" href="https://dev.tencent.com/help/doc/faq/bbe781aee786/ssh">官方文档</a> 进行配置，如果你之前配置过 github 的 SSH，这一步注意不要无脑回车，在生成路径那里要自己另外设置一个路径，否则你原来 github 的公钥就会被新生成的公钥覆盖掉</p>
<p>打开你的项目，复制上面 SSH 的网址，进入本地根目录下 <code>_config.yml</code>，进行如下的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:your-name/your-name.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@git.dev.tencent.com:your-name/your-name.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>修改其中的ssh地址为你自己项目的地址，然后 <code>hexo clean; hexo g; hexo d</code>，（<code>hexo g; hexo d</code> 可用 <code>hexo d -g</code> 来代替）即可同步更新你的网站到 github 和 coding 了。</p>
<h2 id="to-do-list"><a href="#to-do-list" class="headerlink" title="to do list"></a>to do list</h2><ul>
<li><p>文章分享（微博、微信、空间）链接</p>
</li>
<li><p>更改签名图片</p>
</li>
<li><p>添加邮箱</p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo-renderer-markdown-it/issues/40">hexojs/hexo-renderer-markdown-it #40</a><br><a target="_blank" rel="noopener" href="https://github.com/YenYuHsuan/hexo-theme-beantech/issues/11">hexo-theme-beantech #11</a><br><a target="_blank" rel="noopener" href="https://knightcai.github.io/2017/12/19/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/">为博客添加-Gitalk-评论插件</a><br><a target="_blank" rel="noopener" href="https://godweiyang.com/2018/04/13/hexo-blog/">WeiYang Blog</a></p>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Gitalk</tag>
        <tag>TOC</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记02</title>
    <url>/posts/mybatis-xue-xi-bi-ji-02/</url>
    <content><![CDATA[<h2 id="Mybatis-开发流程图"><a href="#Mybatis-开发流程图" class="headerlink" title="Mybatis 开发流程图"></a>Mybatis 开发流程图</h2><p><img data-src="01.png" alt="Mybatis 开发流程图"></p>
<h2 id="基于代理DAO实现CRUD操作（使用xml配置）"><a href="#基于代理DAO实现CRUD操作（使用xml配置）" class="headerlink" title="基于代理DAO实现CRUD操作（使用xml配置）"></a>基于代理DAO实现CRUD操作（使用xml配置）</h2><blockquote>
<p>使用要求： </p>
<ol>
<li>持久层接口和持久层接口的映射配置必须在相同的包下</li>
<li>持久层映射配置中 mapper 标签的 namespace 属性取值必须是持久层接口的全限定类名</li>
<li>SQL 语句的配置标签 <code>&lt;select&gt;</code>, <code>&lt;insert&gt;</code>, <code>&lt;delete&gt;</code>, <code>&lt;update&gt;</code> 的 id 属性必须和持久层接口的 方法名相同。 </li>
</ol>
</blockquote>
<h3 id="1-持久层接口中的方法"><a href="#1-持久层接口中的方法" class="headerlink" title="1.  持久层接口中的方法"></a>1.  持久层接口中的方法</h3><p><code>com\conv\dao\IUserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  根据id删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称模糊查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总用户数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-用户映射配置文件中的配置"><a href="#2-用户映射配置文件中的配置" class="headerlink" title="2. 用户映射配置文件中的配置"></a>2. 用户映射配置文件中的配置</h3><p><code>com\conv\dao\IUserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是dao的方法名称，不能随便写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--保存用户--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--新增用户后，同时还要返回当前新增用户的 id 值，因为 id 是由数据库的自动增长来实现的，所以就相 当于我们要在新增后将自动增长 auto_increment 的值返回--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">            select last_insert_id();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(username, birthday, sex, address) values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更新用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125;,address=#&#123;address&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125; where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--删除用户--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--parameterType可以写Integer、INT、java.lang.Integer（不区分大小写）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        delete from user where  id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据名称模糊查询用户信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 常用  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--select * from user where username like #&#123;uname&#125;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  不常用，会造成Sql注入 --&gt;</span></span><br><span class="line">        select * from user where username like &#x27;%$&#123;value&#125;%&#x27;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--查询总用户数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTotal&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select count(id) from user ;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>细节：</p>
<ol>
<li><p>resultType 属性</p>
<blockquote>
<p>用于指定结果集的类型</p>
</blockquote>
</li>
<li><p>parameterType 属性</p>
<blockquote>
<p>用于指定传入参数的类型，</p>
<p>若传入的是基本类型：我们可以直接写类型名称 ，也可以使用包名 . 类名的方式 ，如 Integer 类型，可以写<code>Integer</code>、<code>INT</code>、<code>java.lang.Integer</code>等，不区分大小写</p>
<p>若传入的是实体类类型，目前我们只能使用全限定类名。 </p>
<p>究其原因，是 mybaits 在加载时已经把常用的数据类型注册了别名，从而我们在使用时可以不写包名， 而我们的是实体类并没有注册别名，所以必须写全限定类名</p>
</blockquote>
</li>
<li><p>sql 语句中使用<code>#&#123;&#125;</code>字符</p>
<blockquote>
<p>它代表占位符，相当于原来 jdbc 部分所学的 <code>?</code>，都是用于执行语句时替换实际的数据。    </p>
<p>具体的数据是由 <code>#&#123;&#125;</code> 里面的内容决定的。 </p>
</blockquote>
</li>
<li><p><code>#&#123;&#125;</code> 中内容的写法</p>
<blockquote>
<p>根据数据类型的不同，写法也有所不同，当保存方法的参数的数据类型是：</p>
<ol>
<li>基本类型：此处可以随意写</li>
<li> User 对象：此处要写 User 对象中的属性名称。 它用的是 ognl 表达式。 </li>
</ol>
<p>ognl 表达式：   </p>
<p>它是 apache 提供的一种表达式语言，全称是：<code>Object Graphic Navigation Language </code> 对象图导航语言   它是按照一定的语法格式来获取数据的。   </p>
<p>语法格式就是使用  <code>#&#123;对象.对象&#125;</code> 的方式 </p>
<p>比如：我们获取用户的名称：</p>
<ul>
<li>类中的写法：<code>user.getUsername()</code></li>
<li>ONGL表达式的写法：<code>user.username</code></li>
</ul>
<p><code>#&#123;user.username&#125;</code> 它会先去找 user 对象，然后在 user 对象中找到 username 属性，并调用 getUsername()方法把值取出来。</p>
<p>mybatis 中为什么能直接写 <code>username</code>，而不是 <code>user.</code> 呢？</p>
<p>但是我们在 parameterType 属性上指定了实体类名称，所以可以省略 user. 而直接写 username。 </p>
</blockquote>
</li>
</ol>
</li>
</ul>
<h3 id="3-添加测试类中的测试方法"><a href="#3-添加测试类中的测试方法" class="headerlink" title="3. 添加测试类中的测试方法"></a>3. 添加测试类中的测试方法</h3><p>  <code>com\conv\test\MybatisTest.java</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3. 获取SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 获取dao的代理对象</span></span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        <span class="comment">// 若没有此句，打开 Mysql 数据库发现并没有修改任何记录，原因是什么？ </span></span><br><span class="line">        <span class="comment">// 这一点和 jdbc 是一样的，我们在实现增删改时一定要去控制事务的提交</span></span><br><span class="line">        <span class="comment">// 可以使用: session.commit();来实现事务提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 测试查询所有</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFinfAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 测试新增用户</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;saveuser&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;湖北武汉&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行保存方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;保存之前：&quot;</span> + user);</span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;保存之后：&quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 测试更新操作</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">51</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;testUpdate&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京市顺义区&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行更新方法</span></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 测试删除操作</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行更新方法</span></span><br><span class="line">        userDao.deleteUser(<span class="number">71</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 测试查询操作</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        User user = userDao.findById(<span class="number">51</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 测试模糊查询操作</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        <span class="comment">//        List&lt;User&gt; users = userDao.findByName(&quot;%小%&quot;);</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findByName(<span class="string">&quot;小&quot;</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 测试查询总记录条数</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        <span class="keyword">int</span> count = userDao.findTotal();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意</p>
<blockquote>
<p>和 JDBC 一样，我们在实现增删改时一定要去控制事务的提交</p>
<p>在 mybatis 中可以使用 <code>session.commit();</code> 来实现事务提交</p>
</blockquote>
</li>
</ul>
<h3 id="模糊查询的两种方法"><a href="#模糊查询的两种方法" class="headerlink" title="模糊查询的两种方法"></a>模糊查询的两种方法</h3>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据名称模糊查询用户信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 常用  --&gt;</span></span><br><span class="line">    select * from user where username like #&#123;uname&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  不常用，会造成Sql注入 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from user where username like &#x27;%$&#123;value&#125;%&#x27;;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>结论</p>
<p>这两种方式的实现效果是一样的，但执行的语句是不一样的。 </p>
</li>
</ul>
<ol>
<li><p>select * from user where username like #{uname};`</p>
<p>对应的查询方法需要加上<code>%</code>：</p>
<p><code>List&lt;User&gt; users = userDao.findByName(&quot;%小%&quot;);</code></p>
<p>在控制台输出的执行 SQL 语句如下：</p>
<blockquote>
<p>Preparing: select * from user where username like ?<br>Parameters: %小%(String)</p>
</blockquote>
<p>使用的是 <code>Preparedstatement</code>，不会造成 SQL 注入问题</p>
</li>
<li><p><code>select * from user where username like &#39;%$&#123;value&#125;%&#39;;</code></p>
<p>对应的方法无需加<code>%</code>：</p>
<p><code>List&lt;User&gt; users = userDao.findByName(&quot;小&quot;); </code></p>
<p>在控制台输出的执行 SQL 语句如下：</p>
<blockquote>
<p>Preparing: select * from user where username like ‘%小%’; </p>
<p>Parameters: </p>
</blockquote>
<p>即直接拼接 SQL，容易造成 SQL 注入问题</p>
</li>
<li><p>如图：</p>
<p><img data-src="02.png" alt="两种方法的比较"></p>
</li>
</ol>
<h4 id="与-的区别"><a href="#与-的区别" class="headerlink" title="#{} 与 ${} 的区别"></a><code>#&#123;&#125;</code> 与 <code>$&#123;&#125;</code> 的区别</h4><ul>
<li><code>#&#123;&#125;</code> 表示一个占位符号  </li>
</ul>
<p>通过 <code>#&#123;&#125;</code> 可以实现 <code>preparedStatement</code> 向占位符中设置值，自动进行 java 类型和 jdbc 类型转换， <code>#&#123;&#125;</code>可以有效防止 sql 注入。 <code>#&#123;&#125;</code> 可以接收简单类型值或 pojo 属性值。 如果 <code>parameterType</code> 传输单个简单类 型值，<code>#&#123;&#125;</code> 括号中可以是 value 或其它名称。</p>
<ul>
<li><code>$&#123;&#125;</code> 表示拼接 sql 串 </li>
</ul>
<p>通过 <code>$&#123;&#125;</code> 可以将 <code>parameterType</code> 传入的内容拼接在 sql中且不进行 jdbc 类型转换， <code>$&#123;&#125;</code>可以接收简单类型值或 pojo 属性值，如果 <code>parameterType</code> 传输单个简单类型值，**<code>$&#123;&#125;</code> 括号中只能是 value**（源码中指定了读取的 key 的名字就是 <code>value</code>，所以我们在绑定参数时就只能叫 value 的名字 ）</p>
<h3 id="Mybatis-与-JDBC-编程的比较"><a href="#Mybatis-与-JDBC-编程的比较" class="headerlink" title="Mybatis 与 JDBC 编程的比较"></a>Mybatis 与 JDBC 编程的比较</h3><ol>
<li><p>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。 解决：  </p>
<blockquote>
<p>在 SqlMapConfig.xml 中配置数据链接池，使用连接池管理数据库链接。 </p>
</blockquote>
</li>
<li><p>Sql 语句写在代码中造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java 代码。</p>
<p>解决：  </p>
<blockquote>
<p>将 Sql 语句配置在 XXXXmapper.xml 文件中与 java 代码分离。 </p>
</blockquote>
</li>
<li><p>向 Sql 语句传参数麻烦，因为 sql 语句的 where 条件不一定，可能多也可能少，占位符需要和参数对应。 解决：  </p>
<blockquote>
<p>Mybatis 自动将 java 对象映射至 sql 语句，通过 statement 中的 parameterType 定义输入参数的 类型。</p>
</blockquote>
</li>
<li><p>对结果集解析麻烦，sql 变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成 pojo 对 象解析比较方便。 </p>
<p>解决：  </p>
<blockquote>
<p>Mybatis自动将 sql执行结果映射至 java 对象，通过statement中的resultType 定义输出结果的 类型。</p>
</blockquote>
</li>
</ol>
<h2 id="Mybatis-的参数深入"><a href="#Mybatis-的参数深入" class="headerlink" title="Mybatis 的参数深入"></a>Mybatis 的参数深入</h2><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><blockquote>
<p>SQL 语句传参，使用标签的 parameterType 属性来设定。</p>
<p>该属性的取值可以 是基本类型，引用类型（例如:String 类型），还可以是实体类类型（POJO 类）；</p>
<p>同时也可以使用实体类的包装类，本章节将介绍如何使用实体类的包装类作为参数传递。 </p>
</blockquote>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>基本类型和 String 我们可以直接写类型名称 ，也可以使用包名 . 类名的方式 ，例如 ：java.lang.String</p>
<p>实体类类型，目前我们只能使用全限定类名。  </p>
<p>究其原因，是 mybaits 在加载时已经把常用的数据类型注册了别名，从而我们在使用时可以不写包名， 而我们的是实体类并没有注册别名，<strong>所以必须写全限定类名</strong></p>
<h3 id="传递-pojo-包装对象"><a href="#传递-pojo-包装对象" class="headerlink" title="传递 pojo 包装对象"></a>传递 pojo 包装对象</h3><blockquote>
<p>开发中通过 pojo 传递查询条件 ，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。 </p>
<p> 需求：根据用户名查询用户信息，查询条件放到 QueryVo 的 user 属性中。</p>
</blockquote>
<p><code>QueryVo.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>持久层接口 <code>IUserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 queryVo 中的条件查询用户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> vo</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserByVo</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure>

<p>持久层接口的映射文件 <code>com\conv\dao\IUserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据 queryVo 中的条件查询用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByVo&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.conv.domain.QueryVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;user.username&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试包装类作为参数 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试使用QureyVo作为查询条件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByVo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//执行方法</span></span><br><span class="line">    QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;%王%&quot;</span>);</span><br><span class="line">    vo.setUser(user);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userDao.findUserByVo(vo);</span><br><span class="line"></span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据库列名和-pojo-中的属性名不一致的情况"><a href="#数据库列名和-pojo-中的属性名不一致的情况" class="headerlink" title="数据库列名和 pojo 中的属性名不一致的情况"></a>数据库列名和 pojo 中的属性名不一致的情况</h2><blockquote>
<p>假设数据库中的列名为：</p>
<p>id, username, birthday, sex, address</p>
<p>pojo 中的属性名为：</p>
<p>userId, userName, userBirthday, userSex, userAddress</p>
</blockquote>
<h3 id="1-使用别名查询"><a href="#1-使用别名查询" class="headerlink" title="1. 使用别名查询"></a>1. 使用别名查询</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">    select id as userId, username as userName, birthday as userBirthday, sex as userSex, address as userAddress from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-使用-resultMap"><a href="#2-使用-resultMap" class="headerlink" title="2. 使用 resultMap"></a>2. 使用 resultMap</h3><blockquote>
<p>resultMap 标签可以建立查询的列名和实体类的属性名称不一致时建立对应关系。从而实现封装。 </p>
<p>在 select 标签中使用 resultMap 属性指定引用即可。</p>
<p>同时 resultMap 可以实现将查询结果映射为复杂类型的 pojo，比如在查询结果映射对象中包括 pojo 和 list 实现一对一查询和一对多查询。 </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 建立 User 实体和数据库表的对应关系</span></span><br><span class="line"><span class="comment">type 属性：指定实体类的全限定类名  </span></span><br><span class="line"><span class="comment">id 属性：给定一个唯一标识，是给查询 select 标签引用用的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userSex&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userAddress&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userBirthday&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id 标签：用于指定主键字段 </span></span><br><span class="line"><span class="comment">result 标签：用于指定非主键字段 </span></span><br><span class="line"><span class="comment">column 属性：用于指定数据库列名 </span></span><br><span class="line"><span class="comment">property 属性：用于指定实体类属性名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>映射配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultyMap 属性是上面的 id 属性的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试结果 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFinfAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SqlMapConfig-xml-配置文件"><a href="#SqlMapConfig-xml-配置文件" class="headerlink" title="SqlMapConfig.xml 配置文件"></a>SqlMapConfig.xml 配置文件</h2><h3 id="properties（属性）"><a href="#properties（属性）" class="headerlink" title="properties（属性）"></a>properties（属性）</h3><p>在使用 properties 标签配置时，我们可以采用两种方式指定属性配置。 </p>
<ol>
<li>在标签内部配置连接数据库的信息</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/learn?serverTimezone=GMT%2B8<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4869&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置myslq的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源（连接池）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置连接数据库的基本信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过属性引用外部配置文件信息</li>
</ol>
<ul>
<li>在 <code>resources</code>下定义 <code>jdbcConfig.properties</code> 文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/learn?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">4869</span></span><br></pre></td></tr></table></figure>

<ul>
<li> properties 标签配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置连接数据库的信息</span></span><br><span class="line"><span class="comment">    resource 属性：用于指定 properties 配置文件的位置，要求配置文件必须在类路径下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbcConfig.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置连接数据库的信息</span></span><br><span class="line"><span class="comment">    url 属性：</span></span><br><span class="line"><span class="comment">        URL：Uniform Resource Locator 统一资源定位符</span></span><br><span class="line"><span class="comment">            是按照 URL 的写法来写地址（协议 主机 端口 URI）</span></span><br><span class="line"><span class="comment">        URI：Uniform Resource Identifier 统一资源标识符</span></span><br><span class="line"><span class="comment">            它是在应用中可以唯一定位一个资源的位置</span></span><br><span class="line"><span class="comment">        它是可以在 web 应用中唯一定位一个资源的路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">url</span>=<span class="string">&quot;file:///E:/MySpace/IntelliJ IDEA/Mybatis_02/src/main/resources/jdbcConfig.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="typeAliases（类型别名）"><a href="#typeAliases（类型别名）" class="headerlink" title="typeAliases（类型别名）"></a>typeAliases（类型别名）</h3><ol>
<li>typeAlias 单个别名自定义</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  使用 typeAliases 配置别名，它只能配置 domain 中类的别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- typeAlias 用于配置别名，type 属性指定的是实体类全限定类名，alias 属性指定别名，当指定了别名就不再区分大小写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.conv.domain.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>package 批量别名自定义</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  用于指定要配置别名的包，当指定后，该包下的实体类都会注册别名，并且类名就是别名，不再区分大小写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.conv.domain&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mappers（映射器）"><a href="#mappers（映射器）" class="headerlink" title="mappers（映射器）"></a>mappers（映射器）</h3><ol>
<li> <code>&lt;mapper resource=&quot; &quot; /&gt;</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用相对于类路径的资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/conv/dao/IUserDao.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li> <code>&lt;mapper class=&quot; &quot; /&gt; </code></li>
</ol>
<p><strong>注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用 mapper 接口类路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li> <code>&lt;package name=&quot;&quot;/&gt; </code></li>
</ol>
<p><strong>注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册指定包下的所有 mapper 接口 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--package 标签用于指定dao接口所在的包，</span></span><br><span class="line"><span class="comment">    当指定了之后就不需要再写 mapper 以及 class 或 resource 了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.conv.dao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>示例</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定映射配置文件的位置，映射配置文件指的是每个DAO独立的配置文件</span></span><br><span class="line"><span class="comment">        如果是用注解来配置的话，此处应该使用class属性指定被注解的dao全限定类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--xml配置，路径是resource下的路径--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource=&quot;com/conv/dao/IUserDao.xml&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用注解的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper class=&quot;com.conv.dao.IUserDao&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--package 标签用于指定dao接口所在的包，</span></span><br><span class="line"><span class="comment">        当指定了之后就不需要再写 mapper 以及 class 或 resource 了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.conv.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="PreparedStatement-对象的执行方法"><a href="#PreparedStatement-对象的执行方法" class="headerlink" title="PreparedStatement 对象的执行方法"></a>PreparedStatement 对象的执行方法</h2><ul>
<li>execute：它能执行 CRUD 的任意一种语句。<ul>
<li>返回值是一个 boolean 类型，表示是否有结果集，有结果集是 true，没有结果集是 false</li>
</ul>
</li>
<li>executeUpdate：它只能执行 CUD 语句，查询语句无法执行。<ul>
<li>返回值是影响数据库记录的行数</li>
</ul>
</li>
<li>executeQuery：它只能执行 SELECT 语句，无法执行增删改<ul>
<li>执行结果封装到结果集 ResultSet 对象</li>
</ul>
</li>
</ul>
<blockquote>
<p>CRUD：</p>
<p>增加(Create)、读取(Retrieve)、更新(Update)和删除(Delete)</p>
</blockquote>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记01</title>
    <url>/posts/spring-xue-xi-bi-ji-01/</url>
    <content><![CDATA[<h2 id="Spring-概述"><a href="#Spring-概述" class="headerlink" title="Spring 概述"></a>Spring 概述</h2><blockquote>
<p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control： 反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多 著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架</p>
</blockquote>
<h2 id="程序的耦合以及解耦"><a href="#程序的耦合以及解耦" class="headerlink" title="程序的耦合以及解耦"></a>程序的耦合以及解耦</h2><p>我们在开发中，有些依赖关系是必须的，有些依赖关系可以通过优化代码来解除的。 </p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的代码表示：  </p>
<p>业务层调用持久层，并且此时业务层在依赖持久层的接口和实现类。如果此时没有持久层实现类，编译将不能通过。这种编译期依赖关系，应该在我们开发中杜绝。我们需要优化代码解决。</p>
</blockquote>
<p>再比如：</p>
<p>早期我们的 JDBC 操作，注册驱动时，我们为什么不使用 <code>DriverManager</code> 的 <code>register</code> 方法，而是采 用 <code>Class.forName</code> 的方式？ </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line"><span class="comment">//        DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取连接</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/spring?serverTimezone=GMT%2B8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;root&quot;</span>, <span class="string">&quot;4869&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 获取操作数据库的预处理对象</span></span><br><span class="line">        PreparedStatement pstm = connection.prepareStatement(<span class="string">&quot;select * from account&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 执行sql，得到结果集</span></span><br><span class="line">        ResultSet rs = pstm.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">        pstm.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因就是： </p>
<p>我们的类依赖了数据库的具体驱动类（MySQL），如果这时候更换了数据库品牌（比如 Oracle），需要修改源码来重新数据库驱动。这显然不是我们想要的。 </p>
<p>若没有 mysql 的驱动包，registerDriver 方法会在编译器报错，Class.forName 方式在编译期不依赖，运行时才依赖</p>
</blockquote>
<h3 id="解耦的思路"><a href="#解耦的思路" class="headerlink" title="解耦的思路"></a>解耦的思路</h3><ol>
<li><p>通过反射来创建对象，而避免使用 new 关键字</p>
<p><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code> </p>
<p>这里的 <code>&quot;com.mysql.jdbc.Driver&quot;</code> 只是一个字符串，此时的好处是，我们的类中不再依赖具体的驱动类，此时就算删除 mysql 的驱动 jar 包，依然可以编译（运行就不要想了，没有驱动不可能运行成功的）。</p>
</li>
<li><p>但是这个字符串也是写死的，改动数据库时依然需要改源码，这样不好。通过读取配置文件来获取要创建的对象全限定类名</p>
<p>通过读取配置文件来获取要创建的对象的全限定类名</p>
</li>
</ol>
<h3 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h3><p>在实际开发中我们可以把三层的对象都使用配置文件配置起来，当启动服务器应用加载的时候，让一个类中的方法通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。 </p>
<p>那么，这个读取配置文件，创建和获取三层对象的类就是工厂。 </p>
<h2 id="IOC-的概念"><a href="#IOC-的概念" class="headerlink" title="IOC 的概念"></a>IOC 的概念</h2><p>上面的思路还有两个问题：</p>
<ol>
<li><p>存哪去？</p>
<p>分析：由于我们是很多对象，肯定要找个集合来存。这时候有 Map 和 List 供选择。到底选 Map 还是 List 就看我们有没有查找需求。有查找需求，选 Map。</p>
<p>所以我们的答案就是：在应用加载时，创建一个 Map，用于存放三层对象。我们把这个 Map 称之为容器。 </p>
</li>
<li><p>什么是工厂？</p>
<p>工厂就是负责给我们从容器中获取指定对象的类。这时候我们获取对象的方式发生了改变。   </p>
<ul>
<li>之前：我们在获取对象时，都是采用 new 的方式。是主动的。</li>
<li>现在：我们获取对象时，同时跟工厂要，由工厂为我们查找或者创建对象。是被动的。 </li>
</ul>
<p>这种被动接收的方式获取对象的思想就是控制反转，它是 spring 框架的核心之一。 </p>
</li>
</ol>
<h3 id="控制反转（IOC）"><a href="#控制反转（IOC）" class="headerlink" title="控制反转（IOC）"></a>控制反转（IOC）</h3><p>控制反转（Inversion of Control，缩写为 IoC ），把创建对象的权力交给框架，是框架的重要特征。是面向对象编程中的一种设计原则，可以用来降低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。</p>
<p>明确 ioc的作用： </p>
<ul>
<li>削减计算机程序的耦合（解除我们代码中的依赖关系）</li>
</ul>
<h2 id="Spring-中的-IOC（案例）"><a href="#Spring-中的-IOC（案例）" class="headerlink" title="Spring 中的 IOC（案例）"></a>Spring 中的 IOC（案例）</h2><p>由于我们是使用 spring 解决依赖关系，并不是真正的要做增删改查操作，所以此时我们没必要写实体类。并且我们在此处使用的是 java 工程，不是 java web 工程。 </p>
<h3 id="创建业务层接口和实现类"><a href="#创建业务层接口和实现类" class="headerlink" title="创建业务层接口和实现类"></a>创建业务层接口和实现类</h3><p>IAccountService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟保存账户</span></span><br><span class="line"><span class="comment">     * 为了简单，不保存到数据库中（没有参数 Account）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AccountServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.conv.dao.impl.AccountDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.conv.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> com.conv.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line"><span class="comment">//    private IAccountDao accountDao = (IAccountDao) BeanFactory.getBean(&quot;accountDao&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建持久层接口和实现类"><a href="#创建持久层接口和实现类" class="headerlink" title="创建持久层接口和实现类"></a>创建持久层接口和实现类</h3><p>IAccountDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟保存账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AccountDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.dao.IAccountDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存了账户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模拟表现层调用业务层"><a href="#模拟表现层调用业务层" class="headerlink" title="模拟表现层调用业务层"></a>模拟表现层调用业务层</h3><p>Client.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> com.conv.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> com.conv.service.impl.AccountServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个表现层，用来调用业务层</span></span><br><span class="line"><span class="comment"> * 实际开发中是一个 Servlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IAccountService accountService = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line"><span class="comment">//        IAccountService accountService = (IAccountService) BeanFactory.getBean(&quot;accountService&quot;);</span></span><br><span class="line"></span><br><span class="line">        accountService.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样可以实现基本功能没有问题。但是我们在表现层调用业务层以及业务层调用实体层时，用到了两个 new，用来创建 Service 和 Dao 对象，这样造成了程序间的耦合，应该避免。</p>
<h3 id="工厂模式解耦-1"><a href="#工厂模式解耦-1" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h3><ul>
<li><p>首先，需要一个配置文件来配置我们的 Service 和 Dao</p>
<blockquote>
<p>配置的内容：唯一标识 = 全限定类名（key = value）</p>
</blockquote>
</li>
<li><p>接下来，通过读取配置文件中配置的内容，反射创建对象</p>
<blockquote>
<p>配置文件可以是 xml 也可以是 properties</p>
</blockquote>
</li>
</ul>
<p><code>src\main\resources\bean.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">accountService</span>=<span class="string">com.conv.service.impl.AccountServiceImapl</span></span><br><span class="line"><span class="attr">accountDao</span>=<span class="string">com.conv.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>新建一个用来创建 Bean 对象的工厂</p>
<ul>
<li><p>Bean: 即可重用组件（比如 Service 可以被很多 Servlet 使用，Dao 可以被很多 Service 使用）</p>
</li>
<li><p>JavaBean: 用 Java 语言编写的可重用组件</p>
<blockquote>
<p>JavaBean 大于 实体类（实体类可重用组件的一部分）</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><code>src\main\java\com\conv\factory\BeanFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个创建 Bean 对象的工厂</span></span><br><span class="line"><span class="comment"> * 用来创建 Service 和 Dao 对象的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个 Properties 对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为 Properties 对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            <span class="comment">//FileInputStream 的路径不固定，不推荐</span></span><br><span class="line">            <span class="comment">//InputStream in = new FileInputStream(&quot;&quot;)</span></span><br><span class="line">            <span class="comment">// 创建在 resources 目录下的文件最后会成为类根路径下的文件，可以不用写任何包名</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            props.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 如果配置文件无法读取，那么什么都做不了，直接报错</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化 properties 失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Bean 的名称获取 bean 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String beanPath = props.getProperty(beanName);</span><br><span class="line">            bean = Class.forName(beanPath).getDeclaredConstructor().newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改 Client.java 和 AccountServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IAccountService accountService = (IAccountService) BeanFactory.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = (IAccountDao) BeanFactory.getBean(<span class="string">&quot;accountDao&quot;</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="分析工厂模式的问题并改造"><a href="#分析工厂模式的问题并改造" class="headerlink" title="分析工厂模式的问题并改造"></a>分析工厂模式的问题并改造</h3><p><code>bean = Class.forName(beanPath).getDeclaredConstructor().newInstance();</code></p>
<p>这句话意味着每次都会调用默认构造函数创建对象，每次调用都会重新创建一个新的对象出来，效率较低</p>
<blockquote>
<p>单例：只被创建一次，从而类中的成员也就只会初始化一次，但是若有类的成员变量，会有线程问题（所以说 Service 和 Dao 最好不要有可以修改的类成员）</p>
<p>多例：对象被创建多次，执行效率没有单例对象高</p>
</blockquote>
<p>所以 <code>newInstance()</code> 只执行一次，创建出来后用 map 存起来，修改过后的工厂类如下：</p>
<p><code>com\conv\factory\BeanFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个创建 Bean 对象的工厂</span></span><br><span class="line"><span class="comment"> * 用来创建 Service 和 Dao 对象的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个 Properties 对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个 Map，用来存放我们要创建的对象。我们称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为 Properties 对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            <span class="comment">//FileInputStream 的路径不固定，不推荐</span></span><br><span class="line">            <span class="comment">//InputStream in = new FileInputStream(&quot;&quot;)</span></span><br><span class="line">            <span class="comment">// 创建在 resources 目录下的文件最后会成为类根路径下的文件，可以不用写任何包名</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            props.load(in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            <span class="comment">//取出配置文件中所有的 key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">// 遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">                <span class="comment">//取出每个key</span></span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据key获取value</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).getDeclaredConstructor().newInstance();</span><br><span class="line">                <span class="comment">//把 key 和 value 存入容器中</span></span><br><span class="line">                beans.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 如果配置文件无法读取，那么什么都做不了，直接报错</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化 properties 失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Bean 的名称获取 bean 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于静态代码块只在最开始执行一次，所以满足了要求</p>
<h2 id="使用-spring-的-IOC-解决程序耦合"><a href="#使用-spring-的-IOC-解决程序耦合" class="headerlink" title="使用 spring 的 IOC 解决程序耦合"></a>使用 spring 的 IOC 解决程序耦合</h2><h3 id="Spring-中基于-XML-的-IOC-环境搭建"><a href="#Spring-中基于-XML-的-IOC-环境搭建" class="headerlink" title="Spring 中基于 XML 的 IOC 环境搭建"></a>Spring 中基于 XML 的 IOC 环境搭建</h3><p><code>src\main\resources\bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--把对象的创建交给spring来管理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置 service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置 dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.dao.impl.AccountDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取spring的IOC核心容器，并根据id获取对象"><a href="#获取spring的IOC核心容器，并根据id获取对象" class="headerlink" title="获取spring的IOC核心容器，并根据id获取对象"></a>获取spring的IOC核心容器，并根据id获取对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//-----------ApplicationContext--------------</span></span><br><span class="line">    <span class="comment">//1. 获取核心容器对象</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//ApplicationContext ac = new FileSystemXmlApplicationContext(&quot;E:\\MySpace\\IntelliJ IDEA\\Spring\\day01_spring\\src\\main\\resources\\bean.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据id获取Bean对象（以下两种写法均可）</span></span><br><span class="line">    IAccountService as = (IAccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">    IAccountDao ad = ac.getBean(<span class="string">&quot;accountDao&quot;</span>, IAccountDao.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">////--------BeanFactory----------</span></span><br><span class="line">    <span class="comment">//1. 获取核心容器对象</span></span><br><span class="line">    <span class="comment">//Resource resource = new ClassPathResource(&quot;bean.xml&quot;);</span></span><br><span class="line">    <span class="comment">//BeanFactory factory = new XmlBeanFactory(resource);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 根据id获取Bean对象</span></span><br><span class="line">    <span class="comment">//IAccountService as = (IAccountService)factory.getBean(&quot;accountService&quot;);</span></span><br><span class="line"></span><br><span class="line">    System.out.println(as);</span><br><span class="line">    System.out.println(ad);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//as.saveAccount();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>ApplicationContext</code> 的三个常用实现类：</p>
<ul>
<li><code>ClassPathXmlApplicationContext</code>：可以加载类路径下的配置文件，要求配置文件必须在类路径下</li>
<li><code>FileSystemXmlApplicationContext</code>：可以加载磁盘任意路径下的配置文件（必须有访问权限）（不常用）</li>
<li><code>AnnotationConfigApplicationContext</code>：用于读取注解创建容器（见下节内容）</li>
</ul>
</li>
<li><p>核心容器的两个接口引发出的问题</p>
<ul>
<li><p>ApplicationContext:  单例模式适用（实际开发中常用）</p>
<blockquote>
<p>它在构建核心容器时，创建对象采用的策略是采用立即加载的方式。也就是说，只要一读取完配置文件马上就创建配置文件的对象</p>
</blockquote>
</li>
<li><p>BeanFactory:    多例对象适用</p>
<blockquote>
<p>它在构建核心容器时，创建对象采取的策略是延迟加载的方式。也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象</p>
<p>BeanFactory 是 Spring 容器中的顶层接口，ApplicationContext 是它的子接口。 </p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="IOC-中-bean-标签和管理对象细节"><a href="#IOC-中-bean-标签和管理对象细节" class="headerlink" title="IOC 中 bean 标签和管理对象细节"></a>IOC 中 bean 标签和管理对象细节</h3><p>spring 对 bean 的管理细节：</p>
<ol>
<li><p>创建 bean 的三种方式</p>
<ol>
<li><p>使用默认构造函数创建</p>
<blockquote>
<p>在spring的配置文件中使用 bean 标签，配以 id 和 class 属性之后，且没有其他属性和标签时，采用的就是默认构造函数创建 bean 对象。此时如果类中没有默认构造函数，则对象无法创建。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.使用默认构造函数创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</p>
<ul>
<li><p>首先，模拟一个工厂类（可能位于jar包中）</p>
<p><code>com\conv\factory\InstanceFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> com.conv.service.impl.AccountServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个工厂类（该类可能存在于jar包中，无法通过修改源码的方式提供默认构造函数）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建对象</p>
<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--2.使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.factory.InstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）</p>
<ul>
<li><p>模拟一个静态工厂类（可能位于jar包中）</p>
<p><code>com\conv\factory\StaticFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> com.conv.service.impl.AccountServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个静态工厂类（该类可能存在于jar包中，无法通过修改源码的方式提供默认构造函数）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建对象</p>
<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--3.使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><p>bean 对象的作用范围</p>
<ul>
<li>bean 标签的 scope 属性：<ul>
<li>作用：用于指定 bean 的作用范围</li>
<li>取值：(常用的是前两个)<ol>
<li>singleton：单例的（默认值）</li>
<li>prototype：多例的</li>
<li>request：作用于web应用的请求范围</li>
<li>session：作用于web应用的会话范围</li>
<li>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>bean 对象的生命周期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取核心容器对象</span></span><br><span class="line">    ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据id获取Bean对象（以下两种写法均可）</span></span><br><span class="line">    IAccountService as = (IAccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line"></span><br><span class="line">    as.saveAccount();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//父类对象无法调用子类对象的方法，所以 ac 的类型改为子类对象：ClassPathXmlApplicationContext</span></span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--bean 对象的生命周期--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.service.impl.AccountServiceImpl&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean id=&quot;accountService&quot; class=&quot;com.conv.service.impl.AccountServiceImpl&quot;</span></span><br><span class="line"><span class="comment">      scope=&quot;prototype&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>单例对象<ul>
<li>出生：当容器创建时对象出生</li>
<li>活着：只要容器还在，对象就一直活着</li>
<li>死亡：容器销毁，对象消亡</li>
<li>总结：单例对象的生命周期和容器相同</li>
</ul>
</li>
<li>多例对象<ul>
<li>出生：当我们使用对象时spring框架为我们创建</li>
<li>活着：对象只要在使用过程中就一直活着</li>
<li>死亡：当对象长时间不用，且没有别的对象引用时，由 Java 的垃圾回收器回收</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="依赖注入（Dependency-Injection）"><a href="#依赖注入（Dependency-Injection）" class="headerlink" title="依赖注入（Dependency Injection）"></a>依赖注入（Dependency Injection）</h2><h3 id="能注入的数据有三类："><a href="#能注入的数据有三类：" class="headerlink" title="能注入的数据有三类："></a>能注入的数据有三类：</h3><ol>
<li>基本类型和String</li>
<li>其他 bean 类型（在配置文件中或者注解配置过的 bean）</li>
<li>复杂类型/集合类型</li>
</ol>
<h3 id="注入的方式有三种："><a href="#注入的方式有三种：" class="headerlink" title="注入的方式有三种："></a>注入的方式有三种：</h3><ol>
<li><p>使用构造函数提供（不常用）</p>
<ul>
<li><p>使用的标签：<code>constructor-arg</code></p>
</li>
<li><p>标签出现的位置：<code>bean</code> 标签的内部</p>
</li>
<li><p>标签中的属性：</p>
<ul>
<li><code>type</code> 用于指定要注入的数据类型，该数据类型也是构造函数中某个或某些参数的类型</li>
<li><code>index</code> 用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始的</li>
<li><code>name</code> 用于指定给构造函数中指定名称的参数赋值（常用）</li>
<li><code>value</code> 用于提供基本类型和 String 类型的数据</li>
<li><code>ref</code> 用于指定其他的 bean 类型的数据。它指的就是在 spring 的 IOC 核心容器中出现过的 bean 对象</li>
</ul>
<blockquote>
<p>其中，<code>type,index,name</code> 用于指定给构造函数的哪个参数赋值，<code>value,ref</code> 用来赋值</p>
</blockquote>
</li>
<li><p>例：</p>
<p><code>com\conv\service\impl\AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是经常变化的数据，并不适用于注入的方式</span></span><br><span class="line">    <span class="comment">//比如注册时用户名等每个人都不一样的，就不适合注入</span></span><br><span class="line">    <span class="comment">//这里的三个变量只是为了举例</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;AccountServiceImpl&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service中的saveAccount方法执行了\n&quot;</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;17&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一个日期对象，上面的 ref=“now” 调取这个对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;year&quot;</span> <span class="attr">value</span>=<span class="string">&quot;120&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优势：</p>
<blockquote>
<p>在获取 bean 对象时，注入数据是必须的操作，否则对象无法创建成功</p>
</blockquote>
</li>
<li><p>弊端</p>
<blockquote>
<p>改变了 bean  对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>使用 set 方法提供（更常用）</p>
<ul>
<li><p>使用的标签：<code>property</code></p>
</li>
<li><p>标签出现的位置：<code>bean</code> 标签的内部</p>
</li>
<li><p>标签中的属性：</p>
<ul>
<li><code>name</code> 用于指定注入时所调用的set方法的名称</li>
<li><code>value</code> 用于提供基本类型和 String 类型的数据</li>
<li><code>ref</code> 用于指定其他的 bean 类型的数据。它指的就是在 spring 的 IOC 核心容器中出现过的 bean 对象</li>
</ul>
</li>
<li><p>例：</p>
<p><code>com\conv\service\impl\AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是经常变化的数据，并不适用于注入的方式</span></span><br><span class="line">    <span class="comment">//比如注册时用户名等每个人都不一样的，就不适合注入</span></span><br><span class="line">    <span class="comment">//这里的三个变量只是为了举例</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;AccountServiceImpl&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service中的saveAccount方法执行了\n&quot;</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;TEST&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;year&quot;</span> <span class="attr">value</span>=<span class="string">&quot;120&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优势：</p>
<blockquote>
<p>创建对象时没有明确的限制，可以直接使用默认构造函数</p>
</blockquote>
</li>
<li><p>弊端</p>
<blockquote>
<p>如果某个对象必须有值，则获取对象时 set 方法有可能没有执行</p>
</blockquote>
</li>
</ul>
</li>
<li><p>使用注解提供（见下节内容）</p>
</li>
</ol>
<h3 id="复杂类型的注入-集合类型的注入"><a href="#复杂类型的注入-集合类型的注入" class="headerlink" title="复杂类型的注入/集合类型的注入"></a>复杂类型的注入/集合类型的注入</h3><p>就是给类中的集合成员传值，它用的也是 set 方法注入的方式，只不过变量的数据类型都是集合</p>
<ul>
<li>用于给 List 结构集合注入的标签有：<code>list</code>,<code>array</code>,<code>set</code></li>
<li>用于给 Map 结构集合注入的标签有：<code>map</code>,<code>props</code></li>
</ul>
<p><strong>结构相同，标签可以互换</strong></p>
<p>例：</p>
<p><code>com\conv\service\impl\AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.conv.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;AccountServiceImpl&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\nmyStrs=&quot;</span> + Arrays.toString(myStrs) +</span><br><span class="line">                <span class="string">&quot;\nmyList=&quot;</span> + myList +</span><br><span class="line">                <span class="string">&quot;\nmySet=&quot;</span> + mySet +</span><br><span class="line">                <span class="string">&quot;\nmyMap=&quot;</span> + myMap +</span><br><span class="line">                <span class="string">&quot;\nmyProps=&quot;</span> + myProps +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service中的saveAccount方法执行了\n&quot;</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.conv.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面是map标签和props标签互换，不影响注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;propC&quot;</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;propD&quot;</span>&gt;</span>DDD<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;mapA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;AAA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;mapB&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记03</title>
    <url>/posts/mybatis-xue-xi-bi-ji-03/</url>
    <content><![CDATA[<h2 id="Mybatis-中的连接池以及事务控制"><a href="#Mybatis-中的连接池以及事务控制" class="headerlink" title="Mybatis 中的连接池以及事务控制"></a>Mybatis 中的连接池以及事务控制</h2><ul>
<li>连接池就是用于存储连接的一个容器</li>
<li>容器其实就是一个集合对象，该集合必须是线程安全的，不能两个线程拿到同一个连接</li>
<li>该集合还必须实现队列的特性：先进先出</li>
</ul>
<h3 id="连接池配置的位置"><a href="#连接池配置的位置" class="headerlink" title="连接池配置的位置"></a>连接池配置的位置</h3><blockquote>
<p>主配置文件 <code>SqlMapConfig.xml</code> 中的 <code>dataSource</code> 标签，<strong>type 属性</strong>就是表示采用何种连接池方式。</p>
</blockquote>
<h3 id="配置的方式（type-属性的取值）"><a href="#配置的方式（type-属性的取值）" class="headerlink" title="配置的方式（type 属性的取值）"></a>配置的方式（type 属性的取值）</h3><ol>
<li><p><code>POOLED</code></p>
<p>采用传统的 <code>javax.sql.DataSource</code> 规范中的连接池，<code>mybatis</code> 中有针对规范的实现</p>
</li>
<li><p><code>UNPOOLED</code></p>
<p>采用传统的获取连接的方式，虽然也实现 <code>Javax.sql.DataSource</code> 接口，但是并没有使用池的思想。</p>
</li>
<li><p><code>JNDI</code></p>
<p>采用服务器提供的 JNDI 技术实现，来获取 <code>DataSource</code> 对象，不同的服务器所能拿到 <code>DataSource</code> 是不一样的。</p>
<blockquote>
<p>注意：</p>
<p>此配置如果不是 web 或者 maven 的 <code>war </code>工程，是不能使用的</p>
<p>下文中使用的是 <code>tomcat</code> 服务器，采用连接池就是 <code>dbcp</code> 连接池</p>
</blockquote>
</li>
</ol>
<p>在这三种数据源中，我们一般采用的是 POOLED 数据源（很多时候我们所说的数据源就是为了更好的管理数据 库连接，也就是我们所说的连接池技术）。 </p>
<h4 id="JNDI-数据源的具体使用"><a href="#JNDI-数据源的具体使用" class="headerlink" title="JNDI 数据源的具体使用"></a>JNDI 数据源的具体使用</h4><blockquote>
<p>JNDI：</p>
<p><code>Java Naming and Directory Interface</code>，是SUN公司推出的一套规范，属于 <code>JavaEE</code> 的技术之一。目的是模仿 <code>windows</code> 系统中的注册表，在服务器中注册数据源</p>
</blockquote>
<ol>
<li><p>创建 Maven 的 web 工程并导入坐标：</p>
<p><img data-src="01.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>webapp</code> 文件下创建 <code>META-INF</code> 目录，并在 <code>META-INF</code> 目录中建立一个名为 <code>context.xml</code> 的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Resource</span></span><br><span class="line"><span class="comment">    name=&quot;jdbc/eesy_mybatis&quot;						数据源的名称，可以自己指定</span></span><br><span class="line"><span class="comment">    type=&quot;javax.sql.DataSource&quot;						数据源类型，我们要存什么样的对象</span></span><br><span class="line"><span class="comment">    auth=&quot;Container&quot;								数据源提供者，这里的容器指的是Tomcat</span></span><br><span class="line"><span class="comment">    maxActive=&quot;20&quot;									最大活动数</span></span><br><span class="line"><span class="comment">    maxWait=&quot;10000&quot;									最大等待时间</span></span><br><span class="line"><span class="comment">    maxIdle=&quot;5&quot;										最大空闲数</span></span><br><span class="line"><span class="comment">    username=&quot;root&quot;									用户名</span></span><br><span class="line"><span class="comment">    password=&quot;1234&quot;									密码</span></span><br><span class="line"><span class="comment">    driverClassName=&quot;com.mysql.jdbc.Driver&quot;			驱动类</span></span><br><span class="line"><span class="comment">    url=&quot;jdbc:mysql://localhost:3306/eesy_mybatis&quot;	连接url字符串</span></span><br><span class="line"><span class="comment">    /&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    &lt;Resource</span><br><span class="line">            name=&quot;jdbc/learn&quot;</span><br><span class="line">            type=&quot;javax.sql.DataSource&quot;</span><br><span class="line">            auth=&quot;Container&quot;</span><br><span class="line">            maxActive=&quot;20&quot;</span><br><span class="line">            maxWait=&quot;10000&quot;</span><br><span class="line">            maxIdle=&quot;5&quot;</span><br><span class="line">            username=&quot;root&quot;</span><br><span class="line">            password=&quot;4869&quot;</span><br><span class="line">            driverClassName=&quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">            url=&quot;jdbc:mysql://localhost:3306/learn?serverTimezone=GMT%2B8&quot;</span><br><span class="line">    /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>SqlMapConfig.xml</code> 中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置连接数据库的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbcConfig.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  使用 typeAliases 配置别名，它只能配置 com.conv.domain 中类的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.conv.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置myslq的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源（连接池）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;JNDI&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;data_source&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java:comp/env/jdbc/learn&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定映射配置文件的位置，映射配置文件指的是每个DAO独立的配置文件</span></span><br><span class="line"><span class="comment">        如果是用注解来配置的话，此处应该使用class属性指定被注解的dao全限定类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--xml配置，路径是resource下的路径--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com.conv.dao/IUserDao.xml&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--使用注解的配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class=&quot;com.conv.dao.IUserDao&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--package 标签用于指定dao接口所在的包，</span></span><br><span class="line"><span class="comment">        当指定了之后就不需要再写 mapper 以及 class 或 resource 了--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.conv.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.ibatis.io.Resources&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.ibatis.session.SqlSessionFactoryBuilder&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.ibatis.session.SqlSessionFactory&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.ibatis.session.SqlSession&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.conv.domain.User&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//1.读取配置文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//2.根据配置文件构建SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    SqlSessionFactory factory = builder.build(in);</span><br><span class="line">    <span class="comment">//3.使用SqlSessionFactory创建SqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line">    <span class="comment">//4.使用SqlSession构建Dao的代理对象</span></span><br><span class="line">    IUserDao userDao = sqlSession.getMapper(IUserDao.class);</span><br><span class="line">    <span class="comment">//5.执行dao中的findAll方法</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    in.close();</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 Tomcat 运行</p>
</li>
</ol>
<h3 id="Mybatis-的事务"><a href="#Mybatis-的事务" class="headerlink" title="Mybatis 的事务"></a>Mybatis 的事务</h3><p><strong>事务</strong></p>
<blockquote>
<p>访问并可能更新数据库中各种数据项的一个程序执行单元(unit)</p>
<p>例如：在关系数据库中，一个事务可以是一条SQL语句，一组SQL语句或整个程序</p>
</blockquote>
<p><strong>事务的四大特性ACID</strong></p>
<blockquote>
<p>原子性（atomicity）：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
<p>一致性（consistency）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>
<p>隔离性（isolation）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p>
<p>持久性（durability）：持久性也称永久性（permanence），指事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
</blockquote>
<p><strong>不考虑隔离性会产生的3个问题</strong></p>
<blockquote>
<ol>
<li><p>脏读：在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>
</li>
<li><p>不可重复读：在一个事务里面读取了两次某个数据，读出来的数据不一致。这是由于在查询间隔，被另一个事务修改并提交了。</p>
<p>例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p>
</li>
<li><p>幻读（虚读）：在一个事务里面的操作中发现了未被操作的数据。</p>
<p>幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p>
<p>　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p>
</li>
</ol>
</blockquote>
<p><strong>解决办法：四种隔离级别</strong></p>
<blockquote>
<p>读未提交：一个事务可以读取另一个未提交事务的数据。什么问题都解决不了</p>
<p>读已提交：就是一个事务要等另一个事务提交后才能读取数据。可以防脏读，不能防不可重复读和幻读。</p>
<p>可重复读：在开始读取数据（事务开启）时，不再允许修改操作。可以解决不可重复读问题。</p>
<p>串行化：直到一个事务的所有子事务全部结束才可以执行下一个事务。是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p>
</blockquote>
<h4 id="JDBC中事务的回顾"><a href="#JDBC中事务的回顾" class="headerlink" title="JDBC中事务的回顾"></a>JDBC中事务的回顾</h4><p>在 JDBC 中我们可以通过手动方式将事务的提交改为手动方式，通过 <code>setAutoCommit()</code> 方法就可以调整。 通过 JDK 文档，我们知道该方法的作用如下：</p>
<blockquote>
<p>将此连接的自动提交模式设置为给定状态。 </p>
<p>如果连接处于自动提交模式，则其所有SQL语句将作为单个事务执行并提交。 </p>
<p>否则，它的SQL语句被分组成通过调用方法<code>commit</code>或方法<code>rollback</code> 。 默认情况下，新连接处于自动提交模式。</p>
</blockquote>
<p>那么我们的 Mybatis 框架因为是对 JDBC 的封装，所以 Mybatis 框架的事务控制方式，本身也是用 JDBC的 setAutoCommit()方法来设置事务提交方式的。 </p>
<h4 id="Mybatis-中事务提交方式"><a href="#Mybatis-中事务提交方式" class="headerlink" title="Mybatis 中事务提交方式"></a>Mybatis 中事务提交方式</h4><ul>
<li><p>默认为手动提交：</p>
<p>之前的 CUD 操作过程中，我们都要手动进 行事务的提交，原因是 setAutoCommit()方法在执行时它的值被设置为 false 了，所以我们在 CUD 操作中， 必须通过 sqlSession.commit()方法来执行提交操作。 </p>
</li>
<li><p>自动提交事务的设置</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span><span class="comment">//在测试方法执行之前执行 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    <span class="comment">//1.读取配置文件  </span></span><br><span class="line">    in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);  </span><br><span class="line">    <span class="comment">//2.创建构建者对象  </span></span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();  </span><br><span class="line">    <span class="comment">//3.创建 SqlSession 工厂对象  </span></span><br><span class="line">    factory = builder.build(in); </span><br><span class="line">    <span class="comment">//4.创建 SqlSession 对象  </span></span><br><span class="line">    session = factory.openSession(<span class="keyword">true</span>);	<span class="comment">//这里设置为true即可</span></span><br><span class="line">    <span class="comment">//5.创建 Dao 的代理对象  </span></span><br><span class="line">    userDao = session.getMapper(IUserDao.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时事务就设置为自动提交了，同样可以实现CUD操作时记录的保存。</p>
<blockquote>
<p>虽然这也是一种方式，但就编程而言，设置为自动提交方式为 false再根据情况决定是否进行提交，这种方式更常用。因为我们可以根据业务情况来决定提交是否进行提交。 </p>
</blockquote>
<h2 id="Mybatis-基于XML配置的动态-SQL-语句使用"><a href="#Mybatis-基于XML配置的动态-SQL-语句使用" class="headerlink" title="Mybatis 基于XML配置的动态 SQL 语句使用"></a>Mybatis 基于XML配置的动态 SQL 语句使用</h2><p>Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL 是动态变 化的，此时在前面的学习中我们的 SQL 就不能满足要求了。 </p>
<h3 id="动态-SQL-之-lt-if-gt-标签"><a href="#动态-SQL-之-lt-if-gt-标签" class="headerlink" title="动态 SQL 之&lt;if&gt;标签"></a>动态 SQL 之<code>&lt;if&gt;</code>标签</h3><blockquote>
<p>需求：</p>
<p>根据实体类的不同取值，使用不同的 SQL 语句来进行查询</p>
<p>比如：在 id 如果不为空时可以根据 id 查询， 如果 username 不同空时还要加入用户名作为条件。这种情况在我们的多条件组合查询中经常会碰到。 </p>
</blockquote>
<ol>
<li>持久层 Dao 接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据传入的查询条件查询</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> user 查询条件，用户名、性别、地址等信息可能有也可能没有</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByCondition</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>持久层 Dao 映射配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  根据条件查询 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;if&gt;标签的 test 属性中写的是对象的属性名，如果是包装类的对象要使用 OGNL 表达式的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span></span><br><span class="line">            and sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试根据条件查询</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User u = <span class="keyword">new</span> User();</span><br><span class="line">    u.setUsername(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">    u.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userDao.findByCondition(u);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动态-SQL-之-lt-foreach-gt-标签"><a href="#动态-SQL-之-lt-foreach-gt-标签" class="headerlink" title="动态 SQL 之&lt;foreach&gt;标签"></a>动态 SQL 之<code>&lt;foreach&gt;</code>标签</h4><blockquote>
<p>需求：</p>
<p>传入多个 id 查询用户信息，用下边两个 sql 实现： </p>
<p><code>SELECT * FROM USERS WHERE username LIKE &#39;%张%&#39; AND (id=10 OR id=89 OR id=16) </code></p>
<p><code>SELECT * FROM USERS WHERE username LIKE &#39;%张%&#39; AND id IN (10,89,16) </code></p>
<p>这样我们在进行范围查询时，就要将一个集合中的值，作为参数动态添加进来。将如何进行参数的传递？</p>
</blockquote>
<ol>
<li>在 QueryVo 中加入一个 List 集合用于封装参数 </li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ids;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIds</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ids = ids;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>持久层 Dao 接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据QueryVo中提供的id集合，查询用户信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> vo</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserInIds</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>持久层 Dao 映射配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  根据QueryVo中提供的id集合，查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserInIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.conv.domain.QueryVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null and ids.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                #&#123;uid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SQL 语句：</p>
<p>select 字段 from user where id in (?) </p>
<p><code>&lt;foreach&gt;</code>标签用于遍历集合，它的属性：  </p>
<ul>
<li>collection：代表要遍历的集合元素，注意编写时不要写 <code>#&#123;&#125;  </code></li>
<li>open：代表语句的开始部分  </li>
<li>close：代表结束部分 </li>
<li>item：代表遍历集合的每个元素，生成的变量名  </li>
<li>sperator：代表分隔符 </li>
</ul>
<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试foreach标签的使用</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindInIds</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    list.add(<span class="number">41</span>);</span><br><span class="line">    list.add(<span class="number">42</span>);</span><br><span class="line">    list.add(<span class="number">43</span>);</span><br><span class="line">    list.add(<span class="number">100</span>);</span><br><span class="line">    vo.setIds(list);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userDao.findUserInIds(vo);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mybatis-中简化编写的-SQL-片段"><a href="#Mybatis-中简化编写的-SQL-片段" class="headerlink" title="Mybatis 中简化编写的 SQL 片段"></a>Mybatis 中简化编写的 SQL 片段</h2><p>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的。 </p>
<ol>
<li>定义代码片段</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  抽取重复的sql语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;defaultUser&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>引用代码片段 </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id是dao的方法名称，不能随便写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;defaultUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  根据QueryVo中提供的id集合，查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserInIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.conv.domain.QueryVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;defaultUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null and ids.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                #&#123;uid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>sql 语句后面的分号可加可不加，但是提取的 sql 语句一定不能加分号，因为提取出来的语句可能需要与其他 sql 语句进行拼接，加分号会导致错误，所以建议都不加分号</p>
</blockquote>
<h2 id="Mybatis-中的多表操作"><a href="#Mybatis-中的多表操作" class="headerlink" title="Mybatis 中的多表操作"></a>Mybatis 中的多表操作</h2><p>表之间的关系：一对多、多对一、一对一、多对多</p>
<p>特例：一个用户对应多个订单，如果拿出每一个订单，它只能属于一个用户，所以 Mybatis 就把多对一看成了一对一</p>
<h3 id="一对一、一对多"><a href="#一对一、一对多" class="headerlink" title="一对一、一对多"></a>一对一、一对多</h3><p>示例：用户和账户</p>
<p>一个用户可以有多个账户，一个账户只能属于一个用户（多个账户也可以属于同一个用户）</p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li>建立两张表：用户表，账户表，让用户表和账户表之间具备一对多的关系：需要使用外键在账户表中添加</li>
</ol>
<p><code>sql</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`username`</span>,<span class="string">`birthday`</span>,<span class="string">`sex`</span>,<span class="string">`address`</span>) <span class="keyword">values</span> (<span class="number">41</span>,<span class="string">&#x27;老王&#x27;</span>,<span class="string">&#x27;2018-02-27 17:47:08&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),(<span class="number">42</span>,<span class="string">&#x27;小二王&#x27;</span>,<span class="string">&#x27;2018-03-02 15:09:37&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;北京金燕龙&#x27;</span>),(<span class="number">43</span>,<span class="string">&#x27;小二王&#x27;</span>,<span class="string">&#x27;2018-03-04 11:34:34&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;北京金燕龙&#x27;</span>),(<span class="number">45</span>,<span class="string">&#x27;传智播客&#x27;</span>,<span class="string">&#x27;2018-03-04 12:04:06&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北京金燕龙&#x27;</span>),(<span class="number">46</span>,<span class="string">&#x27;老王&#x27;</span>,<span class="string">&#x27;2018-03-07 17:37:26&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),(<span class="number">48</span>,<span class="string">&#x27;小马宝莉&#x27;</span>,<span class="string">&#x27;2018-03-08 11:44:00&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;北京修正&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`account`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account`</span> (</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  <span class="string">`UID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  <span class="string">`MONEY`</span> <span class="keyword">double</span> <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;金额&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`ID`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_Reference_8`</span> (<span class="string">`UID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_Reference_8`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`UID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`account`</span>(<span class="string">`ID`</span>,<span class="string">`UID`</span>,<span class="string">`MONEY`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">46</span>,<span class="number">1000</span>),(<span class="number">2</span>,<span class="number">45</span>,<span class="number">1000</span>),(<span class="number">3</span>,<span class="number">46</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>建立两个实体类：用户实体类和账户实体类，让用户和账户的实体类能体现出来一对多的关系 </li>
</ol>
<blockquote>
<p>通过面向对象的(has a)关系可以得知，我们可以在 Account 类中加入一个 User 类的对象来代表这个账户 是哪个用户的。 </p>
</blockquote>
<p><code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对多关系映射：主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccounts</span><span class="params">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>account.java</code></p>
<p>因为 Account 类中包含了一个 User 类的对象，它可以封装账户所对应的用户信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对一关系映射：从表实体应该包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, uid=&quot;</span> + uid +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&quot;, user=&quot;</span> + user +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DAO：</p>
<p><code>src\main\java\com\conv\dao\IAccountDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，同时还要获取到当前账户的所属用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>建立两个配置文件：用户的配置文件、账户的配置文件。并实现配置：</p>
<p><strong>1. 一对一查询（多对一）：当我们查询账户时，可以同时得到账户的所属用户信息</strong></p>
<p><strong>2. 一对多查询：当我们查询用户时，可以同时得到用户下所包含的账户信息</strong></p>
</li>
</ol>
<blockquote>
<p>注意：</p>
<p>因为一个账户信息只能供某个用户使用</p>
<p>所以从查询账户信息出发关联查询用户信息为一对一查询</p>
<p>如果从用户信息出发查询用户下的账户信息则为一对多查询，因为一个用户可以有多个账户</p>
</blockquote>
<h4 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h4><blockquote>
<p>分析：</p>
<p>当我们查询账户时，可以同时得到账户的所属用户信息。</p>
</blockquote>
<ol>
<li>要实现查询所有账户，同时还要获取到当前账户的所属用户信息，先写出其 SQL 语句：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.*, u.username, u.address FROM account a, &#96;user&#96; u WHERE u.id &#x3D; a.uid</span><br></pre></td></tr></table></figure>

<p>我们可以使用 <code>resultMap</code>，定义专门的 <code>resultMap</code> 用于映射一对一查询结果。</p>
<ol start="2">
<li>定义 AccountDao.xml 文件：</li>
</ol>
<p><code>src\main\resources\com\conv\dao\IAccountDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IAccountDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义封装account和user的resultMap--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;accountUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  一对一的关系映射，配置封装user的内容 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  javaType用于提示封装到那个对象（好像删了也没事） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是dao的方法名称，resultMap是resultMap的id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;accountUserMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT a.*, u.username, u.address FROM account a, `user` u WHERE u.id = a.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<p><code>src\test\java\com\conv\test\AccountTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3. 获取SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 获取dao的代理对象</span></span><br><span class="line">        accountDao = session.getMapper(IAccountDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">        accounts.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h4><blockquote>
<p>分析：</p>
<p>当我们查询用户时，可以同时得到用户下所包含的账户信息</p>
</blockquote>
<ol>
<li>先写出其 SQL 语句：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> u <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">account</span> a <span class="keyword">on</span> u.id = a.UID</span><br></pre></td></tr></table></figure>

<p>左外连接会返回左表的所有数据</p>
<ol start="2">
<li>定义 UserDao.xml 文件：</li>
</ol>
<p><code>src\main\resources\com\conv\dao\IUserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  定义User的resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userAccountMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  配置user对象中 accounts 集合的映射 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  ofType是集合中元素的类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是dao的方法名称，不能随便写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userAccountMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM `user` u LEFT OUTER JOIN account a on u.id = a.UID</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<p><code>src\test\java\com\conv\test\UserTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3. 获取SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 获取dao的代理对象</span></span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        users.forEach(user -&gt; &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">            System.out.println(user.getAccounts());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>示例：用户和角色</p>
<p>一个用户可以有多个角色，一个角色可以赋予多个用户</p>
<h4 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li>建立两张表：用户表，角色表，让用户表和角色表具有多对多的关系。需要使用中间表，中间表中包含各自的主键，在中间表中是外键。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`role`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`role`</span> (</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  <span class="string">`ROLE_NAME`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  <span class="string">`ROLE_DESC`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;角色描述&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`ID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`role`</span>(<span class="string">`ID`</span>,<span class="string">`ROLE_NAME`</span>,<span class="string">`ROLE_DESC`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;院长&#x27;</span>,<span class="string">&#x27;管理整个学院&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;总裁&#x27;</span>,<span class="string">&#x27;管理整个公司&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;校长&#x27;</span>,<span class="string">&#x27;管理整个学校&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user_role`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_role`</span> (</span><br><span class="line">  <span class="string">`UID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  <span class="string">`RID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;角色编号&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`UID`</span>,<span class="string">`RID`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_Reference_10`</span> (<span class="string">`RID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_Reference_10`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`RID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`role`</span> (<span class="string">`ID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_Reference_9`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`UID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user_role`</span>(<span class="string">`UID`</span>,<span class="string">`RID`</span>) <span class="keyword">values</span> (<span class="number">41</span>,<span class="number">1</span>),(<span class="number">45</span>,<span class="number">1</span>),(<span class="number">41</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>建立两个实体类：用户实体类和角色实体类，让用户和角色的实体类能体现出来多对多的关系，各自包含对方一个集合引用</li>
</ol>
<p><code>src\main\java\com\conv\domain\User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多的关系映射：一个用户可以具备多个角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>src\main\java\com\conv\domain\Role.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多的关系映射，一个角色可以赋予多个用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getRoleId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleId</span><span class="params">(Integer roleId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleDesc</span><span class="params">(String roleDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleDesc = roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Role&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;roleId=&quot;</span> + roleId +</span><br><span class="line">                <span class="string">&quot;, roleName=&#x27;&quot;</span> + roleName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, roleDesc=&#x27;&quot;</span> + roleDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>持久层接口 <code>src\main\java\com\conv\dao\IRoleDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRoleDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>建立两个配置文件：用户的配置文件，角色的配置文件</p>
<p>实现配置：</p>
<ul>
<li>当我们查询用户时，可以同时得到用户所包含的角色信息；</li>
<li>当我们查询角色时，可以同时得到角色的所赋予的用户信息</li>
</ul>
</li>
</ol>
<p>分析：</p>
<p><strong>查询用户：</strong></p>
<blockquote>
<p>我们需要用到Role表，但角色分配的用户的信息我们并不能直接找到用户信息，而是要通过中间表(USER_ROLE 表)才能关联到用户信息。 </p>
</blockquote>
<p>写出其SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> u.*,r.id <span class="keyword">as</span> rid,r.role_name,r.role_desc <span class="keyword">FROM</span> <span class="string">`user`</span> u</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> user_role ur <span class="keyword">on</span> u.id = ur.UID</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="keyword">role</span> r <span class="keyword">on</span> r.ID = ur.RID</span><br></pre></td></tr></table></figure>

<p><strong>查询角色：</strong></p>
<blockquote>
<p>我们需要用到Role表，但角色分配的用户的信息我们并不能直接找到用户信息，而是要通过中间表(USER_ROLE 表)才能关联到用户信息。 </p>
</blockquote>
<p>写出其SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> u.*,r.id <span class="keyword">as</span> rid,r.role_name,r.role_desc <span class="keyword">FROM</span> <span class="keyword">role</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> user_role ur <span class="keyword">on</span> r.ID = ur.RID</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="string">`user`</span> u <span class="keyword">on</span> u.id = ur.UID</span><br></pre></td></tr></table></figure>

<p><strong>建立两个配置文件</strong></p>
<p><code>src\main\resources\com\conv\dao\IUserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  定义User的resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置角色集合的映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleDesc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_desc&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是dao的方法名称，不能随便写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT u.*,r.id as rid,r.role_name,r.role_desc FROM `user` u</span><br><span class="line">        LEFT OUTER JOIN user_role ur on u.id = ur.UID</span><br><span class="line">        LEFT OUTER JOIN role r on r.ID = ur.RID</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>src\main\resources\com\conv\dao\IRoleDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IRoleDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  定义Role的resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;roleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleDesc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_desc&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;users&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是dao的方法名称，不能随便写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;roleMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT u.*,r.id as rid,r.role_name,r.role_desc FROM role r</span><br><span class="line">        LEFT OUTER JOIN user_role ur on r.ID = ur.RID</span><br><span class="line">        LEFT OUTER JOIN `user` u on u.id = ur.UID</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src\test\java\com\conv\test\UserTest.java</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 测试查询所有</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    users.forEach(user -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----每个用户的信息-----&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(user.getRoles());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src\test\java\com\conv\test\RoleTest.java</span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 测试查询所有</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Role&gt; roles = roleDao.findAll();</span><br><span class="line">    roles.forEach(role-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----每个角色的信息-----&quot;</span>);</span><br><span class="line">        System.out.println(role);</span><br><span class="line">        System.out.println(role.getUsers());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记04</title>
    <url>/posts/mybatis-xue-xi-bi-ji-04/</url>
    <content><![CDATA[<h2 id="Mybatis-中的延迟加载"><a href="#Mybatis-中的延迟加载" class="headerlink" title="Mybatis 中的延迟加载"></a>Mybatis 中的延迟加载</h2><p>问题：</p>
<blockquote>
<p>在一对多中，当我们有一个用户，它有100个账户。在查询用户的时候，要不要把关联的账户查出来？在查询账户的时候，要不要把关联的用户查出来？</p>
<p>在查询用户时，用户下的账户信息应该是，什么时候使用，什么时候查询</p>
<p>在查询账户时，账户的所属用户信息应该是随着账户查询时一起查询出来的</p>
</blockquote>
<ul>
<li><p>延迟加载</p>
<p>在真正使用数据时才发起查询，不用的时候不查询。按需加载（懒加载）</p>
</li>
<li><p>立即加载</p>
<p>不管用不用，只要一调用方法，马上发起查询</p>
</li>
</ul>
<p>在对应的四种表关系中：一对多，多对一，一对一，多对多</p>
<ul>
<li>一对多，多对多（关联的对象是多）：通常情况下我们都是采用延迟加载。</li>
<li>多对一，一对一（关联的对象是一）：通常情况下我们都是采用立即加载</li>
</ul>
<p>association、collection 具备延迟加载功能</p>
<h3 id="使用-assocation-实现延迟加载"><a href="#使用-assocation-实现延迟加载" class="headerlink" title="使用 assocation 实现延迟加载"></a>使用 assocation 实现延迟加载</h3><blockquote>
<p>需求：</p>
<p>查询账户信息的同时查询用户信息（一对一）</p>
</blockquote>
<h4 id="账户的持久层-DAO-接口"><a href="#账户的持久层-DAO-接口" class="headerlink" title="账户的持久层 DAO 接口"></a>账户的持久层 DAO 接口</h4><p><code>src\main\java\com\conv\dao\IAccountDao.java</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">package com.conv.dao;</span><br><span class="line"></span><br><span class="line">public interface IAccountDao &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询所有账户，同时还要获取到当前账户的所属用户信息</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    List<span class="tag">&lt;<span class="name">Account</span>&gt;</span> findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="账户的持久层映射文件"><a href="#账户的持久层映射文件" class="headerlink" title="账户的持久层映射文件"></a>账户的持久层映射文件</h4><p><code>src\main\resources\com\conv\dao\IAccountDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IAccountDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义封装account和user的resultMap--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;accountUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  一对一的关系映射，配置封装user的内容 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  javaType用于提示封装到那个对象（好像删了也没事） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  select属性指定的内容，查询用户的唯一标识 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- column属性指定的内容，用户根据id查询时，所需要的参数的值，可自行命名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.conv.dao.IUserDao.findById&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是dao的方法名称，resultMap是resultMap的id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;accountUserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="用户的持久层接口"><a href="#用户的持久层接口" class="headerlink" title="用户的持久层接口"></a>用户的持久层接口</h4><p><code>src\main\java\com\conv\dao\IUserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用户的持久层映射文件"><a href="#用户的持久层映射文件" class="headerlink" title="用户的持久层映射文件"></a>用户的持久层映射文件</h4><p><code>src\main\resources\com\conv\dao\IUserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是dao的方法名称，不能随便写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user u left outer join account a on u.id = a.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写测试只查帐户信息不查用户信息"><a href="#编写测试只查帐户信息不查用户信息" class="headerlink" title="编写测试只查帐户信息不查用户信息"></a>编写测试只查帐户信息不查用户信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3. 获取SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 获取dao的代理对象</span></span><br><span class="line">        accountDao = session.getMapper(IAccountDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因为本次只是将Account对象查询出来放入List集合中，并没有涉及到User对象，</span></span><br><span class="line"><span class="comment">     * 所以就没有 发出 SQL 语句查询账户所关联的 User 对象的查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-Collection-实现延迟加载"><a href="#使用-Collection-实现延迟加载" class="headerlink" title="使用 Collection 实现延迟加载"></a>使用 Collection 实现延迟加载</h3><blockquote>
<p>同样我们也可以在一对多关系配置的 <code>&lt;collection&gt;</code> 结点中配置延迟加载策略。</p>
<p><code>&lt;collection&gt;</code> 结点中也有 select 属性，column 属性。 </p>
<p>需求： </p>
<p>完成加载用户对象时，查询该用户所拥有的账户信息。（一对多）</p>
</blockquote>
<h3 id="在-User-实体类中加入-List-lt-Account-gt-属性"><a href="#在-User-实体类中加入-List-lt-Account-gt-属性" class="headerlink" title="在 User 实体类中加入 List&lt;Account&gt;属性"></a>在 User 实体类中加入 <code>List&lt;Account&gt;</code>属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对多关系映射：主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccounts</span><span class="params">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="账户的持久层-DAO-接口-1"><a href="#账户的持久层-DAO-接口-1" class="headerlink" title="账户的持久层 DAO 接口"></a>账户的持久层 DAO 接口</h4><p><code>src\main\java\com\conv\dao\IAccountDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，同时还要获取到当前账户的所属用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户 id 查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写用户持久层映射配置"><a href="#编写用户持久层映射配置" class="headerlink" title="编写用户持久层映射配置"></a>编写用户持久层映射配置</h4><p><code>src\main\resources\com\conv\dao\IUserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- collection是用于建立一对多集合属性的对应关系</span></span><br><span class="line"><span class="comment">             ofType用于指定集合元素的数据类型</span></span><br><span class="line"><span class="comment">             select用于指定查询账户的唯一标识（账户的 dao 全限定类名加上方法名）</span></span><br><span class="line"><span class="comment">             column用于指定哪个字段的值作为条件查询</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- collection标签主要用于加载关联的集合对象 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- select属性用于指定查询account列表的sql语句，所以填写的是该sql映射的id --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- column属性用于指定select属性的参数来源，上面的参数来源于user的id列，所以就写id这个字段名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;account&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;com.conv.dao.IAccountDao.findByUid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是dao的方法名称，不能随便写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">       select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写账户持久层映射配置"><a href="#编写账户持久层映射配置" class="headerlink" title="编写账户持久层映射配置"></a>编写账户持久层映射配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户的 id 查询账户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;account&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    select * from account where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试只加载用户信息"><a href="#测试只加载用户信息" class="headerlink" title="测试只加载用户信息"></a>测试只加载用户信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3. 获取SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 获取dao的代理对象</span></span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mybatis-中的缓存"><a href="#Mybatis-中的缓存" class="headerlink" title="Mybatis 中的缓存"></a>Mybatis 中的缓存</h2><p>使用缓存可以减少和数据库的交互次数，提高执行效率。</p>
<ul>
<li>适用于缓存的：<ul>
<li>经常查询并且不经常改变的数据</li>
<li>数据的正确与否对最终结果影响不大的数据</li>
</ul>
</li>
</ul>
<p>Mybatis 中缓存分为一级缓存，二级缓存。</p>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>它指的是 Mybatis 中 <code>SqlSession</code> 对象的缓存。</p>
<blockquote>
<p>当我们执行查询之后，查询的结果会同时存入到 <code>SqlSession</code> 为我们提供一块区域中。</p>
<p>该区域的结构是一个Map。当我们再次查询同样的数据，Mybatis 会先去 <code>Sqlsession</code> 中查询是否有，有的话直接拿出来用。</p>
<p>一级缓存是 <code>SqlSession</code> 级别的缓存，只要 <code>SqlSession</code> 没有 <code>flush</code> 或 <code>close</code>，它就存在。</p>
</blockquote>
<p>分析：</p>
<p>一级缓存是 <code>SqlSession</code> 范围的缓存，当调用 <code>SqlSession</code> 的修改，添加，删除，<code>commit()</code>，<code>close()</code> 等方法时，就会清空一级缓存。 </p>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 1. 使用 close 实现清空缓存 */</span></span><br><span class="line"><span class="comment">//        session.close();</span></span><br><span class="line"><span class="comment">//        //再次获取 Session 对象</span></span><br><span class="line"><span class="comment">//        session = factory.openSession();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 2. 使用 clearCache 实现清空缓存 */</span></span><br><span class="line">        session.clearCache();</span><br><span class="line"></span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line"></span><br><span class="line">        User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1 == user2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>它指的是 Mybatis 中 <code>SqlSessionFactory</code> 对象的缓存。由同一个 <code>SqlSessionFactory</code> 对象创建的 <code>SqlSession</code> 共享其缓存。</p>
<p>二级缓存的使用步骤：</p>
<ol>
<li>让 Mybatis 框架支持二级缓存（在 <code>SqlMapConfig.xml</code> 中配置）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- cacheEnabled 的默认值就是 true，所以不配置也行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>让当前的映射文件支持二级缓存（在 <code>IUserDao.xml</code> 中配置）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace是Dao的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.conv.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启user支持二级缓存 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;cache&gt;标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">       select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.conv.domain.User&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 更新用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;,address = #&#123;address&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>让当前的操作支持二级缓存（在 <code>select</code> 标签中配置）</p>
<p>将 <code>UserDao.xml</code> 映射文件中的 <code>&lt;select&gt;</code> 标签中设置 <code>useCache=”true”</code> 代表当前这个 <code>statement</code> 要使用 二级缓存，如果不使用二级缓存可以设置为 false。 </p>
<p>注意：针对每次查询都需要最新的数据 sql，要设置成 <code>useCache=false</code>，禁用二级缓存。 </p>
</li>
<li><p>二级缓存测试：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondLevelCacheTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSecondCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession1 = factory.openSession();</span><br><span class="line">        IUserDao dao1 = sqlSession1.getMapper(IUserDao.class);</span><br><span class="line">        User user1 = dao1.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        sqlSession1.close();    <span class="comment">//一级缓存消失</span></span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession2 = factory.openSession();</span><br><span class="line">        IUserDao dao2 = sqlSession2.getMapper(IUserDao.class);</span><br><span class="line">        User user2 = dao2.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        sqlSession2.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(user1 == user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过上面的测试，我们发现执行了两次查询，并且在执行第一次查询后，我们关闭了一级缓存，再去执行第二 次查询时，我们发现并没有对数据库发出 sql 语句，所以此时的数据就只能是来自于我们所说的二级缓存。 </p>
<p>值得注意的是，最终输出的结果是 <code>false</code>，这是因为在二级缓存中寸的并不是对象，而是一些散装数据，每次查询就用这些数据封装一个对象返回，所以两个对象是不同的。</p>
<h2 id="Mybatis-中的注解开发"><a href="#Mybatis-中的注解开发" class="headerlink" title="Mybatis 中的注解开发"></a>Mybatis 中的注解开发</h2><p>Mybatis 使用注解开发的方式可以减少编写 Mapper 映射文件。</p>
<h3 id="mybatis-的常用注解说明"><a href="#mybatis-的常用注解说明" class="headerlink" title="mybatis 的常用注解说明"></a>mybatis 的常用注解说明</h3><blockquote>
<p>@Insert：实现新增 </p>
<p>@Update：实现更新 </p>
<p>@Delete：实现删除 </p>
<p>@Select：实现查询 </p>
<p>@Result：实现结果集封装 </p>
<p>@Results：可以与 @Result 一起使用，封装多个结果集 </p>
<p>@ResultMap：实现引用 @Results 定义的封装 </p>
<p>@One：实现一对一结果集封装 </p>
<p>@Many：实现一对多结果集封装 </p>
<p>@SelectProvider：实现动态 SQL 映射 </p>
<p>@CacheNamespace：实现注解二级缓存的使用</p>
</blockquote>
<h3 id="使用-Mybatis-注解实现单表-CRUD"><a href="#使用-Mybatis-注解实现单表-CRUD" class="headerlink" title="使用 Mybatis 注解实现单表 CRUD"></a>使用 Mybatis 注解实现单表 CRUD</h3><p>单表的 CRUD 操作是最基本的操作，前面我们的学习都是基于 Mybaits 的映射文件来实现的</p>
<h4 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用注解方式开发持久层接口"><a href="#使用注解方式开发持久层接口" class="headerlink" title="使用注解方式开发持久层接口"></a>使用注解方式开发持久层接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(username, address, sex, birthday)&quot; +</span></span><br><span class="line"><span class="meta">            &quot; values(#&#123;username&#125;, #&#123;address&#125;, #&#123;sex&#125;, #&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125;,birthday=#&#123;birthday&#125; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username like #&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    @Select(&quot;select * from user where username like &#x27;%$&#123;value&#125;%&#x27;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String userName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(id) from user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过注解方式，我们就不需要再去编写 UserDao.xml 映射文件了。</p>
<h4 id="编写-SqlMapConfig-配置文件"><a href="#编写-SqlMapConfig-配置文件" class="headerlink" title="编写 SqlMapConfig 配置文件"></a>编写 SqlMapConfig 配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  引入外部配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbcConfig.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  使用 typeAliases 配置别名，它只能配置 domain 中类的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.conv.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源（连接池）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置连接数据库的基本信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定带有注解的dao接口所在的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.conv.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写测试方法"><a href="#编写测试方法" class="headerlink" title="编写测试方法"></a>编写测试方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisAnnoTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    SqlSessionFactory factory;</span><br><span class="line">    IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3. 获取SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 获取dao的代理对象</span></span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;mybatis annotation&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京市昌平区&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;mybatis annotation&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京市昌平区&quot;</span>);</span><br><span class="line">        user.setId(<span class="number">86</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.deleteUser(<span class="number">87</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOneUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userDao.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findUserByName(<span class="string">&quot;%王%&quot;</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(userDao.findTotal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用注解实现复杂关系映射（多表）开发及延迟加载"><a href="#使用注解实现复杂关系映射（多表）开发及延迟加载" class="headerlink" title="使用注解实现复杂关系映射（多表）开发及延迟加载"></a>使用注解实现复杂关系映射（多表）开发及延迟加载</h3><p>实现复杂关系映射之前我们可以在映射文件中通过配置 <code>&lt;resultMap&gt;</code> 来实现，在使用注解开发时我们需要借助@Results 注解，@Result 注解，@One 注解，@Many 注解。</p>
<h4 id="复杂关系映射的注解说明"><a href="#复杂关系映射的注解说明" class="headerlink" title="复杂关系映射的注解说明"></a>复杂关系映射的注解说明</h4><p>@Results 注解</p>
<blockquote>
<ul>
<li>代替的是标签 <code>&lt;resultMap&gt;</code></li>
<li>该注解中可以使用单个 <code>@Result</code> 注解，也可以使用 <code>@Result</code> 集合 <code>@Results(&#123;@Result()，@Result()&#125;)</code>或 <code>@Results(@Result())</code> </li>
</ul>
</blockquote>
<p>@Result 注解 </p>
<blockquote>
<ul>
<li>代替了 <code>&lt;id&gt;</code> 标签和 <code>&lt;result&gt;</code> 标签  </li>
<li>@Result 中 属性介绍：   <ul>
<li>id：是否是主键字段  </li>
<li>column：数据库的列名</li>
</ul>
</li>
<li>property：需要装配的属性名  </li>
<li>one：需要使用的 <code>@One</code> 注解<code>(@Result(one = @One)()))</code>  </li>
<li>many：需要使用的 <code>@Many</code> 注解<code>(@Result(many = @many)()))</code></li>
</ul>
</blockquote>
<p>@One 注解（一对一）</p>
<blockquote>
<ul>
<li><p>代替了 <code>&lt;assocation&gt;</code> 标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。</p>
</li>
<li><p>@One 注解属性介绍： </p>
</li>
<li><p><code>select</code>  指定用来多表查询的 <code>sqlmapper</code>  （全限定方法名）</p>
</li>
<li><p><code>fetchType</code> 会覆盖全局的配置参数 <code>lazyLoadingEnabled</code>（配置延迟加载或立即加载）</p>
</li>
<li><p>使用格式：  </p>
<p><code>@Result(column = &quot; &quot;, property = &quot;&quot;, one = @One(select=&quot;&quot;))</code> </p>
</li>
</ul>
</blockquote>
<p>@Many 注解（多对一）</p>
<blockquote>
<ul>
<li><p>代替了 <code>&lt;Collection&gt;</code> 标签,是是多表查询的关键，在注解中用来指定子查询返回对象集合。  </p>
</li>
<li><p>注意：聚集元素用来处理 ”一对多” 的关系。需要指定映射的 Java 实体类的属性，属性的 <code>javaType</code> （一般为 <code>ArrayList</code>）但是注解中可以不定义；</p>
</li>
<li><p>使用格式：</p>
<p><code>@Result(property = &quot;&quot;, column = &quot;&quot;, many = @Many(select=&quot;&quot;))</code> </p>
</li>
</ul>
</blockquote>
<h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>一个用户具有多个账户信息，所以形成了用户(User)与账户(Account)之间的一对多关系。 </p>
<p>一对一关系映射：</p>
<blockquote>
<p>加载账户信息时并且加载该账户的用户信息，根据情况可实现延迟加载。（注解方式实现） </p>
</blockquote>
<p>一对多关系映射：</p>
<blockquote>
<p>查询用户信息时，也要查询他的账户列表。使用注解方式实现</p>
</blockquote>
<h4 id="Account-实体类加入-User"><a href="#Account-实体类加入-User" class="headerlink" title="Account 实体类加入 User"></a>Account 实体类加入 User</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多对一（mybatis中称为一对一），一个账户只能属于一个用户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, uid=&quot;</span> + uid +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="User-实体类加入-List-lt-Account-gt"><a href="#User-实体类加入-List-lt-Account-gt" class="headerlink" title="User 实体类加入 List&lt;Account&gt;"></a>User 实体类加入 <code>List&lt;Account&gt;</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多关系映射，一个用户对应多个账户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccounts</span><span class="params">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUserBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userBirthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserBirthday</span><span class="params">(Date userBirthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userBirthday = userBirthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserSex</span><span class="params">(String userSex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userSex = userSex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserAddress</span><span class="params">(String userAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userId=&quot;</span> + userId +</span><br><span class="line">                <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, userBirthday=&quot;</span> + userBirthday +</span><br><span class="line">                <span class="string">&quot;, userSex=&#x27;&quot;</span> + userSex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, userAddress=&#x27;&quot;</span> + userAddress + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写用户的持久层接口并使用注解配置"><a href="#编写用户的持久层接口并使用注解配置" class="headerlink" title="编写用户的持久层接口并使用注解配置"></a>编写用户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启二级缓存</span></span><br><span class="line"><span class="comment">// 加 @CacheNamespace 注解</span></span><br><span class="line"><span class="meta">@CacheNamespace(blocking = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 故意让数据库的列名和类中的属性名不对应</span></span><br><span class="line">    <span class="comment">// 使用@Results注解可以使其一一对应</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对一的时候用立即加载</span></span><br><span class="line"><span class="comment">     * 对多的时候用懒加载</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Results</span> 注解中的id属性可以自行指定，这样其他只用引入<span class="doctag">@ResultMap</span>注解即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id = &quot;userMap&quot;, value = &#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true, column = &quot;id&quot;, property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;username&quot;, property = &quot;userName&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;sex&quot;, property = &quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;address&quot;, property = &quot;userAddress&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;birthday&quot;, property = &quot;userBirthday&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;, property = &quot;accounts&quot;,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.conv.dao.IAccountDao.findAccountByUid&quot;,</span></span><br><span class="line"><span class="meta">                            fetchType = FetchType.LAZY))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResultMap(value = &#123;&quot;userMap&quot;&#125;)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名模糊查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username like #&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResultMap(value = &#123;&quot;userMap&quot;&#125;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加账户的持久层接口并使用注解配置"><a href="#添加账户的持久层接口并使用注解配置" class="headerlink" title="添加账户的持久层接口并使用注解配置"></a>添加账户的持久层接口并使用注解配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，并且获取每个账户所属的用户信息</span></span><br><span class="line"><span class="comment">     * 对一的时候用立即加载</span></span><br><span class="line"><span class="comment">     * 对多的时候用懒加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id = &quot;accountMap&quot;, value = &#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true, column = &quot;id&quot;, property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;uid&quot;, property = &quot;uid&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;money&quot;, property = &quot;money&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;user&quot;, column = &quot;uid&quot;, one = @One(select = &quot;com.conv.dao.IUserDao.findById&quot;, fetchType = FetchType.EAGER))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account where uid = #&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试一对一关联及延迟加载"><a href="#测试一对一关联及延迟加载" class="headerlink" title="测试一对一关联及延迟加载"></a>测试一对一关联及延迟加载</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    SqlSessionFactory factory;</span><br><span class="line">    IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3. 获取SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 获取dao的代理对象</span></span><br><span class="line">        accountDao = session.getMapper(IAccountDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line"><span class="comment">//        accounts.forEach(account -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;-----------每个账户的信息-------------&quot;);</span></span><br><span class="line"><span class="comment">//            System.out.println(account);</span></span><br><span class="line"><span class="comment">//            System.out.println(account.getUser());</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试一对多关联"><a href="#测试一对多关联" class="headerlink" title="测试一对多关联"></a>测试一对多关联</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Ignore</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    SqlSessionFactory factory;</span><br><span class="line">    IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//3. 获取SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//4. 获取dao的代理对象</span></span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        users.forEach(user -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;----------每个用户的信息-------------&quot;</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">            System.out.println(<span class="string">&quot;账户信息：&quot;</span>);</span><br><span class="line">            System.out.println(user.getAccounts());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOneUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userDao.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findUserByName(<span class="string">&quot;%王%&quot;</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mybatis-基于注解的二级缓存"><a href="#mybatis-基于注解的二级缓存" class="headerlink" title="mybatis 基于注解的二级缓存"></a>mybatis 基于注解的二级缓存</h3><h4 id="在-SqlMapConfig-中开启二级缓存支持"><a href="#在-SqlMapConfig-中开启二级缓存支持" class="headerlink" title="在 SqlMapConfig 中开启二级缓存支持"></a>在 SqlMapConfig 中开启二级缓存支持</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  引入外部配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbcConfig.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置开启二级缓存 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认就是 true，可不配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  使用 typeAliases 配置别名，它只能配置 domain 中类的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.conv.domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源（连接池）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置连接数据库的基本信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定带有注解的dao接口所在的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.conv.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在持久层接口中使用注解配置二级缓存"><a href="#在持久层接口中使用注解配置二级缓存" class="headerlink" title="在持久层接口中使用注解配置二级缓存"></a>在持久层接口中使用注解配置二级缓存</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启二级缓存</span></span><br><span class="line"><span class="comment">// 加 @CacheNamespace 注解</span></span><br><span class="line"><span class="meta">@CacheNamespace(blocking = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">//...   </span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.conv.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondLevelCacheTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">//用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 获取SqlSessionFactory</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次打开</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao.class);</span><br><span class="line">        User user = userDao.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        session.close();    <span class="comment">//释放一级缓存</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//再次打开</span></span><br><span class="line">        SqlSession session1 = factory.openSession();</span><br><span class="line">        IUserDao userDao1 = session1.getMapper(IUserDao.class);</span><br><span class="line">        User user1 = userDao1.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        session1.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>完结撒花~</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
</search>
